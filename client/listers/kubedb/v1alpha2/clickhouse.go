/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "kubedb.dev/apimachinery/apis/kubedb/v1alpha2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClickHouseLister helps list ClickHouses.
// All objects returned here must be treated as read-only.
type ClickHouseLister interface {
	// List lists all ClickHouses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.ClickHouse, err error)
	// ClickHouses returns an object that can list and get ClickHouses.
	ClickHouses(namespace string) ClickHouseNamespaceLister
	ClickHouseListerExpansion
}

// clickHouseLister implements the ClickHouseLister interface.
type clickHouseLister struct {
	indexer cache.Indexer
}

// NewClickHouseLister returns a new ClickHouseLister.
func NewClickHouseLister(indexer cache.Indexer) ClickHouseLister {
	return &clickHouseLister{indexer: indexer}
}

// List lists all ClickHouses in the indexer.
func (s *clickHouseLister) List(selector labels.Selector) (ret []*v1alpha2.ClickHouse, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.ClickHouse))
	})
	return ret, err
}

// ClickHouses returns an object that can list and get ClickHouses.
func (s *clickHouseLister) ClickHouses(namespace string) ClickHouseNamespaceLister {
	return clickHouseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClickHouseNamespaceLister helps list and get ClickHouses.
// All objects returned here must be treated as read-only.
type ClickHouseNamespaceLister interface {
	// List lists all ClickHouses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.ClickHouse, err error)
	// Get retrieves the ClickHouse from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.ClickHouse, error)
	ClickHouseNamespaceListerExpansion
}

// clickHouseNamespaceLister implements the ClickHouseNamespaceLister
// interface.
type clickHouseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClickHouses in the indexer for a given namespace.
func (s clickHouseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.ClickHouse, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.ClickHouse))
	})
	return ret, err
}

// Get retrieves the ClickHouse from the indexer for a given namespace and name.
func (s clickHouseNamespaceLister) Get(name string) (*v1alpha2.ClickHouse, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("clickhouse"), name)
	}
	return obj.(*v1alpha2.ClickHouse), nil
}
