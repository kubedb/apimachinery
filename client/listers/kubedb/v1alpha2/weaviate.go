/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "kubedb.dev/apimachinery/apis/kubedb/v1alpha2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WeaviateLister helps list Weaviates.
// All objects returned here must be treated as read-only.
type WeaviateLister interface {
	// List lists all Weaviates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Weaviate, err error)
	// Weaviates returns an object that can list and get Weaviates.
	Weaviates(namespace string) WeaviateNamespaceLister
	WeaviateListerExpansion
}

// weaviateLister implements the WeaviateLister interface.
type weaviateLister struct {
	indexer cache.Indexer
}

// NewWeaviateLister returns a new WeaviateLister.
func NewWeaviateLister(indexer cache.Indexer) WeaviateLister {
	return &weaviateLister{indexer: indexer}
}

// List lists all Weaviates in the indexer.
func (s *weaviateLister) List(selector labels.Selector) (ret []*v1alpha2.Weaviate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Weaviate))
	})
	return ret, err
}

// Weaviates returns an object that can list and get Weaviates.
func (s *weaviateLister) Weaviates(namespace string) WeaviateNamespaceLister {
	return weaviateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WeaviateNamespaceLister helps list and get Weaviates.
// All objects returned here must be treated as read-only.
type WeaviateNamespaceLister interface {
	// List lists all Weaviates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Weaviate, err error)
	// Get retrieves the Weaviate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.Weaviate, error)
	WeaviateNamespaceListerExpansion
}

// weaviateNamespaceLister implements the WeaviateNamespaceLister
// interface.
type weaviateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Weaviates in the indexer for a given namespace.
func (s weaviateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.Weaviate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Weaviate))
	})
	return ret, err
}

// Get retrieves the Weaviate from the indexer for a given namespace and name.
func (s weaviateNamespaceLister) Get(name string) (*v1alpha2.Weaviate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("weaviate"), name)
	}
	return obj.(*v1alpha2.Weaviate), nil
}
