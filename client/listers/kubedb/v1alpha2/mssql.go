/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha2 "kubedb.dev/apimachinery/apis/kubedb/v1alpha2"
)

// MsSQLLister helps list MsSQLs.
// All objects returned here must be treated as read-only.
type MsSQLLister interface {
	// List lists all MsSQLs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.MsSQL, err error)
	// MsSQLs returns an object that can list and get MsSQLs.
	MsSQLs(namespace string) MsSQLNamespaceLister
	MsSQLListerExpansion
}

// msSQLLister implements the MsSQLLister interface.
type msSQLLister struct {
	indexer cache.Indexer
}

// NewMsSQLLister returns a new MsSQLLister.
func NewMsSQLLister(indexer cache.Indexer) MsSQLLister {
	return &msSQLLister{indexer: indexer}
}

// List lists all MsSQLs in the indexer.
func (s *msSQLLister) List(selector labels.Selector) (ret []*v1alpha2.MsSQL, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.MsSQL))
	})
	return ret, err
}

// MsSQLs returns an object that can list and get MsSQLs.
func (s *msSQLLister) MsSQLs(namespace string) MsSQLNamespaceLister {
	return msSQLNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MsSQLNamespaceLister helps list and get MsSQLs.
// All objects returned here must be treated as read-only.
type MsSQLNamespaceLister interface {
	// List lists all MsSQLs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.MsSQL, err error)
	// Get retrieves the MsSQL from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.MsSQL, error)
	MsSQLNamespaceListerExpansion
}

// msSQLNamespaceLister implements the MsSQLNamespaceLister
// interface.
type msSQLNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MsSQLs in the indexer for a given namespace.
func (s msSQLNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.MsSQL, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.MsSQL))
	})
	return ret, err
}

// Get retrieves the MsSQL from the indexer for a given namespace and name.
func (s msSQLNamespaceLister) Get(name string) (*v1alpha2.MsSQL, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("mssql"), name)
	}
	return obj.(*v1alpha2.MsSQL), nil
}
