/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha2 "kubedb.dev/apimachinery/apis/kubedb/v1alpha2"
)

// QdrantLister helps list Qdrants.
// All objects returned here must be treated as read-only.
type QdrantLister interface {
	// List lists all Qdrants in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Qdrant, err error)
	// Qdrants returns an object that can list and get Qdrants.
	Qdrants(namespace string) QdrantNamespaceLister
	QdrantListerExpansion
}

// qdrantLister implements the QdrantLister interface.
type qdrantLister struct {
	indexer cache.Indexer
}

// NewQdrantLister returns a new QdrantLister.
func NewQdrantLister(indexer cache.Indexer) QdrantLister {
	return &qdrantLister{indexer: indexer}
}

// List lists all Qdrants in the indexer.
func (s *qdrantLister) List(selector labels.Selector) (ret []*v1alpha2.Qdrant, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Qdrant))
	})
	return ret, err
}

// Qdrants returns an object that can list and get Qdrants.
func (s *qdrantLister) Qdrants(namespace string) QdrantNamespaceLister {
	return qdrantNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QdrantNamespaceLister helps list and get Qdrants.
// All objects returned here must be treated as read-only.
type QdrantNamespaceLister interface {
	// List lists all Qdrants in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Qdrant, err error)
	// Get retrieves the Qdrant from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.Qdrant, error)
	QdrantNamespaceListerExpansion
}

// qdrantNamespaceLister implements the QdrantNamespaceLister
// interface.
type qdrantNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Qdrants in the indexer for a given namespace.
func (s qdrantNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.Qdrant, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Qdrant))
	})
	return ret, err
}

// Get retrieves the Qdrant from the indexer for a given namespace and name.
func (s qdrantNamespaceLister) Get(name string) (*v1alpha2.Qdrant, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("qdrant"), name)
	}
	return obj.(*v1alpha2.Qdrant), nil
}
