/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "kubedb.dev/apimachinery/apis/kubedb/v1alpha2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CassandraLister helps list Cassandras.
// All objects returned here must be treated as read-only.
type CassandraLister interface {
	// List lists all Cassandras in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Cassandra, err error)
	// Cassandras returns an object that can list and get Cassandras.
	Cassandras(namespace string) CassandraNamespaceLister
	CassandraListerExpansion
}

// cassandraLister implements the CassandraLister interface.
type cassandraLister struct {
	indexer cache.Indexer
}

// NewCassandraLister returns a new CassandraLister.
func NewCassandraLister(indexer cache.Indexer) CassandraLister {
	return &cassandraLister{indexer: indexer}
}

// List lists all Cassandras in the indexer.
func (s *cassandraLister) List(selector labels.Selector) (ret []*v1alpha2.Cassandra, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Cassandra))
	})
	return ret, err
}

// Cassandras returns an object that can list and get Cassandras.
func (s *cassandraLister) Cassandras(namespace string) CassandraNamespaceLister {
	return cassandraNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CassandraNamespaceLister helps list and get Cassandras.
// All objects returned here must be treated as read-only.
type CassandraNamespaceLister interface {
	// List lists all Cassandras in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Cassandra, err error)
	// Get retrieves the Cassandra from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.Cassandra, error)
	CassandraNamespaceListerExpansion
}

// cassandraNamespaceLister implements the CassandraNamespaceLister
// interface.
type cassandraNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Cassandras in the indexer for a given namespace.
func (s cassandraNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.Cassandra, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Cassandra))
	})
	return ret, err
}

// Get retrieves the Cassandra from the indexer for a given namespace and name.
func (s cassandraNamespaceLister) Get(name string) (*v1alpha2.Cassandra, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("cassandra"), name)
	}
	return obj.(*v1alpha2.Cassandra), nil
}
