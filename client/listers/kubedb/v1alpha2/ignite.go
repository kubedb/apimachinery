/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "kubedb.dev/apimachinery/apis/kubedb/v1alpha2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IgniteLister helps list Ignites.
// All objects returned here must be treated as read-only.
type IgniteLister interface {
	// List lists all Ignites in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Ignite, err error)
	// Ignites returns an object that can list and get Ignites.
	Ignites(namespace string) IgniteNamespaceLister
	IgniteListerExpansion
}

// igniteLister implements the IgniteLister interface.
type igniteLister struct {
	indexer cache.Indexer
}

// NewIgniteLister returns a new IgniteLister.
func NewIgniteLister(indexer cache.Indexer) IgniteLister {
	return &igniteLister{indexer: indexer}
}

// List lists all Ignites in the indexer.
func (s *igniteLister) List(selector labels.Selector) (ret []*v1alpha2.Ignite, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Ignite))
	})
	return ret, err
}

// Ignites returns an object that can list and get Ignites.
func (s *igniteLister) Ignites(namespace string) IgniteNamespaceLister {
	return igniteNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IgniteNamespaceLister helps list and get Ignites.
// All objects returned here must be treated as read-only.
type IgniteNamespaceLister interface {
	// List lists all Ignites in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Ignite, err error)
	// Get retrieves the Ignite from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.Ignite, error)
	IgniteNamespaceListerExpansion
}

// igniteNamespaceLister implements the IgniteNamespaceLister
// interface.
type igniteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ignites in the indexer for a given namespace.
func (s igniteNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.Ignite, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Ignite))
	})
	return ret, err
}

// Get retrieves the Ignite from the indexer for a given namespace and name.
func (s igniteNamespaceLister) Get(name string) (*v1alpha2.Ignite, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("ignite"), name)
	}
	return obj.(*v1alpha2.Ignite), nil
}
