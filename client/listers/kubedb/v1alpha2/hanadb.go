/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "kubedb.dev/apimachinery/apis/kubedb/v1alpha2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HanaDBLister helps list HanaDBs.
// All objects returned here must be treated as read-only.
type HanaDBLister interface {
	// List lists all HanaDBs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.HanaDB, err error)
	// HanaDBs returns an object that can list and get HanaDBs.
	HanaDBs(namespace string) HanaDBNamespaceLister
	HanaDBListerExpansion
}

// hanaDBLister implements the HanaDBLister interface.
type hanaDBLister struct {
	indexer cache.Indexer
}

// NewHanaDBLister returns a new HanaDBLister.
func NewHanaDBLister(indexer cache.Indexer) HanaDBLister {
	return &hanaDBLister{indexer: indexer}
}

// List lists all HanaDBs in the indexer.
func (s *hanaDBLister) List(selector labels.Selector) (ret []*v1alpha2.HanaDB, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.HanaDB))
	})
	return ret, err
}

// HanaDBs returns an object that can list and get HanaDBs.
func (s *hanaDBLister) HanaDBs(namespace string) HanaDBNamespaceLister {
	return hanaDBNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HanaDBNamespaceLister helps list and get HanaDBs.
// All objects returned here must be treated as read-only.
type HanaDBNamespaceLister interface {
	// List lists all HanaDBs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.HanaDB, err error)
	// Get retrieves the HanaDB from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.HanaDB, error)
	HanaDBNamespaceListerExpansion
}

// hanaDBNamespaceLister implements the HanaDBNamespaceLister
// interface.
type hanaDBNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HanaDBs in the indexer for a given namespace.
func (s hanaDBNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.HanaDB, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.HanaDB))
	})
	return ret, err
}

// Get retrieves the HanaDB from the indexer for a given namespace and name.
func (s hanaDBNamespaceLister) Get(name string) (*v1alpha2.HanaDB, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("hanadb"), name)
	}
	return obj.(*v1alpha2.HanaDB), nil
}
