/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "kubedb.dev/apimachinery/apis/kubedb/v1alpha2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubscriberLister helps list Subscribers.
// All objects returned here must be treated as read-only.
type SubscriberLister interface {
	// List lists all Subscribers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Subscriber, err error)
	// Subscribers returns an object that can list and get Subscribers.
	Subscribers(namespace string) SubscriberNamespaceLister
	SubscriberListerExpansion
}

// subscriberLister implements the SubscriberLister interface.
type subscriberLister struct {
	indexer cache.Indexer
}

// NewSubscriberLister returns a new SubscriberLister.
func NewSubscriberLister(indexer cache.Indexer) SubscriberLister {
	return &subscriberLister{indexer: indexer}
}

// List lists all Subscribers in the indexer.
func (s *subscriberLister) List(selector labels.Selector) (ret []*v1alpha2.Subscriber, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Subscriber))
	})
	return ret, err
}

// Subscribers returns an object that can list and get Subscribers.
func (s *subscriberLister) Subscribers(namespace string) SubscriberNamespaceLister {
	return subscriberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubscriberNamespaceLister helps list and get Subscribers.
// All objects returned here must be treated as read-only.
type SubscriberNamespaceLister interface {
	// List lists all Subscribers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Subscriber, err error)
	// Get retrieves the Subscriber from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.Subscriber, error)
	SubscriberNamespaceListerExpansion
}

// subscriberNamespaceLister implements the SubscriberNamespaceLister
// interface.
type subscriberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Subscribers in the indexer for a given namespace.
func (s subscriberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.Subscriber, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Subscriber))
	})
	return ret, err
}

// Get retrieves the Subscriber from the indexer for a given namespace and name.
func (s subscriberNamespaceLister) Get(name string) (*v1alpha2.Subscriber, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("subscriber"), name)
	}
	return obj.(*v1alpha2.Subscriber), nil
}
