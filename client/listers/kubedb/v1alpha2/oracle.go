/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "kubedb.dev/apimachinery/apis/kubedb/v1alpha2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OracleLister helps list Oracles.
// All objects returned here must be treated as read-only.
type OracleLister interface {
	// List lists all Oracles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Oracle, err error)
	// Oracles returns an object that can list and get Oracles.
	Oracles(namespace string) OracleNamespaceLister
	OracleListerExpansion
}

// oracleLister implements the OracleLister interface.
type oracleLister struct {
	indexer cache.Indexer
}

// NewOracleLister returns a new OracleLister.
func NewOracleLister(indexer cache.Indexer) OracleLister {
	return &oracleLister{indexer: indexer}
}

// List lists all Oracles in the indexer.
func (s *oracleLister) List(selector labels.Selector) (ret []*v1alpha2.Oracle, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Oracle))
	})
	return ret, err
}

// Oracles returns an object that can list and get Oracles.
func (s *oracleLister) Oracles(namespace string) OracleNamespaceLister {
	return oracleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OracleNamespaceLister helps list and get Oracles.
// All objects returned here must be treated as read-only.
type OracleNamespaceLister interface {
	// List lists all Oracles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Oracle, err error)
	// Get retrieves the Oracle from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.Oracle, error)
	OracleNamespaceListerExpansion
}

// oracleNamespaceLister implements the OracleNamespaceLister
// interface.
type oracleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Oracles in the indexer for a given namespace.
func (s oracleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.Oracle, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Oracle))
	})
	return ret, err
}

// Get retrieves the Oracle from the indexer for a given namespace and name.
func (s oracleNamespaceLister) Get(name string) (*v1alpha2.Oracle, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("oracle"), name)
	}
	return obj.(*v1alpha2.Oracle), nil
}
