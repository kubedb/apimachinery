/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "kubedb.dev/apimachinery/apis/kubedb/v1alpha2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HazelcastLister helps list Hazelcasts.
// All objects returned here must be treated as read-only.
type HazelcastLister interface {
	// List lists all Hazelcasts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Hazelcast, err error)
	// Hazelcasts returns an object that can list and get Hazelcasts.
	Hazelcasts(namespace string) HazelcastNamespaceLister
	HazelcastListerExpansion
}

// hazelcastLister implements the HazelcastLister interface.
type hazelcastLister struct {
	indexer cache.Indexer
}

// NewHazelcastLister returns a new HazelcastLister.
func NewHazelcastLister(indexer cache.Indexer) HazelcastLister {
	return &hazelcastLister{indexer: indexer}
}

// List lists all Hazelcasts in the indexer.
func (s *hazelcastLister) List(selector labels.Selector) (ret []*v1alpha2.Hazelcast, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Hazelcast))
	})
	return ret, err
}

// Hazelcasts returns an object that can list and get Hazelcasts.
func (s *hazelcastLister) Hazelcasts(namespace string) HazelcastNamespaceLister {
	return hazelcastNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HazelcastNamespaceLister helps list and get Hazelcasts.
// All objects returned here must be treated as read-only.
type HazelcastNamespaceLister interface {
	// List lists all Hazelcasts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Hazelcast, err error)
	// Get retrieves the Hazelcast from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.Hazelcast, error)
	HazelcastNamespaceListerExpansion
}

// hazelcastNamespaceLister implements the HazelcastNamespaceLister
// interface.
type hazelcastNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Hazelcasts in the indexer for a given namespace.
func (s hazelcastNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.Hazelcast, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Hazelcast))
	})
	return ret, err
}

// Get retrieves the Hazelcast from the indexer for a given namespace and name.
func (s hazelcastNamespaceLister) Get(name string) (*v1alpha2.Hazelcast, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("hazelcast"), name)
	}
	return obj.(*v1alpha2.Hazelcast), nil
}
