/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "kubedb.dev/apimachinery/apis/kubedb/v1alpha2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DB2Lister helps list DB2s.
// All objects returned here must be treated as read-only.
type DB2Lister interface {
	// List lists all DB2s in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.DB2, err error)
	// DB2s returns an object that can list and get DB2s.
	DB2s(namespace string) DB2NamespaceLister
	DB2ListerExpansion
}

// dB2Lister implements the DB2Lister interface.
type dB2Lister struct {
	indexer cache.Indexer
}

// NewDB2Lister returns a new DB2Lister.
func NewDB2Lister(indexer cache.Indexer) DB2Lister {
	return &dB2Lister{indexer: indexer}
}

// List lists all DB2s in the indexer.
func (s *dB2Lister) List(selector labels.Selector) (ret []*v1alpha2.DB2, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.DB2))
	})
	return ret, err
}

// DB2s returns an object that can list and get DB2s.
func (s *dB2Lister) DB2s(namespace string) DB2NamespaceLister {
	return dB2NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DB2NamespaceLister helps list and get DB2s.
// All objects returned here must be treated as read-only.
type DB2NamespaceLister interface {
	// List lists all DB2s in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.DB2, err error)
	// Get retrieves the DB2 from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.DB2, error)
	DB2NamespaceListerExpansion
}

// dB2NamespaceLister implements the DB2NamespaceLister
// interface.
type dB2NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DB2s in the indexer for a given namespace.
func (s dB2NamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.DB2, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.DB2))
	})
	return ret, err
}

// Get retrieves the DB2 from the indexer for a given namespace and name.
func (s dB2NamespaceLister) Get(name string) (*v1alpha2.DB2, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("db2"), name)
	}
	return obj.(*v1alpha2.DB2), nil
}
