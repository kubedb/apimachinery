/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/kafka/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SchemaRegistryLister helps list SchemaRegistries.
// All objects returned here must be treated as read-only.
type SchemaRegistryLister interface {
	// List lists all SchemaRegistries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SchemaRegistry, err error)
	// SchemaRegistries returns an object that can list and get SchemaRegistries.
	SchemaRegistries(namespace string) SchemaRegistryNamespaceLister
	SchemaRegistryListerExpansion
}

// schemaRegistryLister implements the SchemaRegistryLister interface.
type schemaRegistryLister struct {
	indexer cache.Indexer
}

// NewSchemaRegistryLister returns a new SchemaRegistryLister.
func NewSchemaRegistryLister(indexer cache.Indexer) SchemaRegistryLister {
	return &schemaRegistryLister{indexer: indexer}
}

// List lists all SchemaRegistries in the indexer.
func (s *schemaRegistryLister) List(selector labels.Selector) (ret []*v1alpha1.SchemaRegistry, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SchemaRegistry))
	})
	return ret, err
}

// SchemaRegistries returns an object that can list and get SchemaRegistries.
func (s *schemaRegistryLister) SchemaRegistries(namespace string) SchemaRegistryNamespaceLister {
	return schemaRegistryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SchemaRegistryNamespaceLister helps list and get SchemaRegistries.
// All objects returned here must be treated as read-only.
type SchemaRegistryNamespaceLister interface {
	// List lists all SchemaRegistries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SchemaRegistry, err error)
	// Get retrieves the SchemaRegistry from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SchemaRegistry, error)
	SchemaRegistryNamespaceListerExpansion
}

// schemaRegistryNamespaceLister implements the SchemaRegistryNamespaceLister
// interface.
type schemaRegistryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SchemaRegistries in the indexer for a given namespace.
func (s schemaRegistryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SchemaRegistry, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SchemaRegistry))
	})
	return ret, err
}

// Get retrieves the SchemaRegistry from the indexer for a given namespace and name.
func (s schemaRegistryNamespaceLister) Get(name string) (*v1alpha1.SchemaRegistry, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("schemaregistry"), name)
	}
	return obj.(*v1alpha1.SchemaRegistry), nil
}
