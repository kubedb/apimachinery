/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/kafka/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RestProxyLister helps list RestProxies.
// All objects returned here must be treated as read-only.
type RestProxyLister interface {
	// List lists all RestProxies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RestProxy, err error)
	// RestProxies returns an object that can list and get RestProxies.
	RestProxies(namespace string) RestProxyNamespaceLister
	RestProxyListerExpansion
}

// restProxyLister implements the RestProxyLister interface.
type restProxyLister struct {
	indexer cache.Indexer
}

// NewRestProxyLister returns a new RestProxyLister.
func NewRestProxyLister(indexer cache.Indexer) RestProxyLister {
	return &restProxyLister{indexer: indexer}
}

// List lists all RestProxies in the indexer.
func (s *restProxyLister) List(selector labels.Selector) (ret []*v1alpha1.RestProxy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RestProxy))
	})
	return ret, err
}

// RestProxies returns an object that can list and get RestProxies.
func (s *restProxyLister) RestProxies(namespace string) RestProxyNamespaceLister {
	return restProxyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RestProxyNamespaceLister helps list and get RestProxies.
// All objects returned here must be treated as read-only.
type RestProxyNamespaceLister interface {
	// List lists all RestProxies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RestProxy, err error)
	// Get retrieves the RestProxy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RestProxy, error)
	RestProxyNamespaceListerExpansion
}

// restProxyNamespaceLister implements the RestProxyNamespaceLister
// interface.
type restProxyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RestProxies in the indexer for a given namespace.
func (s restProxyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RestProxy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RestProxy))
	})
	return ret, err
}

// Get retrieves the RestProxy from the indexer for a given namespace and name.
func (s restProxyNamespaceLister) Get(name string) (*v1alpha1.RestProxy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("restproxy"), name)
	}
	return obj.(*v1alpha1.RestProxy), nil
}
