/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubedb.dev/apimachinery/apis/kafka/v1alpha1"
)

// ConnectClusterLister helps list ConnectClusters.
// All objects returned here must be treated as read-only.
type ConnectClusterLister interface {
	// List lists all ConnectClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectCluster, err error)
	// ConnectClusters returns an object that can list and get ConnectClusters.
	ConnectClusters(namespace string) ConnectClusterNamespaceLister
	ConnectClusterListerExpansion
}

// connectClusterLister implements the ConnectClusterLister interface.
type connectClusterLister struct {
	indexer cache.Indexer
}

// NewConnectClusterLister returns a new ConnectClusterLister.
func NewConnectClusterLister(indexer cache.Indexer) ConnectClusterLister {
	return &connectClusterLister{indexer: indexer}
}

// List lists all ConnectClusters in the indexer.
func (s *connectClusterLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectCluster))
	})
	return ret, err
}

// ConnectClusters returns an object that can list and get ConnectClusters.
func (s *connectClusterLister) ConnectClusters(namespace string) ConnectClusterNamespaceLister {
	return connectClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConnectClusterNamespaceLister helps list and get ConnectClusters.
// All objects returned here must be treated as read-only.
type ConnectClusterNamespaceLister interface {
	// List lists all ConnectClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectCluster, err error)
	// Get retrieves the ConnectCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConnectCluster, error)
	ConnectClusterNamespaceListerExpansion
}

// connectClusterNamespaceLister implements the ConnectClusterNamespaceLister
// interface.
type connectClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConnectClusters in the indexer for a given namespace.
func (s connectClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectCluster))
	})
	return ret, err
}

// Get retrieves the ConnectCluster from the indexer for a given namespace and name.
func (s connectClusterNamespaceLister) Get(name string) (*v1alpha1.ConnectCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("connectcluster"), name)
	}
	return obj.(*v1alpha1.ConnectCluster), nil
}
