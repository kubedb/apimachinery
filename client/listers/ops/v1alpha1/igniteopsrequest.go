/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/ops/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IgniteOpsRequestLister helps list IgniteOpsRequests.
// All objects returned here must be treated as read-only.
type IgniteOpsRequestLister interface {
	// List lists all IgniteOpsRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IgniteOpsRequest, err error)
	// IgniteOpsRequests returns an object that can list and get IgniteOpsRequests.
	IgniteOpsRequests(namespace string) IgniteOpsRequestNamespaceLister
	IgniteOpsRequestListerExpansion
}

// igniteOpsRequestLister implements the IgniteOpsRequestLister interface.
type igniteOpsRequestLister struct {
	indexer cache.Indexer
}

// NewIgniteOpsRequestLister returns a new IgniteOpsRequestLister.
func NewIgniteOpsRequestLister(indexer cache.Indexer) IgniteOpsRequestLister {
	return &igniteOpsRequestLister{indexer: indexer}
}

// List lists all IgniteOpsRequests in the indexer.
func (s *igniteOpsRequestLister) List(selector labels.Selector) (ret []*v1alpha1.IgniteOpsRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IgniteOpsRequest))
	})
	return ret, err
}

// IgniteOpsRequests returns an object that can list and get IgniteOpsRequests.
func (s *igniteOpsRequestLister) IgniteOpsRequests(namespace string) IgniteOpsRequestNamespaceLister {
	return igniteOpsRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IgniteOpsRequestNamespaceLister helps list and get IgniteOpsRequests.
// All objects returned here must be treated as read-only.
type IgniteOpsRequestNamespaceLister interface {
	// List lists all IgniteOpsRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IgniteOpsRequest, err error)
	// Get retrieves the IgniteOpsRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IgniteOpsRequest, error)
	IgniteOpsRequestNamespaceListerExpansion
}

// igniteOpsRequestNamespaceLister implements the IgniteOpsRequestNamespaceLister
// interface.
type igniteOpsRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IgniteOpsRequests in the indexer for a given namespace.
func (s igniteOpsRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IgniteOpsRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IgniteOpsRequest))
	})
	return ret, err
}

// Get retrieves the IgniteOpsRequest from the indexer for a given namespace and name.
func (s igniteOpsRequestNamespaceLister) Get(name string) (*v1alpha1.IgniteOpsRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("igniteopsrequest"), name)
	}
	return obj.(*v1alpha1.IgniteOpsRequest), nil
}
