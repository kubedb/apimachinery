/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubedb.dev/apimachinery/apis/ops/v1alpha1"
)

// ClickHouseOpsRequestLister helps list ClickHouseOpsRequests.
// All objects returned here must be treated as read-only.
type ClickHouseOpsRequestLister interface {
	// List lists all ClickHouseOpsRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClickHouseOpsRequest, err error)
	// ClickHouseOpsRequests returns an object that can list and get ClickHouseOpsRequests.
	ClickHouseOpsRequests(namespace string) ClickHouseOpsRequestNamespaceLister
	ClickHouseOpsRequestListerExpansion
}

// clickHouseOpsRequestLister implements the ClickHouseOpsRequestLister interface.
type clickHouseOpsRequestLister struct {
	indexer cache.Indexer
}

// NewClickHouseOpsRequestLister returns a new ClickHouseOpsRequestLister.
func NewClickHouseOpsRequestLister(indexer cache.Indexer) ClickHouseOpsRequestLister {
	return &clickHouseOpsRequestLister{indexer: indexer}
}

// List lists all ClickHouseOpsRequests in the indexer.
func (s *clickHouseOpsRequestLister) List(selector labels.Selector) (ret []*v1alpha1.ClickHouseOpsRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClickHouseOpsRequest))
	})
	return ret, err
}

// ClickHouseOpsRequests returns an object that can list and get ClickHouseOpsRequests.
func (s *clickHouseOpsRequestLister) ClickHouseOpsRequests(namespace string) ClickHouseOpsRequestNamespaceLister {
	return clickHouseOpsRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClickHouseOpsRequestNamespaceLister helps list and get ClickHouseOpsRequests.
// All objects returned here must be treated as read-only.
type ClickHouseOpsRequestNamespaceLister interface {
	// List lists all ClickHouseOpsRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClickHouseOpsRequest, err error)
	// Get retrieves the ClickHouseOpsRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClickHouseOpsRequest, error)
	ClickHouseOpsRequestNamespaceListerExpansion
}

// clickHouseOpsRequestNamespaceLister implements the ClickHouseOpsRequestNamespaceLister
// interface.
type clickHouseOpsRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClickHouseOpsRequests in the indexer for a given namespace.
func (s clickHouseOpsRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClickHouseOpsRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClickHouseOpsRequest))
	})
	return ret, err
}

// Get retrieves the ClickHouseOpsRequest from the indexer for a given namespace and name.
func (s clickHouseOpsRequestNamespaceLister) Get(name string) (*v1alpha1.ClickHouseOpsRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clickhouseopsrequest"), name)
	}
	return obj.(*v1alpha1.ClickHouseOpsRequest), nil
}
