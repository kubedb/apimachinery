/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubedb.dev/apimachinery/apis/ops/v1alpha1"
)

// DruidOpsRequestLister helps list DruidOpsRequests.
// All objects returned here must be treated as read-only.
type DruidOpsRequestLister interface {
	// List lists all DruidOpsRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DruidOpsRequest, err error)
	// DruidOpsRequests returns an object that can list and get DruidOpsRequests.
	DruidOpsRequests(namespace string) DruidOpsRequestNamespaceLister
	DruidOpsRequestListerExpansion
}

// druidOpsRequestLister implements the DruidOpsRequestLister interface.
type druidOpsRequestLister struct {
	indexer cache.Indexer
}

// NewDruidOpsRequestLister returns a new DruidOpsRequestLister.
func NewDruidOpsRequestLister(indexer cache.Indexer) DruidOpsRequestLister {
	return &druidOpsRequestLister{indexer: indexer}
}

// List lists all DruidOpsRequests in the indexer.
func (s *druidOpsRequestLister) List(selector labels.Selector) (ret []*v1alpha1.DruidOpsRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DruidOpsRequest))
	})
	return ret, err
}

// DruidOpsRequests returns an object that can list and get DruidOpsRequests.
func (s *druidOpsRequestLister) DruidOpsRequests(namespace string) DruidOpsRequestNamespaceLister {
	return druidOpsRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DruidOpsRequestNamespaceLister helps list and get DruidOpsRequests.
// All objects returned here must be treated as read-only.
type DruidOpsRequestNamespaceLister interface {
	// List lists all DruidOpsRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DruidOpsRequest, err error)
	// Get retrieves the DruidOpsRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DruidOpsRequest, error)
	DruidOpsRequestNamespaceListerExpansion
}

// druidOpsRequestNamespaceLister implements the DruidOpsRequestNamespaceLister
// interface.
type druidOpsRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DruidOpsRequests in the indexer for a given namespace.
func (s druidOpsRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DruidOpsRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DruidOpsRequest))
	})
	return ret, err
}

// Get retrieves the DruidOpsRequest from the indexer for a given namespace and name.
func (s druidOpsRequestNamespaceLister) Get(name string) (*v1alpha1.DruidOpsRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("druidopsrequest"), name)
	}
	return obj.(*v1alpha1.DruidOpsRequest), nil
}
