/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubedb.dev/apimachinery/apis/ops/v1alpha1"
)

// PgpoolOpsRequestLister helps list PgpoolOpsRequests.
// All objects returned here must be treated as read-only.
type PgpoolOpsRequestLister interface {
	// List lists all PgpoolOpsRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PgpoolOpsRequest, err error)
	// PgpoolOpsRequests returns an object that can list and get PgpoolOpsRequests.
	PgpoolOpsRequests(namespace string) PgpoolOpsRequestNamespaceLister
	PgpoolOpsRequestListerExpansion
}

// pgpoolOpsRequestLister implements the PgpoolOpsRequestLister interface.
type pgpoolOpsRequestLister struct {
	indexer cache.Indexer
}

// NewPgpoolOpsRequestLister returns a new PgpoolOpsRequestLister.
func NewPgpoolOpsRequestLister(indexer cache.Indexer) PgpoolOpsRequestLister {
	return &pgpoolOpsRequestLister{indexer: indexer}
}

// List lists all PgpoolOpsRequests in the indexer.
func (s *pgpoolOpsRequestLister) List(selector labels.Selector) (ret []*v1alpha1.PgpoolOpsRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PgpoolOpsRequest))
	})
	return ret, err
}

// PgpoolOpsRequests returns an object that can list and get PgpoolOpsRequests.
func (s *pgpoolOpsRequestLister) PgpoolOpsRequests(namespace string) PgpoolOpsRequestNamespaceLister {
	return pgpoolOpsRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PgpoolOpsRequestNamespaceLister helps list and get PgpoolOpsRequests.
// All objects returned here must be treated as read-only.
type PgpoolOpsRequestNamespaceLister interface {
	// List lists all PgpoolOpsRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PgpoolOpsRequest, err error)
	// Get retrieves the PgpoolOpsRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PgpoolOpsRequest, error)
	PgpoolOpsRequestNamespaceListerExpansion
}

// pgpoolOpsRequestNamespaceLister implements the PgpoolOpsRequestNamespaceLister
// interface.
type pgpoolOpsRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PgpoolOpsRequests in the indexer for a given namespace.
func (s pgpoolOpsRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PgpoolOpsRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PgpoolOpsRequest))
	})
	return ret, err
}

// Get retrieves the PgpoolOpsRequest from the indexer for a given namespace and name.
func (s pgpoolOpsRequestNamespaceLister) Get(name string) (*v1alpha1.PgpoolOpsRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pgpoolopsrequest"), name)
	}
	return obj.(*v1alpha1.PgpoolOpsRequest), nil
}
