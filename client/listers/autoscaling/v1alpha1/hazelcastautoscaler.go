/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/autoscaling/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HazelcastAutoscalerLister helps list HazelcastAutoscalers.
// All objects returned here must be treated as read-only.
type HazelcastAutoscalerLister interface {
	// List lists all HazelcastAutoscalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HazelcastAutoscaler, err error)
	// HazelcastAutoscalers returns an object that can list and get HazelcastAutoscalers.
	HazelcastAutoscalers(namespace string) HazelcastAutoscalerNamespaceLister
	HazelcastAutoscalerListerExpansion
}

// hazelcastAutoscalerLister implements the HazelcastAutoscalerLister interface.
type hazelcastAutoscalerLister struct {
	indexer cache.Indexer
}

// NewHazelcastAutoscalerLister returns a new HazelcastAutoscalerLister.
func NewHazelcastAutoscalerLister(indexer cache.Indexer) HazelcastAutoscalerLister {
	return &hazelcastAutoscalerLister{indexer: indexer}
}

// List lists all HazelcastAutoscalers in the indexer.
func (s *hazelcastAutoscalerLister) List(selector labels.Selector) (ret []*v1alpha1.HazelcastAutoscaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HazelcastAutoscaler))
	})
	return ret, err
}

// HazelcastAutoscalers returns an object that can list and get HazelcastAutoscalers.
func (s *hazelcastAutoscalerLister) HazelcastAutoscalers(namespace string) HazelcastAutoscalerNamespaceLister {
	return hazelcastAutoscalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HazelcastAutoscalerNamespaceLister helps list and get HazelcastAutoscalers.
// All objects returned here must be treated as read-only.
type HazelcastAutoscalerNamespaceLister interface {
	// List lists all HazelcastAutoscalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HazelcastAutoscaler, err error)
	// Get retrieves the HazelcastAutoscaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HazelcastAutoscaler, error)
	HazelcastAutoscalerNamespaceListerExpansion
}

// hazelcastAutoscalerNamespaceLister implements the HazelcastAutoscalerNamespaceLister
// interface.
type hazelcastAutoscalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HazelcastAutoscalers in the indexer for a given namespace.
func (s hazelcastAutoscalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HazelcastAutoscaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HazelcastAutoscaler))
	})
	return ret, err
}

// Get retrieves the HazelcastAutoscaler from the indexer for a given namespace and name.
func (s hazelcastAutoscalerNamespaceLister) Get(name string) (*v1alpha1.HazelcastAutoscaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hazelcastautoscaler"), name)
	}
	return obj.(*v1alpha1.HazelcastAutoscaler), nil
}
