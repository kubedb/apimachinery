/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/autoscaling/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClickHouseAutoscalerLister helps list ClickHouseAutoscalers.
// All objects returned here must be treated as read-only.
type ClickHouseAutoscalerLister interface {
	// List lists all ClickHouseAutoscalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClickHouseAutoscaler, err error)
	// ClickHouseAutoscalers returns an object that can list and get ClickHouseAutoscalers.
	ClickHouseAutoscalers(namespace string) ClickHouseAutoscalerNamespaceLister
	ClickHouseAutoscalerListerExpansion
}

// clickHouseAutoscalerLister implements the ClickHouseAutoscalerLister interface.
type clickHouseAutoscalerLister struct {
	indexer cache.Indexer
}

// NewClickHouseAutoscalerLister returns a new ClickHouseAutoscalerLister.
func NewClickHouseAutoscalerLister(indexer cache.Indexer) ClickHouseAutoscalerLister {
	return &clickHouseAutoscalerLister{indexer: indexer}
}

// List lists all ClickHouseAutoscalers in the indexer.
func (s *clickHouseAutoscalerLister) List(selector labels.Selector) (ret []*v1alpha1.ClickHouseAutoscaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClickHouseAutoscaler))
	})
	return ret, err
}

// ClickHouseAutoscalers returns an object that can list and get ClickHouseAutoscalers.
func (s *clickHouseAutoscalerLister) ClickHouseAutoscalers(namespace string) ClickHouseAutoscalerNamespaceLister {
	return clickHouseAutoscalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClickHouseAutoscalerNamespaceLister helps list and get ClickHouseAutoscalers.
// All objects returned here must be treated as read-only.
type ClickHouseAutoscalerNamespaceLister interface {
	// List lists all ClickHouseAutoscalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClickHouseAutoscaler, err error)
	// Get retrieves the ClickHouseAutoscaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClickHouseAutoscaler, error)
	ClickHouseAutoscalerNamespaceListerExpansion
}

// clickHouseAutoscalerNamespaceLister implements the ClickHouseAutoscalerNamespaceLister
// interface.
type clickHouseAutoscalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClickHouseAutoscalers in the indexer for a given namespace.
func (s clickHouseAutoscalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClickHouseAutoscaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClickHouseAutoscaler))
	})
	return ret, err
}

// Get retrieves the ClickHouseAutoscaler from the indexer for a given namespace and name.
func (s clickHouseAutoscalerNamespaceLister) Get(name string) (*v1alpha1.ClickHouseAutoscaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clickhouseautoscaler"), name)
	}
	return obj.(*v1alpha1.ClickHouseAutoscaler), nil
}
