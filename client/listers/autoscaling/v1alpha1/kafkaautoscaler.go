/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubedb.dev/apimachinery/apis/autoscaling/v1alpha1"
)

// KafkaAutoscalerLister helps list KafkaAutoscalers.
// All objects returned here must be treated as read-only.
type KafkaAutoscalerLister interface {
	// List lists all KafkaAutoscalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KafkaAutoscaler, err error)
	// KafkaAutoscalers returns an object that can list and get KafkaAutoscalers.
	KafkaAutoscalers(namespace string) KafkaAutoscalerNamespaceLister
	KafkaAutoscalerListerExpansion
}

// kafkaAutoscalerLister implements the KafkaAutoscalerLister interface.
type kafkaAutoscalerLister struct {
	indexer cache.Indexer
}

// NewKafkaAutoscalerLister returns a new KafkaAutoscalerLister.
func NewKafkaAutoscalerLister(indexer cache.Indexer) KafkaAutoscalerLister {
	return &kafkaAutoscalerLister{indexer: indexer}
}

// List lists all KafkaAutoscalers in the indexer.
func (s *kafkaAutoscalerLister) List(selector labels.Selector) (ret []*v1alpha1.KafkaAutoscaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KafkaAutoscaler))
	})
	return ret, err
}

// KafkaAutoscalers returns an object that can list and get KafkaAutoscalers.
func (s *kafkaAutoscalerLister) KafkaAutoscalers(namespace string) KafkaAutoscalerNamespaceLister {
	return kafkaAutoscalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KafkaAutoscalerNamespaceLister helps list and get KafkaAutoscalers.
// All objects returned here must be treated as read-only.
type KafkaAutoscalerNamespaceLister interface {
	// List lists all KafkaAutoscalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KafkaAutoscaler, err error)
	// Get retrieves the KafkaAutoscaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KafkaAutoscaler, error)
	KafkaAutoscalerNamespaceListerExpansion
}

// kafkaAutoscalerNamespaceLister implements the KafkaAutoscalerNamespaceLister
// interface.
type kafkaAutoscalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KafkaAutoscalers in the indexer for a given namespace.
func (s kafkaAutoscalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KafkaAutoscaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KafkaAutoscaler))
	})
	return ret, err
}

// Get retrieves the KafkaAutoscaler from the indexer for a given namespace and name.
func (s kafkaAutoscalerNamespaceLister) Get(name string) (*v1alpha1.KafkaAutoscaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kafkaautoscaler"), name)
	}
	return obj.(*v1alpha1.KafkaAutoscaler), nil
}
