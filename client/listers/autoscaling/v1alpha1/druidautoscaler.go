/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubedb.dev/apimachinery/apis/autoscaling/v1alpha1"
)

// DruidAutoscalerLister helps list DruidAutoscalers.
// All objects returned here must be treated as read-only.
type DruidAutoscalerLister interface {
	// List lists all DruidAutoscalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DruidAutoscaler, err error)
	// DruidAutoscalers returns an object that can list and get DruidAutoscalers.
	DruidAutoscalers(namespace string) DruidAutoscalerNamespaceLister
	DruidAutoscalerListerExpansion
}

// druidAutoscalerLister implements the DruidAutoscalerLister interface.
type druidAutoscalerLister struct {
	indexer cache.Indexer
}

// NewDruidAutoscalerLister returns a new DruidAutoscalerLister.
func NewDruidAutoscalerLister(indexer cache.Indexer) DruidAutoscalerLister {
	return &druidAutoscalerLister{indexer: indexer}
}

// List lists all DruidAutoscalers in the indexer.
func (s *druidAutoscalerLister) List(selector labels.Selector) (ret []*v1alpha1.DruidAutoscaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DruidAutoscaler))
	})
	return ret, err
}

// DruidAutoscalers returns an object that can list and get DruidAutoscalers.
func (s *druidAutoscalerLister) DruidAutoscalers(namespace string) DruidAutoscalerNamespaceLister {
	return druidAutoscalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DruidAutoscalerNamespaceLister helps list and get DruidAutoscalers.
// All objects returned here must be treated as read-only.
type DruidAutoscalerNamespaceLister interface {
	// List lists all DruidAutoscalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DruidAutoscaler, err error)
	// Get retrieves the DruidAutoscaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DruidAutoscaler, error)
	DruidAutoscalerNamespaceListerExpansion
}

// druidAutoscalerNamespaceLister implements the DruidAutoscalerNamespaceLister
// interface.
type druidAutoscalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DruidAutoscalers in the indexer for a given namespace.
func (s druidAutoscalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DruidAutoscaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DruidAutoscaler))
	})
	return ret, err
}

// Get retrieves the DruidAutoscaler from the indexer for a given namespace and name.
func (s druidAutoscalerNamespaceLister) Get(name string) (*v1alpha1.DruidAutoscaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("druidautoscaler"), name)
	}
	return obj.(*v1alpha1.DruidAutoscaler), nil
}
