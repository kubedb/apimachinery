/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubedb.dev/apimachinery/apis/autoscaling/v1alpha1"
)

// CassandraAutoscalerLister helps list CassandraAutoscalers.
// All objects returned here must be treated as read-only.
type CassandraAutoscalerLister interface {
	// List lists all CassandraAutoscalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CassandraAutoscaler, err error)
	// CassandraAutoscalers returns an object that can list and get CassandraAutoscalers.
	CassandraAutoscalers(namespace string) CassandraAutoscalerNamespaceLister
	CassandraAutoscalerListerExpansion
}

// cassandraAutoscalerLister implements the CassandraAutoscalerLister interface.
type cassandraAutoscalerLister struct {
	indexer cache.Indexer
}

// NewCassandraAutoscalerLister returns a new CassandraAutoscalerLister.
func NewCassandraAutoscalerLister(indexer cache.Indexer) CassandraAutoscalerLister {
	return &cassandraAutoscalerLister{indexer: indexer}
}

// List lists all CassandraAutoscalers in the indexer.
func (s *cassandraAutoscalerLister) List(selector labels.Selector) (ret []*v1alpha1.CassandraAutoscaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CassandraAutoscaler))
	})
	return ret, err
}

// CassandraAutoscalers returns an object that can list and get CassandraAutoscalers.
func (s *cassandraAutoscalerLister) CassandraAutoscalers(namespace string) CassandraAutoscalerNamespaceLister {
	return cassandraAutoscalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CassandraAutoscalerNamespaceLister helps list and get CassandraAutoscalers.
// All objects returned here must be treated as read-only.
type CassandraAutoscalerNamespaceLister interface {
	// List lists all CassandraAutoscalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CassandraAutoscaler, err error)
	// Get retrieves the CassandraAutoscaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CassandraAutoscaler, error)
	CassandraAutoscalerNamespaceListerExpansion
}

// cassandraAutoscalerNamespaceLister implements the CassandraAutoscalerNamespaceLister
// interface.
type cassandraAutoscalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CassandraAutoscalers in the indexer for a given namespace.
func (s cassandraAutoscalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CassandraAutoscaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CassandraAutoscaler))
	})
	return ret, err
}

// Get retrieves the CassandraAutoscaler from the indexer for a given namespace and name.
func (s cassandraAutoscalerNamespaceLister) Get(name string) (*v1alpha1.CassandraAutoscaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cassandraautoscaler"), name)
	}
	return obj.(*v1alpha1.CassandraAutoscaler), nil
}
