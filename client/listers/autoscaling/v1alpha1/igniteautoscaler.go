/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubedb.dev/apimachinery/apis/autoscaling/v1alpha1"
)

// IgniteAutoscalerLister helps list IgniteAutoscalers.
// All objects returned here must be treated as read-only.
type IgniteAutoscalerLister interface {
	// List lists all IgniteAutoscalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IgniteAutoscaler, err error)
	// IgniteAutoscalers returns an object that can list and get IgniteAutoscalers.
	IgniteAutoscalers(namespace string) IgniteAutoscalerNamespaceLister
	IgniteAutoscalerListerExpansion
}

// igniteAutoscalerLister implements the IgniteAutoscalerLister interface.
type igniteAutoscalerLister struct {
	indexer cache.Indexer
}

// NewIgniteAutoscalerLister returns a new IgniteAutoscalerLister.
func NewIgniteAutoscalerLister(indexer cache.Indexer) IgniteAutoscalerLister {
	return &igniteAutoscalerLister{indexer: indexer}
}

// List lists all IgniteAutoscalers in the indexer.
func (s *igniteAutoscalerLister) List(selector labels.Selector) (ret []*v1alpha1.IgniteAutoscaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IgniteAutoscaler))
	})
	return ret, err
}

// IgniteAutoscalers returns an object that can list and get IgniteAutoscalers.
func (s *igniteAutoscalerLister) IgniteAutoscalers(namespace string) IgniteAutoscalerNamespaceLister {
	return igniteAutoscalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IgniteAutoscalerNamespaceLister helps list and get IgniteAutoscalers.
// All objects returned here must be treated as read-only.
type IgniteAutoscalerNamespaceLister interface {
	// List lists all IgniteAutoscalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IgniteAutoscaler, err error)
	// Get retrieves the IgniteAutoscaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IgniteAutoscaler, error)
	IgniteAutoscalerNamespaceListerExpansion
}

// igniteAutoscalerNamespaceLister implements the IgniteAutoscalerNamespaceLister
// interface.
type igniteAutoscalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IgniteAutoscalers in the indexer for a given namespace.
func (s igniteAutoscalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IgniteAutoscaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IgniteAutoscaler))
	})
	return ret, err
}

// Get retrieves the IgniteAutoscaler from the indexer for a given namespace and name.
func (s igniteAutoscalerNamespaceLister) Get(name string) (*v1alpha1.IgniteAutoscaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("igniteautoscaler"), name)
	}
	return obj.(*v1alpha1.IgniteAutoscaler), nil
}
