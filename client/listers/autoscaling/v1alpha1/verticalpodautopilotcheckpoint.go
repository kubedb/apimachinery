/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/autoscaling/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VerticalPodAutopilotCheckpointLister helps list VerticalPodAutopilotCheckpoints.
// All objects returned here must be treated as read-only.
type VerticalPodAutopilotCheckpointLister interface {
	// List lists all VerticalPodAutopilotCheckpoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VerticalPodAutopilotCheckpoint, err error)
	// VerticalPodAutopilotCheckpoints returns an object that can list and get VerticalPodAutopilotCheckpoints.
	VerticalPodAutopilotCheckpoints(namespace string) VerticalPodAutopilotCheckpointNamespaceLister
	VerticalPodAutopilotCheckpointListerExpansion
}

// verticalPodAutopilotCheckpointLister implements the VerticalPodAutopilotCheckpointLister interface.
type verticalPodAutopilotCheckpointLister struct {
	indexer cache.Indexer
}

// NewVerticalPodAutopilotCheckpointLister returns a new VerticalPodAutopilotCheckpointLister.
func NewVerticalPodAutopilotCheckpointLister(indexer cache.Indexer) VerticalPodAutopilotCheckpointLister {
	return &verticalPodAutopilotCheckpointLister{indexer: indexer}
}

// List lists all VerticalPodAutopilotCheckpoints in the indexer.
func (s *verticalPodAutopilotCheckpointLister) List(selector labels.Selector) (ret []*v1alpha1.VerticalPodAutopilotCheckpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VerticalPodAutopilotCheckpoint))
	})
	return ret, err
}

// VerticalPodAutopilotCheckpoints returns an object that can list and get VerticalPodAutopilotCheckpoints.
func (s *verticalPodAutopilotCheckpointLister) VerticalPodAutopilotCheckpoints(namespace string) VerticalPodAutopilotCheckpointNamespaceLister {
	return verticalPodAutopilotCheckpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VerticalPodAutopilotCheckpointNamespaceLister helps list and get VerticalPodAutopilotCheckpoints.
// All objects returned here must be treated as read-only.
type VerticalPodAutopilotCheckpointNamespaceLister interface {
	// List lists all VerticalPodAutopilotCheckpoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VerticalPodAutopilotCheckpoint, err error)
	// Get retrieves the VerticalPodAutopilotCheckpoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VerticalPodAutopilotCheckpoint, error)
	VerticalPodAutopilotCheckpointNamespaceListerExpansion
}

// verticalPodAutopilotCheckpointNamespaceLister implements the VerticalPodAutopilotCheckpointNamespaceLister
// interface.
type verticalPodAutopilotCheckpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VerticalPodAutopilotCheckpoints in the indexer for a given namespace.
func (s verticalPodAutopilotCheckpointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VerticalPodAutopilotCheckpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VerticalPodAutopilotCheckpoint))
	})
	return ret, err
}

// Get retrieves the VerticalPodAutopilotCheckpoint from the indexer for a given namespace and name.
func (s verticalPodAutopilotCheckpointNamespaceLister) Get(name string) (*v1alpha1.VerticalPodAutopilotCheckpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("verticalpodautopilotcheckpoint"), name)
	}
	return obj.(*v1alpha1.VerticalPodAutopilotCheckpoint), nil
}
