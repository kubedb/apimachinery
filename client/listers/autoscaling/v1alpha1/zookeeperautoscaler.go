/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/autoscaling/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ZooKeeperAutoscalerLister helps list ZooKeeperAutoscalers.
// All objects returned here must be treated as read-only.
type ZooKeeperAutoscalerLister interface {
	// List lists all ZooKeeperAutoscalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ZooKeeperAutoscaler, err error)
	// ZooKeeperAutoscalers returns an object that can list and get ZooKeeperAutoscalers.
	ZooKeeperAutoscalers(namespace string) ZooKeeperAutoscalerNamespaceLister
	ZooKeeperAutoscalerListerExpansion
}

// zooKeeperAutoscalerLister implements the ZooKeeperAutoscalerLister interface.
type zooKeeperAutoscalerLister struct {
	indexer cache.Indexer
}

// NewZooKeeperAutoscalerLister returns a new ZooKeeperAutoscalerLister.
func NewZooKeeperAutoscalerLister(indexer cache.Indexer) ZooKeeperAutoscalerLister {
	return &zooKeeperAutoscalerLister{indexer: indexer}
}

// List lists all ZooKeeperAutoscalers in the indexer.
func (s *zooKeeperAutoscalerLister) List(selector labels.Selector) (ret []*v1alpha1.ZooKeeperAutoscaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ZooKeeperAutoscaler))
	})
	return ret, err
}

// ZooKeeperAutoscalers returns an object that can list and get ZooKeeperAutoscalers.
func (s *zooKeeperAutoscalerLister) ZooKeeperAutoscalers(namespace string) ZooKeeperAutoscalerNamespaceLister {
	return zooKeeperAutoscalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ZooKeeperAutoscalerNamespaceLister helps list and get ZooKeeperAutoscalers.
// All objects returned here must be treated as read-only.
type ZooKeeperAutoscalerNamespaceLister interface {
	// List lists all ZooKeeperAutoscalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ZooKeeperAutoscaler, err error)
	// Get retrieves the ZooKeeperAutoscaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ZooKeeperAutoscaler, error)
	ZooKeeperAutoscalerNamespaceListerExpansion
}

// zooKeeperAutoscalerNamespaceLister implements the ZooKeeperAutoscalerNamespaceLister
// interface.
type zooKeeperAutoscalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ZooKeeperAutoscalers in the indexer for a given namespace.
func (s zooKeeperAutoscalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ZooKeeperAutoscaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ZooKeeperAutoscaler))
	})
	return ret, err
}

// Get retrieves the ZooKeeperAutoscaler from the indexer for a given namespace and name.
func (s zooKeeperAutoscalerNamespaceLister) Get(name string) (*v1alpha1.ZooKeeperAutoscaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("zookeeperautoscaler"), name)
	}
	return obj.(*v1alpha1.ZooKeeperAutoscaler), nil
}
