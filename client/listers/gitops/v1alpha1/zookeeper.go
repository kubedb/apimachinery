/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubedb.dev/apimachinery/apis/gitops/v1alpha1"
)

// ZooKeeperLister helps list ZooKeepers.
// All objects returned here must be treated as read-only.
type ZooKeeperLister interface {
	// List lists all ZooKeepers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ZooKeeper, err error)
	// ZooKeepers returns an object that can list and get ZooKeepers.
	ZooKeepers(namespace string) ZooKeeperNamespaceLister
	ZooKeeperListerExpansion
}

// zooKeeperLister implements the ZooKeeperLister interface.
type zooKeeperLister struct {
	indexer cache.Indexer
}

// NewZooKeeperLister returns a new ZooKeeperLister.
func NewZooKeeperLister(indexer cache.Indexer) ZooKeeperLister {
	return &zooKeeperLister{indexer: indexer}
}

// List lists all ZooKeepers in the indexer.
func (s *zooKeeperLister) List(selector labels.Selector) (ret []*v1alpha1.ZooKeeper, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ZooKeeper))
	})
	return ret, err
}

// ZooKeepers returns an object that can list and get ZooKeepers.
func (s *zooKeeperLister) ZooKeepers(namespace string) ZooKeeperNamespaceLister {
	return zooKeeperNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ZooKeeperNamespaceLister helps list and get ZooKeepers.
// All objects returned here must be treated as read-only.
type ZooKeeperNamespaceLister interface {
	// List lists all ZooKeepers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ZooKeeper, err error)
	// Get retrieves the ZooKeeper from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ZooKeeper, error)
	ZooKeeperNamespaceListerExpansion
}

// zooKeeperNamespaceLister implements the ZooKeeperNamespaceLister
// interface.
type zooKeeperNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ZooKeepers in the indexer for a given namespace.
func (s zooKeeperNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ZooKeeper, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ZooKeeper))
	})
	return ret, err
}

// Get retrieves the ZooKeeper from the indexer for a given namespace and name.
func (s zooKeeperNamespaceLister) Get(name string) (*v1alpha1.ZooKeeper, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("zookeeper"), name)
	}
	return obj.(*v1alpha1.ZooKeeper), nil
}
