/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubedb.dev/apimachinery/apis/gitops/v1alpha1"
)

// MSSQLServerLister helps list MSSQLServers.
// All objects returned here must be treated as read-only.
type MSSQLServerLister interface {
	// List lists all MSSQLServers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MSSQLServer, err error)
	// MSSQLServers returns an object that can list and get MSSQLServers.
	MSSQLServers(namespace string) MSSQLServerNamespaceLister
	MSSQLServerListerExpansion
}

// mSSQLServerLister implements the MSSQLServerLister interface.
type mSSQLServerLister struct {
	indexer cache.Indexer
}

// NewMSSQLServerLister returns a new MSSQLServerLister.
func NewMSSQLServerLister(indexer cache.Indexer) MSSQLServerLister {
	return &mSSQLServerLister{indexer: indexer}
}

// List lists all MSSQLServers in the indexer.
func (s *mSSQLServerLister) List(selector labels.Selector) (ret []*v1alpha1.MSSQLServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MSSQLServer))
	})
	return ret, err
}

// MSSQLServers returns an object that can list and get MSSQLServers.
func (s *mSSQLServerLister) MSSQLServers(namespace string) MSSQLServerNamespaceLister {
	return mSSQLServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MSSQLServerNamespaceLister helps list and get MSSQLServers.
// All objects returned here must be treated as read-only.
type MSSQLServerNamespaceLister interface {
	// List lists all MSSQLServers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MSSQLServer, err error)
	// Get retrieves the MSSQLServer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MSSQLServer, error)
	MSSQLServerNamespaceListerExpansion
}

// mSSQLServerNamespaceLister implements the MSSQLServerNamespaceLister
// interface.
type mSSQLServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MSSQLServers in the indexer for a given namespace.
func (s mSSQLServerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MSSQLServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MSSQLServer))
	})
	return ret, err
}

// Get retrieves the MSSQLServer from the indexer for a given namespace and name.
func (s mSSQLServerNamespaceLister) Get(name string) (*v1alpha1.MSSQLServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mssqlserver"), name)
	}
	return obj.(*v1alpha1.MSSQLServer), nil
}
