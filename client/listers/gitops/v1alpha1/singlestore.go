/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/gitops/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SinglestoreLister helps list Singlestores.
// All objects returned here must be treated as read-only.
type SinglestoreLister interface {
	// List lists all Singlestores in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Singlestore, err error)
	// Singlestores returns an object that can list and get Singlestores.
	Singlestores(namespace string) SinglestoreNamespaceLister
	SinglestoreListerExpansion
}

// singlestoreLister implements the SinglestoreLister interface.
type singlestoreLister struct {
	indexer cache.Indexer
}

// NewSinglestoreLister returns a new SinglestoreLister.
func NewSinglestoreLister(indexer cache.Indexer) SinglestoreLister {
	return &singlestoreLister{indexer: indexer}
}

// List lists all Singlestores in the indexer.
func (s *singlestoreLister) List(selector labels.Selector) (ret []*v1alpha1.Singlestore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Singlestore))
	})
	return ret, err
}

// Singlestores returns an object that can list and get Singlestores.
func (s *singlestoreLister) Singlestores(namespace string) SinglestoreNamespaceLister {
	return singlestoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SinglestoreNamespaceLister helps list and get Singlestores.
// All objects returned here must be treated as read-only.
type SinglestoreNamespaceLister interface {
	// List lists all Singlestores in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Singlestore, err error)
	// Get retrieves the Singlestore from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Singlestore, error)
	SinglestoreNamespaceListerExpansion
}

// singlestoreNamespaceLister implements the SinglestoreNamespaceLister
// interface.
type singlestoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Singlestores in the indexer for a given namespace.
func (s singlestoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Singlestore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Singlestore))
	})
	return ret, err
}

// Get retrieves the Singlestore from the indexer for a given namespace and name.
func (s singlestoreNamespaceLister) Get(name string) (*v1alpha1.Singlestore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("singlestore"), name)
	}
	return obj.(*v1alpha1.Singlestore), nil
}
