/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/gitops/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RabbitMQLister helps list RabbitMQs.
// All objects returned here must be treated as read-only.
type RabbitMQLister interface {
	// List lists all RabbitMQs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RabbitMQ, err error)
	// RabbitMQs returns an object that can list and get RabbitMQs.
	RabbitMQs(namespace string) RabbitMQNamespaceLister
	RabbitMQListerExpansion
}

// rabbitMQLister implements the RabbitMQLister interface.
type rabbitMQLister struct {
	indexer cache.Indexer
}

// NewRabbitMQLister returns a new RabbitMQLister.
func NewRabbitMQLister(indexer cache.Indexer) RabbitMQLister {
	return &rabbitMQLister{indexer: indexer}
}

// List lists all RabbitMQs in the indexer.
func (s *rabbitMQLister) List(selector labels.Selector) (ret []*v1alpha1.RabbitMQ, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RabbitMQ))
	})
	return ret, err
}

// RabbitMQs returns an object that can list and get RabbitMQs.
func (s *rabbitMQLister) RabbitMQs(namespace string) RabbitMQNamespaceLister {
	return rabbitMQNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RabbitMQNamespaceLister helps list and get RabbitMQs.
// All objects returned here must be treated as read-only.
type RabbitMQNamespaceLister interface {
	// List lists all RabbitMQs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RabbitMQ, err error)
	// Get retrieves the RabbitMQ from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RabbitMQ, error)
	RabbitMQNamespaceListerExpansion
}

// rabbitMQNamespaceLister implements the RabbitMQNamespaceLister
// interface.
type rabbitMQNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RabbitMQs in the indexer for a given namespace.
func (s rabbitMQNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RabbitMQ, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RabbitMQ))
	})
	return ret, err
}

// Get retrieves the RabbitMQ from the indexer for a given namespace and name.
func (s rabbitMQNamespaceLister) Get(name string) (*v1alpha1.RabbitMQ, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rabbitmq"), name)
	}
	return obj.(*v1alpha1.RabbitMQ), nil
}
