/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubedb.dev/apimachinery/apis/archiver/v1alpha1"
)

// MySQLArchiverLister helps list MySQLArchivers.
// All objects returned here must be treated as read-only.
type MySQLArchiverLister interface {
	// List lists all MySQLArchivers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MySQLArchiver, err error)
	// MySQLArchivers returns an object that can list and get MySQLArchivers.
	MySQLArchivers(namespace string) MySQLArchiverNamespaceLister
	MySQLArchiverListerExpansion
}

// mySQLArchiverLister implements the MySQLArchiverLister interface.
type mySQLArchiverLister struct {
	indexer cache.Indexer
}

// NewMySQLArchiverLister returns a new MySQLArchiverLister.
func NewMySQLArchiverLister(indexer cache.Indexer) MySQLArchiverLister {
	return &mySQLArchiverLister{indexer: indexer}
}

// List lists all MySQLArchivers in the indexer.
func (s *mySQLArchiverLister) List(selector labels.Selector) (ret []*v1alpha1.MySQLArchiver, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MySQLArchiver))
	})
	return ret, err
}

// MySQLArchivers returns an object that can list and get MySQLArchivers.
func (s *mySQLArchiverLister) MySQLArchivers(namespace string) MySQLArchiverNamespaceLister {
	return mySQLArchiverNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MySQLArchiverNamespaceLister helps list and get MySQLArchivers.
// All objects returned here must be treated as read-only.
type MySQLArchiverNamespaceLister interface {
	// List lists all MySQLArchivers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MySQLArchiver, err error)
	// Get retrieves the MySQLArchiver from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MySQLArchiver, error)
	MySQLArchiverNamespaceListerExpansion
}

// mySQLArchiverNamespaceLister implements the MySQLArchiverNamespaceLister
// interface.
type mySQLArchiverNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MySQLArchivers in the indexer for a given namespace.
func (s mySQLArchiverNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MySQLArchiver, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MySQLArchiver))
	})
	return ret, err
}

// Get retrieves the MySQLArchiver from the indexer for a given namespace and name.
func (s mySQLArchiverNamespaceLister) Get(name string) (*v1alpha1.MySQLArchiver, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mysqlarchiver"), name)
	}
	return obj.(*v1alpha1.MySQLArchiver), nil
}
