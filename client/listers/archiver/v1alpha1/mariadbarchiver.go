/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubedb.dev/apimachinery/apis/archiver/v1alpha1"
)

// MariaDBArchiverLister helps list MariaDBArchivers.
// All objects returned here must be treated as read-only.
type MariaDBArchiverLister interface {
	// List lists all MariaDBArchivers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MariaDBArchiver, err error)
	// MariaDBArchivers returns an object that can list and get MariaDBArchivers.
	MariaDBArchivers(namespace string) MariaDBArchiverNamespaceLister
	MariaDBArchiverListerExpansion
}

// mariaDBArchiverLister implements the MariaDBArchiverLister interface.
type mariaDBArchiverLister struct {
	indexer cache.Indexer
}

// NewMariaDBArchiverLister returns a new MariaDBArchiverLister.
func NewMariaDBArchiverLister(indexer cache.Indexer) MariaDBArchiverLister {
	return &mariaDBArchiverLister{indexer: indexer}
}

// List lists all MariaDBArchivers in the indexer.
func (s *mariaDBArchiverLister) List(selector labels.Selector) (ret []*v1alpha1.MariaDBArchiver, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MariaDBArchiver))
	})
	return ret, err
}

// MariaDBArchivers returns an object that can list and get MariaDBArchivers.
func (s *mariaDBArchiverLister) MariaDBArchivers(namespace string) MariaDBArchiverNamespaceLister {
	return mariaDBArchiverNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MariaDBArchiverNamespaceLister helps list and get MariaDBArchivers.
// All objects returned here must be treated as read-only.
type MariaDBArchiverNamespaceLister interface {
	// List lists all MariaDBArchivers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MariaDBArchiver, err error)
	// Get retrieves the MariaDBArchiver from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MariaDBArchiver, error)
	MariaDBArchiverNamespaceListerExpansion
}

// mariaDBArchiverNamespaceLister implements the MariaDBArchiverNamespaceLister
// interface.
type mariaDBArchiverNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MariaDBArchivers in the indexer for a given namespace.
func (s mariaDBArchiverNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MariaDBArchiver, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MariaDBArchiver))
	})
	return ret, err
}

// Get retrieves the MariaDBArchiver from the indexer for a given namespace and name.
func (s mariaDBArchiverNamespaceLister) Get(name string) (*v1alpha1.MariaDBArchiver, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mariadbarchiver"), name)
	}
	return obj.(*v1alpha1.MariaDBArchiver), nil
}
