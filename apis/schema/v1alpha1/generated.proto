/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package kubedb.dev.apimachinery.apis.schema.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "kmodules.xyz/client-go/api/v1/generated.proto";
import "sigs.k8s.io/controller-runtime/pkg/scheme/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message Subject {
  // Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount".
  // If the Authorizer does not recognized the kind value, the Authorizer should report an error.
  optional string kind = 1;

  // APIGroup holds the API group of the referenced subject.
  // Defaults to "" for ServiceAccount subjects.
  // Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
  // +optional
  optional string apiGroup = 2;

  // Name of the object being referenced.
  optional string name = 3;

  // Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty
  // the Authorizer should report an error.
  // +optional
  optional string namespace = 4;
}

// DatabaseStatus defines the observed state of schema api types
message DatabaseStatus {
  // Specifies the current phase of the database
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the database, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;

  // Database authentication secret
  // +optional
  optional k8s.io.api.core.v1.LocalObjectReference authSecret = 4;
}

message InitSpec {
  // Initialized indicates that this database has been initialized.
  // This will be set by the operator to ensure
  // that database is not mistakenly reset when recovered using disaster recovery tools.
  optional bool initialized = 1;

  optional ScriptSourceSpec script = 2;

  optional SnapshotSourceSpec snapshot = 3;
}

// MariaDBDatabase is the Schema for the mariadbdatabases API
message MariaDBDatabase {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MariaDBDatabaseSpec spec = 2;

  optional DatabaseStatus status = 3;
}

message MariaDBDatabaseConfiguration {
}

// MariaDBDatabaseList contains a list of MariaDBDatabase
message MariaDBDatabaseList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated MariaDBDatabase items = 2;
}

// MariaDBDatabaseSpec defines the desired state of MariaDBDatabase
message MariaDBDatabaseSpec {
  // DatabaseRef refers to a KubeDB managed database instance
  optional kmodules.xyz.client_go.api.v1.ObjectReference databaseRef = 1;

  // VaultRef refers to a KubeVault managed vault server
  optional kmodules.xyz.client_go.api.v1.ObjectReference vaultRef = 2;

  // DatabaseConfig defines various configuration options for a database
  optional MariaDBDatabaseConfiguration databaseConfig = 3;

  optional VaultSecretEngineRole accessPolicy = 4;

  // Init contains info about the init script or snapshot info
  // +optional
  optional InitSpec init = 5;

  // DeletionPolicy controls the delete operation for database
  // +optional
  // +kubebuilder:default:="Delete"
  optional string deletionPolicy = 6;
}

// MongoDBDatabase is the Schema for the mongodbdatabases API
message MongoDBDatabase {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MongoDBDatabaseSpec spec = 2;

  optional DatabaseStatus status = 3;
}

message MongoDBDatabaseConfiguration {
  optional string name = 1;
}

// MongoDBDatabaseList contains a list of MongoDBDatabase
message MongoDBDatabaseList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated MongoDBDatabase items = 2;
}

// MongoDBDatabaseSpec defines the desired state of MongoDBDatabase
message MongoDBDatabaseSpec {
  // DatabaseRef refers to a KubeDB managed database instance
  optional kmodules.xyz.client_go.api.v1.ObjectReference databaseRef = 1;

  // VaultRef refers to a KubeVault managed vault server
  optional kmodules.xyz.client_go.api.v1.ObjectReference vaultRef = 2;

  // DatabaseConfig defines various configuration options for a database
  optional MongoDBDatabaseConfiguration databaseConfig = 3;

  optional VaultSecretEngineRole accessPolicy = 4;

  // Init contains info about the init script or snapshot info
  // +optional
  optional InitSpec init = 5;

  // DeletionPolicy controls the delete operation for database
  // +optional
  // +kubebuilder:default:="Delete"
  optional string deletionPolicy = 6;
}

// MySQLDatabase is the Schema for the mysqldatabases API
message MySQLDatabase {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MySQLDatabaseSpec spec = 2;

  optional DatabaseStatus status = 3;
}

message MySQLDatabaseConfiguration {
  // Name is target database name
  optional string name = 1;

  // CharacterSet is the target database character set
  // +optional
  optional string characterSet = 2;

  // Collation is the target database collation
  // +optional
  optional string collation = 3;

  // Encryption is the target databae encryption mode
  // +optional
  optional string encryption = 4;

  // ReadOnly is the target database read only mode
  // +optional
  optional int32 readOnly = 5;
}

// MySQLDatabaseList contains a list of MySQLDatabase
message MySQLDatabaseList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated MySQLDatabase items = 2;
}

// MySQLDatabaseSpec defines the desired state of MySQLDatabase
message MySQLDatabaseSpec {
  // DatabaseRef refers to a KubeDB managed database instance
  optional kmodules.xyz.client_go.api.v1.ObjectReference databaseRef = 1;

  // VaultRef refers to a KubeVault managed vault server
  optional kmodules.xyz.client_go.api.v1.ObjectReference vaultRef = 2;

  // DatabaseConfig defines various configuration options for a database
  optional MySQLDatabaseConfiguration databaseConfig = 3;

  optional VaultSecretEngineRole accessPolicy = 4;

  // Init contains info about the init script or snapshot info
  // +optional
  optional InitSpec init = 5;

  // DeletionPolicy controls the delete operation for database
  // +optional
  // +kubebuilder:default:="Delete"
  optional string deletionPolicy = 6;
}

message Param {
  optional string configParameter = 1;

  optional string value = 2;
}

// PostgresDatabase is the Schema for the postgresdatabases API
message PostgresDatabase {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PostgresDatabaseSpec spec = 2;

  optional DatabaseStatus status = 3;
}

message PostgresDatabaseConfiguration {
  optional string dBName = 1;

  optional string tablespace = 2;

  repeated Param params = 3;
}

// PostgresDatabaseList contains a list of PostgresDatabase
message PostgresDatabaseList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated PostgresDatabase items = 2;
}

// PostgresDatabaseSpec defines the desired state of PostgresDatabase
message PostgresDatabaseSpec {
  // DatabaseRef refers to a KubeDB managed database instance
  optional kmodules.xyz.client_go.api.v1.ObjectReference databaseRef = 1;

  // VaultRef refers to a KubeVault managed vault server
  optional kmodules.xyz.client_go.api.v1.ObjectReference vaultRef = 2;

  // DatabaseConfig defines various configuration options for a database
  optional PostgresDatabaseConfiguration databaseConfig = 3;

  optional VaultSecretEngineRole accessPolicy = 4;

  // Init contains info about the init script or snapshot info
  // +optional
  optional InitSpec init = 5;

  // DeletionPolicy controls the delete operation for database
  // +optional
  // +kubebuilder:default:="Delete"
  optional string deletionPolicy = 6;
}

// RedisDatabase is the Schema for the redisdatabases API
message RedisDatabase {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RedisDatabaseSpec spec = 2;

  optional DatabaseStatus status = 3;
}

message RedisDatabaseConfiguration {
}

// RedisDatabaseList contains a list of RedisDatabase
message RedisDatabaseList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated RedisDatabase items = 2;
}

// RedisDatabaseSpec defines the desired state of RedisDatabase
message RedisDatabaseSpec {
  // DatabaseRef refers to a KubeDB managed database instance
  optional kmodules.xyz.client_go.api.v1.ObjectReference databaseRef = 1;

  // VaultRef refers to a KubeVault managed vault server
  optional kmodules.xyz.client_go.api.v1.ObjectReference vaultRef = 2;

  // DatabaseConfig defines various configuration options for a database
  optional RedisDatabaseConfiguration databaseConfig = 3;

  optional VaultSecretEngineRole accessPolicy = 4;

  // Init contains info about the init script or snapshot info
  // +optional
  optional InitSpec init = 5;

  // DeletionPolicy controls the delete operation for database
  // +optional
  // +kubebuilder:default:="Delete"
  optional string deletionPolicy = 6;
}

message ScriptSourceSpec {
  optional string scriptPath = 1;

  optional k8s.io.api.core.v1.VolumeSource volumeSource = 2;

  // This will take some database related config from the user
  optional k8s.io.api.core.v1.PodTemplateSpec podTemplate = 3;
}

message SnapshotSourceSpec {
  optional kmodules.xyz.client_go.api.v1.TypedObjectReference repository = 1;

  // +kubebuilder:default:="latest"
  optional string snapshotID = 2;
}

message VaultSecretEngineRole {
  repeated Subject subjects = 1;

  // +optional
  optional string defaultTTL = 2;

  // +optional
  optional string maxTTL = 3;
}

