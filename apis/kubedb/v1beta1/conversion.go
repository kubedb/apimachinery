/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1beta1

import (
	"kubedb.dev/apimachinery/apis/kubedb/v1alpha2"

	"k8s.io/apimachinery/pkg/conversion"
	v1 "kmodules.xyz/offshoot-api/api/v1"
	ofstconv "kmodules.xyz/offshoot-api/api/v1/conversion"
	v2 "kmodules.xyz/offshoot-api/api/v2"
	rtconv "sigs.k8s.io/controller-runtime/pkg/conversion"
)

// Convert_v1_PodTemplateSpec_To_v2_PodTemplateSpec is an autogenerated conversion function.
func Convert_v1_PodTemplateSpec_To_v2_PodTemplateSpec(in *v1.PodTemplateSpec, out *v2.PodTemplateSpec, s conversion.Scope) error {
	return ofstconv.Convert_v1_PodTemplateSpec_To_v2_PodTemplateSpec(in, out, s)
}

// Convert_v2_PodTemplateSpec_To_v1_PodTemplateSpec is an autogenerated conversion function.
func Convert_v2_PodTemplateSpec_To_v1_PodTemplateSpec(in *v2.PodTemplateSpec, out *v1.PodTemplateSpec, s conversion.Scope) error {
	return ofstconv.Convert_v2_PodTemplateSpec_To_v1_PodTemplateSpec(in, out, s)
}

func (src *Elasticsearch) ConvertTo(dstRaw rtconv.Hub) error {
	return Convert_v1beta1_Elasticsearch_To_v1alpha2_Elasticsearch(src, dstRaw.(*v1alpha2.Elasticsearch), nil)
}

func (dst *Elasticsearch) ConvertFrom(srcRaw rtconv.Hub) error {
	return Convert_v1alpha2_Elasticsearch_To_v1beta1_Elasticsearch(srcRaw.(*v1alpha2.Elasticsearch), dst, nil)
}

func (src *MariaDB) ConvertTo(dstRaw rtconv.Hub) error {
	return Convert_v1beta1_MariaDB_To_v1alpha2_MariaDB(src, dstRaw.(*v1alpha2.MariaDB), nil)
}

func (dst *MariaDB) ConvertFrom(srcRaw rtconv.Hub) error {
	return Convert_v1alpha2_MariaDB_To_v1beta1_MariaDB(srcRaw.(*v1alpha2.MariaDB), dst, nil)
}

func (src *MongoDB) ConvertTo(dstRaw rtconv.Hub) error {
	return Convert_v1beta1_MongoDB_To_v1alpha2_MongoDB(src, dstRaw.(*v1alpha2.MongoDB), nil)
}

func (dst *MongoDB) ConvertFrom(srcRaw rtconv.Hub) error {
	return Convert_v1alpha2_MongoDB_To_v1beta1_MongoDB(srcRaw.(*v1alpha2.MongoDB), dst, nil)
}

func (src *MySQL) ConvertTo(dstRaw rtconv.Hub) error {
	return Convert_v1beta1_MySQL_To_v1alpha2_MySQL(src, dstRaw.(*v1alpha2.MySQL), nil)
}

func (dst *MySQL) ConvertFrom(srcRaw rtconv.Hub) error {
	return Convert_v1alpha2_MySQL_To_v1beta1_MySQL(srcRaw.(*v1alpha2.MySQL), dst, nil)
}

func (src *PerconaXtraDB) ConvertTo(dstRaw rtconv.Hub) error {
	return Convert_v1beta1_PerconaXtraDB_To_v1alpha2_PerconaXtraDB(src, dstRaw.(*v1alpha2.PerconaXtraDB), nil)
}

func (dst *PerconaXtraDB) ConvertFrom(srcRaw rtconv.Hub) error {
	return Convert_v1alpha2_PerconaXtraDB_To_v1beta1_PerconaXtraDB(srcRaw.(*v1alpha2.PerconaXtraDB), dst, nil)
}

func (src *PgBouncer) ConvertTo(dstRaw rtconv.Hub) error {
	return Convert_v1beta1_PgBouncer_To_v1alpha2_PgBouncer(src, dstRaw.(*v1alpha2.PgBouncer), nil)
}

func (dst *PgBouncer) ConvertFrom(srcRaw rtconv.Hub) error {
	return Convert_v1alpha2_PgBouncer_To_v1beta1_PgBouncer(srcRaw.(*v1alpha2.PgBouncer), dst, nil)
}

func (src *Postgres) ConvertTo(dstRaw rtconv.Hub) error {
	return Convert_v1beta1_Postgres_To_v1alpha2_Postgres(src, dstRaw.(*v1alpha2.Postgres), nil)
}

func (dst *Postgres) ConvertFrom(srcRaw rtconv.Hub) error {
	return Convert_v1alpha2_Postgres_To_v1beta1_Postgres(srcRaw.(*v1alpha2.Postgres), dst, nil)
}

func (src *ProxySQL) ConvertTo(dstRaw rtconv.Hub) error {
	return Convert_v1beta1_ProxySQL_To_v1alpha2_ProxySQL(src, dstRaw.(*v1alpha2.ProxySQL), nil)
}

func (dst *ProxySQL) ConvertFrom(srcRaw rtconv.Hub) error {
	return Convert_v1alpha2_ProxySQL_To_v1beta1_ProxySQL(srcRaw.(*v1alpha2.ProxySQL), dst, nil)
}

func (src *RedisSentinel) ConvertTo(dstRaw rtconv.Hub) error {
	return Convert_v1beta1_RedisSentinel_To_v1alpha2_RedisSentinel(src, dstRaw.(*v1alpha2.RedisSentinel), nil)
}

func (dst *RedisSentinel) ConvertFrom(srcRaw rtconv.Hub) error {
	return Convert_v1alpha2_RedisSentinel_To_v1beta1_RedisSentinel(srcRaw.(*v1alpha2.RedisSentinel), dst, nil)
}

func (src *Redis) ConvertTo(dstRaw rtconv.Hub) error {
	return Convert_v1beta1_Redis_To_v1alpha2_Redis(src, dstRaw.(*v1alpha2.Redis), nil)
}

func (dst *Redis) ConvertFrom(srcRaw rtconv.Hub) error {
	return Convert_v1alpha2_Redis_To_v1beta1_Redis(srcRaw.(*v1alpha2.Redis), dst, nil)
}
