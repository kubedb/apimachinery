/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package kubedb.dev.apimachinery.apis.autoscaling.v1alpha1;

import "k8s.io/api/autoscaling/v2beta2/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "kmodules.xyz/client-go/api/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message ComputeAutoscalerSpec {
  // Whether compute autoscaler is enabled. The default is Off".
  optional string trigger = 9;

  // Specifies the minimal amount of resources that will be recommended.
  // The default is no minimum.
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> minAllowed = 2;

  // Specifies the maximum amount of resources that will be recommended.
  // The default is no maximum.
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> maxAllowed = 3;

  // Specifies the type of recommendations that will be computed
  // (and possibly applied) by VPA.
  // If not specified, the default of [ResourceCPU, ResourceMemory] will be used.
  // +optional
  // +patchStrategy=merge
  repeated string controlledResources = 5;

  // Specifies which resource values should be controlled.
  // The default is "RequestsAndLimits".
  // +optional
  optional string containerControlledValues = 6;

  // Specifies the minimum resource difference in percentage
  // The default is 10%.
  // +optional
  optional int32 resourceDiffPercentage = 7;

  // Specifies the minimum pod life time
  // The default is 12h.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration podLifeTimeThreshold = 10;

  // Specifies the percentage of the Memory that will be passed as inMemorySizeGB
  // The default is 70%.
  // +optional
  optional int32 inMemoryScalingThreshold = 11;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=elasticsearchautoscalers,singular=elasticsearchautoscaler,shortName=esscaler,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
message ElasticsearchAutoscaler {
  // metadata is the standard object metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec is the specification for the behaviour of the autoscaler.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  // +optional
  optional ElasticsearchAutoscalerSpec spec = 2;

  // status is the current information about the autoscaler.
  // +optional
  optional ElasticsearchAutoscalerStatus status = 3;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// ElasticsearchAutoscalerList is a list of ElasticsearchAutoscaler objects.
message ElasticsearchAutoscalerList {
  // metadata is the standard list metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of elasticsearch database autoscaler objects.
  repeated ElasticsearchAutoscaler items = 2;
}

// ElasticsearchAutoscalerSpec is the specification of the behavior of the autoscaler.
message ElasticsearchAutoscalerSpec {
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  optional ElasticsearchComputeAutoscalerSpec compute = 2;

  optional ElasticsearchStorageAutoscalerSpec storage = 3;
}

// ElasticsearchAutoscalerStatus describes the runtime state of the autoscaler.
message ElasticsearchAutoscalerStatus {
  // observedGeneration is the most recent generation observed by this autoscaler.
  // +optional
  optional int64 observedGeneration = 1;

  // Conditions is the set of conditions required for this autoscaler to scale its target,
  // and indicates whether or not those conditions are met.
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 2;
}

message ElasticsearchComputeAutoscalerSpec {
  optional ComputeAutoscalerSpec node = 1;

  optional ElasticsearchComputeTopologyAutoscalerSpec topology = 2;

  optional bool disableScaleDown = 3;
}

message ElasticsearchComputeTopologyAutoscalerSpec {
  optional ComputeAutoscalerSpec master = 1;

  optional ComputeAutoscalerSpec data = 2;

  optional ComputeAutoscalerSpec ingest = 3;
}

message ElasticsearchStorageAutoscalerSpec {
  optional StorageAutoscalerSpec node = 1;

  optional ElasticsearchStorageTopologyAutoscalerSpec topology = 2;
}

message ElasticsearchStorageTopologyAutoscalerSpec {
  optional StorageAutoscalerSpec master = 1;

  optional StorageAutoscalerSpec data = 2;

  optional StorageAutoscalerSpec ingest = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=etcdautoscalers,singular=etcdautoscaler,shortName=etcdscaler,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
message EtcdAutoscaler {
  // metadata is the standard object metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec is the specification for the behaviour of the autoscaler.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  // +optional
  optional EtcdAutoscalerSpec spec = 2;

  // status is the current information about the autoscaler.
  // +optional
  optional EtcdAutoscalerStatus status = 3;
}

// EtcdAutoscalerBehavior configures the scaling behavior of the target
// in both Up and Down directions (scaleUp and scaleDown fields respectively).
message EtcdAutoscalerBehavior {
  // scaleUp is scaling policy for scaling Up.
  // If not set, the default value is the higher of:
  //   * increase no more than 4 pods per 60 seconds
  //   * double the number of pods per 60 seconds
  // No stabilization is used.
  // +optional
  optional EtcdScalingRules scaleUp = 1;

  // scaleDown is scaling policy for scaling Down.
  // If not set, the default value is to allow to scale down to minReplicas pods, with a
  // 300 second stabilization window (i.e., the highest recommendation for
  // the last 300sec is used).
  // +optional
  optional EtcdScalingRules scaleDown = 2;
}

// EtcdAutoscalerList is a list of horizontal pod autoscaler objects.
message EtcdAutoscalerList {
  // metadata is the standard list metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of horizontal pod autoscaler objects.
  repeated EtcdAutoscaler items = 2;
}

// EtcdAutoscalerSpec describes the desired functionality of the EtcdAutoscaler.
message EtcdAutoscalerSpec {
  // scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics
  // should be collected, as well as to actually change the replica count.
  optional k8s.io.api.core.v1.LocalObjectReference scaleTargetRef = 1;

  // minReplicas is the lower limit for the number of replicas to which the autoscaler
  // can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the
  // alpha feature gate HPAScaleToZero is enabled and at least one Object or External
  // metric is configured.  Scaling is active as long as at least one metric value is
  // available.
  // +optional
  optional int32 minReplicas = 2;

  // maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
  // It cannot be less that minReplicas.
  optional int32 maxReplicas = 3;

  // metrics contains the specifications for which to use to calculate the
  // desired replica count (the maximum replica count across all metrics will
  // be used).  The desired replica count is calculated multiplying the
  // ratio between the target value and the current value by the current
  // number of pods.  Ergo, metrics used must decrease as the pod count is
  // increased, and vice-versa.  See the individual metric source types for
  // more information about how each type of metric must respond.
  // If not set, the default metric will be set to 80% average CPU utilization.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricSpec metrics = 4;

  // behavior configures the scaling behavior of the target
  // in both Up and Down directions (scaleUp and scaleDown fields respectively).
  // If not set, the default EtcdScalingRules for scale up and scale down are used.
  // +optional
  optional EtcdAutoscalerBehavior behavior = 5;
}

// EtcdAutoscalerStatus describes the current status of a horizontal pod autoscaler.
message EtcdAutoscalerStatus {
  // observedGeneration is the most recent generation observed by this autoscaler.
  // +optional
  optional int64 observedGeneration = 1;

  // lastScaleTime is the last time the EtcdAutoscaler scaled the number of pods,
  // used by the autoscaler to control how often the number of pods is changed.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastScaleTime = 2;

  // currentReplicas is current number of replicas of pods managed by this autoscaler,
  // as last seen by the autoscaler.
  optional int32 currentReplicas = 3;

  // desiredReplicas is the desired number of replicas of pods managed by this autoscaler,
  // as last calculated by the autoscaler.
  optional int32 desiredReplicas = 4;

  // currentMetrics is the last read state of the metrics used by this autoscaler.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricStatus currentMetrics = 5;

  // conditions is the set of conditions required for this autoscaler to scale its target,
  // and indicates whether or not those conditions are met.
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 6;
}

// EtcdScalingPolicy is a single policy which must hold true for a specified past interval.
message EtcdScalingPolicy {
  // Type is used to specify the scaling policy.
  optional string type = 1;

  // Value contains the amount of change which is permitted by the policy.
  // It must be greater than zero
  optional int32 value = 2;

  // PeriodSeconds specifies the window of time for which the policy should hold true.
  // PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
  optional int32 periodSeconds = 3;
}

// EtcdScalingRules configures the scaling behavior for one direction.
// These Rules are applied after calculating DesiredReplicas from metrics for the HPA.
// They can limit the scaling velocity by specifying scaling policies.
// They can prevent flapping by specifying the stabilization window, so that the
// number of replicas is not set instantly, instead, the safest value from the stabilization
// window is chosen.
message EtcdScalingRules {
  // StabilizationWindowSeconds is the number of seconds for which past recommendations should be
  // considered while scaling up or scaling down.
  // StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
  // If not set, use the default values:
  // - For scale up: 0 (i.e. no stabilization is done).
  // - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
  // +optional
  optional int32 stabilizationWindowSeconds = 3;

  // selectPolicy is used to specify which policy should be used.
  // If not set, the default value MaxPolicySelect is used.
  // +optional
  optional string selectPolicy = 1;

  // policies is a list of potential scaling polices which can be used during scaling.
  // At least one policy must be specified, otherwise the EtcdScalingRules will be discarded as invalid
  // +optional
  repeated EtcdScalingPolicy policies = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mariadbautoscalers,singular=mariadbautoscaler,shortName=mdautoscaler,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
message MariaDBAutoscaler {
  // Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the behavior of the autoscaler.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
  optional MariaDBAutoscalerSpec spec = 2;

  // Current information about the autoscaler.
  // +optional
  optional MariaDBAutoscalerStatus status = 3;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// MariaDBAutoscalerList is a list of MariaDBAutoscaler objects.
message MariaDBAutoscalerList {
  // metadata is the standard list metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of mariadb database autoscaler objects.
  repeated MariaDBAutoscaler items = 2;
}

// MariaDBAutoscalerSpec is the specification of the behavior of the autoscaler.
message MariaDBAutoscalerSpec {
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  optional MariaDBComputeAutoscalerSpec compute = 2;

  optional MariaDBStorageAutoscalerSpec storage = 3;
}

// MariaDBAutoscalerStatus describes the runtime state of the autoscaler.
message MariaDBAutoscalerStatus {
  // observedGeneration is the most recent generation observed by this autoscaler.
  // +optional
  optional int64 observedGeneration = 1;

  // Conditions is the set of conditions required for this autoscaler to scale its target,
  // and indicates whether or not those conditions are met.
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 2;
}

message MariaDBComputeAutoscalerSpec {
  optional ComputeAutoscalerSpec mariadb = 1;

  optional bool disableScaleDown = 6;
}

message MariaDBStorageAutoscalerSpec {
  optional StorageAutoscalerSpec mariadb = 1;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=memcachedautoscalers,singular=memcachedautoscaler,shortName=mcscaler,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
message MemcachedAutoscaler {
  // metadata is the standard object metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec is the specification for the behaviour of the autoscaler.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  // +optional
  optional MemcachedAutoscalerSpec spec = 2;

  // status is the current information about the autoscaler.
  // +optional
  optional MemcachedAutoscalerStatus status = 3;
}

// MemcachedAutoscalerBehavior configures the scaling behavior of the target
// in both Up and Down directions (scaleUp and scaleDown fields respectively).
message MemcachedAutoscalerBehavior {
  // scaleUp is scaling policy for scaling Up.
  // If not set, the default value is the higher of:
  //   * increase no more than 4 pods per 60 seconds
  //   * double the number of pods per 60 seconds
  // No stabilization is used.
  // +optional
  optional MemcachedScalingRules scaleUp = 1;

  // scaleDown is scaling policy for scaling Down.
  // If not set, the default value is to allow to scale down to minReplicas pods, with a
  // 300 second stabilization window (i.e., the highest recommendation for
  // the last 300sec is used).
  // +optional
  optional MemcachedScalingRules scaleDown = 2;
}

// MemcachedAutoscalerList is a list of horizontal pod autoscaler objects.
message MemcachedAutoscalerList {
  // metadata is the standard list metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of horizontal pod autoscaler objects.
  repeated MemcachedAutoscaler items = 2;
}

// MemcachedAutoscalerSpec describes the desired functionality of the MemcachedAutoscaler.
message MemcachedAutoscalerSpec {
  // scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics
  // should be collected, as well as to actually change the replica count.
  optional k8s.io.api.core.v1.LocalObjectReference scaleTargetRef = 1;

  // minReplicas is the lower limit for the number of replicas to which the autoscaler
  // can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the
  // alpha feature gate HPAScaleToZero is enabled and at least one Object or External
  // metric is configured.  Scaling is active as long as at least one metric value is
  // available.
  // +optional
  optional int32 minReplicas = 2;

  // maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
  // It cannot be less that minReplicas.
  optional int32 maxReplicas = 3;

  // metrics contains the specifications for which to use to calculate the
  // desired replica count (the maximum replica count across all metrics will
  // be used).  The desired replica count is calculated multiplying the
  // ratio between the target value and the current value by the current
  // number of pods.  Ergo, metrics used must decrease as the pod count is
  // increased, and vice-versa.  See the individual metric source types for
  // more information about how each type of metric must respond.
  // If not set, the default metric will be set to 80% average CPU utilization.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricSpec metrics = 4;

  // behavior configures the scaling behavior of the target
  // in both Up and Down directions (scaleUp and scaleDown fields respectively).
  // If not set, the default MemcachedScalingRules for scale up and scale down are used.
  // +optional
  optional MemcachedAutoscalerBehavior behavior = 5;
}

// MemcachedAutoscalerStatus describes the current status of a horizontal pod autoscaler.
message MemcachedAutoscalerStatus {
  // observedGeneration is the most recent generation observed by this autoscaler.
  // +optional
  optional int64 observedGeneration = 1;

  // lastScaleTime is the last time the MemcachedAutoscaler scaled the number of pods,
  // used by the autoscaler to control how often the number of pods is changed.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastScaleTime = 2;

  // currentReplicas is current number of replicas of pods managed by this autoscaler,
  // as last seen by the autoscaler.
  optional int32 currentReplicas = 3;

  // desiredReplicas is the desired number of replicas of pods managed by this autoscaler,
  // as last calculated by the autoscaler.
  optional int32 desiredReplicas = 4;

  // currentMetrics is the last read state of the metrics used by this autoscaler.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricStatus currentMetrics = 5;

  // conditions is the set of conditions required for this autoscaler to scale its target,
  // and indicates whether or not those conditions are met.
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 6;
}

// MemcachedScalingPolicy is a single policy which must hold true for a specified past interval.
message MemcachedScalingPolicy {
  // Type is used to specify the scaling policy.
  optional string type = 1;

  // Value contains the amount of change which is permitted by the policy.
  // It must be greater than zero
  optional int32 value = 2;

  // PeriodSeconds specifies the window of time for which the policy should hold true.
  // PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
  optional int32 periodSeconds = 3;
}

// MemcachedScalingRules configures the scaling behavior for one direction.
// These Rules are applied after calculating DesiredReplicas from metrics for the HPA.
// They can limit the scaling velocity by specifying scaling policies.
// They can prevent flapping by specifying the stabilization window, so that the
// number of replicas is not set instantly, instead, the safest value from the stabilization
// window is chosen.
message MemcachedScalingRules {
  // StabilizationWindowSeconds is the number of seconds for which past recommendations should be
  // considered while scaling up or scaling down.
  // StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
  // If not set, use the default values:
  // - For scale up: 0 (i.e. no stabilization is done).
  // - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
  // +optional
  optional int32 stabilizationWindowSeconds = 3;

  // selectPolicy is used to specify which policy should be used.
  // If not set, the default value MaxPolicySelect is used.
  // +optional
  optional string selectPolicy = 1;

  // policies is a list of potential scaling polices which can be used during scaling.
  // At least one policy must be specified, otherwise the MemcachedScalingRules will be discarded as invalid
  // +optional
  repeated MemcachedScalingPolicy policies = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mongodbautoscalers,singular=mongodbautoscaler,shortName=mgautoscaler,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
message MongoDBAutoscaler {
  // Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the behavior of the autoscaler.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
  optional MongoDBAutoscalerSpec spec = 2;

  // Current information about the autoscaler.
  // +optional
  optional MongoDBAutoscalerStatus status = 3;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// MongoDBAutoscalerList is a list of MongoDBAutoscaler objects.
message MongoDBAutoscalerList {
  // metadata is the standard list metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of mongodb database autoscaler objects.
  repeated MongoDBAutoscaler items = 2;
}

// MongoDBAutoscalerSpec is the specification of the behavior of the autoscaler.
message MongoDBAutoscalerSpec {
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  optional MongoDBComputeAutoscalerSpec compute = 2;

  optional MongoDBStorageAutoscalerSpec storage = 3;
}

// MongoDBAutoscalerStatus describes the runtime state of the autoscaler.
message MongoDBAutoscalerStatus {
  // observedGeneration is the most recent generation observed by this autoscaler.
  // +optional
  optional int64 observedGeneration = 1;

  // Conditions is the set of conditions required for this autoscaler to scale its target,
  // and indicates whether or not those conditions are met.
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 2;
}

message MongoDBComputeAutoscalerSpec {
  optional ComputeAutoscalerSpec standalone = 1;

  optional ComputeAutoscalerSpec replicaSet = 2;

  optional ComputeAutoscalerSpec configServer = 3;

  optional ComputeAutoscalerSpec shard = 4;

  optional ComputeAutoscalerSpec mongos = 5;

  optional bool disableScaleDown = 6;
}

message MongoDBStorageAutoscalerSpec {
  optional StorageAutoscalerSpec standalone = 1;

  optional StorageAutoscalerSpec replicaSet = 2;

  optional StorageAutoscalerSpec configServer = 3;

  optional StorageAutoscalerSpec shard = 4;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mysqlautoscalers,singular=mysqlautoscaler,shortName=myscaler,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
message MySQLAutoscaler {
  // metadata is the standard object metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec is the specification for the behaviour of the autoscaler.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  // +optional
  optional MySQLAutoscalerSpec spec = 2;

  // status is the current information about the autoscaler.
  // +optional
  optional MySQLAutoscalerStatus status = 3;
}

// MySQLAutoscalerBehavior configures the scaling behavior of the target
// in both Up and Down directions (scaleUp and scaleDown fields respectively).
message MySQLAutoscalerBehavior {
  // scaleUp is scaling policy for scaling Up.
  // If not set, the default value is the higher of:
  //   * increase no more than 4 pods per 60 seconds
  //   * double the number of pods per 60 seconds
  // No stabilization is used.
  // +optional
  optional MySQLScalingRules scaleUp = 1;

  // scaleDown is scaling policy for scaling Down.
  // If not set, the default value is to allow to scale down to minReplicas pods, with a
  // 300 second stabilization window (i.e., the highest recommendation for
  // the last 300sec is used).
  // +optional
  optional MySQLScalingRules scaleDown = 2;
}

// MySQLAutoscalerList is a list of horizontal pod autoscaler objects.
message MySQLAutoscalerList {
  // metadata is the standard list metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of horizontal pod autoscaler objects.
  repeated MySQLAutoscaler items = 2;
}

// MySQLAutoscalerSpec describes the desired functionality of the MySQLAutoscaler.
message MySQLAutoscalerSpec {
  // scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics
  // should be collected, as well as to actually change the replica count.
  optional k8s.io.api.core.v1.LocalObjectReference scaleTargetRef = 1;

  // minReplicas is the lower limit for the number of replicas to which the autoscaler
  // can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the
  // alpha feature gate HPAScaleToZero is enabled and at least one Object or External
  // metric is configured.  Scaling is active as long as at least one metric value is
  // available.
  // +optional
  optional int32 minReplicas = 2;

  // maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
  // It cannot be less that minReplicas.
  optional int32 maxReplicas = 3;

  // metrics contains the specifications for which to use to calculate the
  // desired replica count (the maximum replica count across all metrics will
  // be used).  The desired replica count is calculated multiplying the
  // ratio between the target value and the current value by the current
  // number of pods.  Ergo, metrics used must decrease as the pod count is
  // increased, and vice-versa.  See the individual metric source types for
  // more information about how each type of metric must respond.
  // If not set, the default metric will be set to 80% average CPU utilization.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricSpec metrics = 4;

  // behavior configures the scaling behavior of the target
  // in both Up and Down directions (scaleUp and scaleDown fields respectively).
  // If not set, the default MySQLScalingRules for scale up and scale down are used.
  // +optional
  optional MySQLAutoscalerBehavior behavior = 5;
}

// MySQLAutoscalerStatus describes the current status of a horizontal pod autoscaler.
message MySQLAutoscalerStatus {
  // observedGeneration is the most recent generation observed by this autoscaler.
  // +optional
  optional int64 observedGeneration = 1;

  // lastScaleTime is the last time the MySQLAutoscaler scaled the number of pods,
  // used by the autoscaler to control how often the number of pods is changed.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastScaleTime = 2;

  // currentReplicas is current number of replicas of pods managed by this autoscaler,
  // as last seen by the autoscaler.
  optional int32 currentReplicas = 3;

  // desiredReplicas is the desired number of replicas of pods managed by this autoscaler,
  // as last calculated by the autoscaler.
  optional int32 desiredReplicas = 4;

  // currentMetrics is the last read state of the metrics used by this autoscaler.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricStatus currentMetrics = 5;

  // conditions is the set of conditions required for this autoscaler to scale its target,
  // and indicates whether or not those conditions are met.
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 6;
}

// MySQLScalingPolicy is a single policy which must hold true for a specified past interval.
message MySQLScalingPolicy {
  // Type is used to specify the scaling policy.
  optional string type = 1;

  // Value contains the amount of change which is permitted by the policy.
  // It must be greater than zero
  optional int32 value = 2;

  // PeriodSeconds specifies the window of time for which the policy should hold true.
  // PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
  optional int32 periodSeconds = 3;
}

// MySQLScalingRules configures the scaling behavior for one direction.
// These Rules are applied after calculating DesiredReplicas from metrics for the HPA.
// They can limit the scaling velocity by specifying scaling policies.
// They can prevent flapping by specifying the stabilization window, so that the
// number of replicas is not set instantly, instead, the safest value from the stabilization
// window is chosen.
message MySQLScalingRules {
  // StabilizationWindowSeconds is the number of seconds for which past recommendations should be
  // considered while scaling up or scaling down.
  // StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
  // If not set, use the default values:
  // - For scale up: 0 (i.e. no stabilization is done).
  // - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
  // +optional
  optional int32 stabilizationWindowSeconds = 3;

  // selectPolicy is used to specify which policy should be used.
  // If not set, the default value MaxPolicySelect is used.
  // +optional
  optional string selectPolicy = 1;

  // policies is a list of potential scaling polices which can be used during scaling.
  // At least one policy must be specified, otherwise the MySQLScalingRules will be discarded as invalid
  // +optional
  repeated MySQLScalingPolicy policies = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=perconaxtradbautoscalers,singular=perconaxtradbautoscaler,shortName=pxcscaler,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
message PerconaXtraDBAutoscaler {
  // metadata is the standard object metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec is the specification for the behaviour of the autoscaler.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  // +optional
  optional PerconaXtraDBAutoscalerSpec spec = 2;

  // status is the current information about the autoscaler.
  // +optional
  optional PerconaXtraDBAutoscalerStatus status = 3;
}

// PerconaXtraDBAutoscalerBehavior configures the scaling behavior of the target
// in both Up and Down directions (scaleUp and scaleDown fields respectively).
message PerconaXtraDBAutoscalerBehavior {
  // scaleUp is scaling policy for scaling Up.
  // If not set, the default value is the higher of:
  //   * increase no more than 4 pods per 60 seconds
  //   * double the number of pods per 60 seconds
  // No stabilization is used.
  // +optional
  optional PerconaXtraDBScalingRules scaleUp = 1;

  // scaleDown is scaling policy for scaling Down.
  // If not set, the default value is to allow to scale down to minReplicas pods, with a
  // 300 second stabilization window (i.e., the highest recommendation for
  // the last 300sec is used).
  // +optional
  optional PerconaXtraDBScalingRules scaleDown = 2;
}

// PerconaXtraDBAutoscalerList is a list of horizontal pod autoscaler objects.
message PerconaXtraDBAutoscalerList {
  // metadata is the standard list metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of horizontal pod autoscaler objects.
  repeated PerconaXtraDBAutoscaler items = 2;
}

// PerconaXtraDBAutoscalerSpec describes the desired functionality of the PerconaXtraDBAutoscaler.
message PerconaXtraDBAutoscalerSpec {
  // scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics
  // should be collected, as well as to actually change the replica count.
  optional k8s.io.api.core.v1.LocalObjectReference scaleTargetRef = 1;

  // minReplicas is the lower limit for the number of replicas to which the autoscaler
  // can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the
  // alpha feature gate HPAScaleToZero is enabled and at least one Object or External
  // metric is configured.  Scaling is active as long as at least one metric value is
  // available.
  // +optional
  optional int32 minReplicas = 2;

  // maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
  // It cannot be less that minReplicas.
  optional int32 maxReplicas = 3;

  // metrics contains the specifications for which to use to calculate the
  // desired replica count (the maximum replica count across all metrics will
  // be used).  The desired replica count is calculated multiplying the
  // ratio between the target value and the current value by the current
  // number of pods.  Ergo, metrics used must decrease as the pod count is
  // increased, and vice-versa.  See the individual metric source types for
  // more information about how each type of metric must respond.
  // If not set, the default metric will be set to 80% average CPU utilization.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricSpec metrics = 4;

  // behavior configures the scaling behavior of the target
  // in both Up and Down directions (scaleUp and scaleDown fields respectively).
  // If not set, the default PerconaXtraDBScalingRules for scale up and scale down are used.
  // +optional
  optional PerconaXtraDBAutoscalerBehavior behavior = 5;
}

// PerconaXtraDBAutoscalerStatus describes the current status of a horizontal pod autoscaler.
message PerconaXtraDBAutoscalerStatus {
  // observedGeneration is the most recent generation observed by this autoscaler.
  // +optional
  optional int64 observedGeneration = 1;

  // lastScaleTime is the last time the PerconaXtraDBAutoscaler scaled the number of pods,
  // used by the autoscaler to control how often the number of pods is changed.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastScaleTime = 2;

  // currentReplicas is current number of replicas of pods managed by this autoscaler,
  // as last seen by the autoscaler.
  optional int32 currentReplicas = 3;

  // desiredReplicas is the desired number of replicas of pods managed by this autoscaler,
  // as last calculated by the autoscaler.
  optional int32 desiredReplicas = 4;

  // currentMetrics is the last read state of the metrics used by this autoscaler.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricStatus currentMetrics = 5;

  // conditions is the set of conditions required for this autoscaler to scale its target,
  // and indicates whether or not those conditions are met.
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 6;
}

// PerconaXtraDBScalingPolicy is a single policy which must hold true for a specified past interval.
message PerconaXtraDBScalingPolicy {
  // Type is used to specify the scaling policy.
  optional string type = 1;

  // Value contains the amount of change which is permitted by the policy.
  // It must be greater than zero
  optional int32 value = 2;

  // PeriodSeconds specifies the window of time for which the policy should hold true.
  // PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
  optional int32 periodSeconds = 3;
}

// PerconaXtraDBScalingRules configures the scaling behavior for one direction.
// These Rules are applied after calculating DesiredReplicas from metrics for the HPA.
// They can limit the scaling velocity by specifying scaling policies.
// They can prevent flapping by specifying the stabilization window, so that the
// number of replicas is not set instantly, instead, the safest value from the stabilization
// window is chosen.
message PerconaXtraDBScalingRules {
  // StabilizationWindowSeconds is the number of seconds for which past recommendations should be
  // considered while scaling up or scaling down.
  // StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
  // If not set, use the default values:
  // - For scale up: 0 (i.e. no stabilization is done).
  // - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
  // +optional
  optional int32 stabilizationWindowSeconds = 3;

  // selectPolicy is used to specify which policy should be used.
  // If not set, the default value MaxPolicySelect is used.
  // +optional
  optional string selectPolicy = 1;

  // policies is a list of potential scaling polices which can be used during scaling.
  // At least one policy must be specified, otherwise the PerconaXtraDBScalingRules will be discarded as invalid
  // +optional
  repeated PerconaXtraDBScalingPolicy policies = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=pgbouncerautoscalers,singular=pgbouncerautoscaler,shortName=pbscaler,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
message PgBouncerAutoscaler {
  // metadata is the standard object metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec is the specification for the behaviour of the autoscaler.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  // +optional
  optional PgBouncerAutoscalerSpec spec = 2;

  // status is the current information about the autoscaler.
  // +optional
  optional PgBouncerAutoscalerStatus status = 3;
}

// PgBouncerAutoscalerBehavior configures the scaling behavior of the target
// in both Up and Down directions (scaleUp and scaleDown fields respectively).
message PgBouncerAutoscalerBehavior {
  // scaleUp is scaling policy for scaling Up.
  // If not set, the default value is the higher of:
  //   * increase no more than 4 pods per 60 seconds
  //   * double the number of pods per 60 seconds
  // No stabilization is used.
  // +optional
  optional PgBouncerScalingRules scaleUp = 1;

  // scaleDown is scaling policy for scaling Down.
  // If not set, the default value is to allow to scale down to minReplicas pods, with a
  // 300 second stabilization window (i.e., the highest recommendation for
  // the last 300sec is used).
  // +optional
  optional PgBouncerScalingRules scaleDown = 2;
}

// PgBouncerAutoscalerList is a list of horizontal pod autoscaler objects.
message PgBouncerAutoscalerList {
  // metadata is the standard list metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of horizontal pod autoscaler objects.
  repeated PgBouncerAutoscaler items = 2;
}

// PgBouncerAutoscalerSpec describes the desired functionality of the PgBouncerAutoscaler.
message PgBouncerAutoscalerSpec {
  // scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics
  // should be collected, as well as to actually change the replica count.
  optional k8s.io.api.core.v1.LocalObjectReference scaleTargetRef = 1;

  // minReplicas is the lower limit for the number of replicas to which the autoscaler
  // can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the
  // alpha feature gate HPAScaleToZero is enabled and at least one Object or External
  // metric is configured.  Scaling is active as long as at least one metric value is
  // available.
  // +optional
  optional int32 minReplicas = 2;

  // maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
  // It cannot be less that minReplicas.
  optional int32 maxReplicas = 3;

  // metrics contains the specifications for which to use to calculate the
  // desired replica count (the maximum replica count across all metrics will
  // be used).  The desired replica count is calculated multiplying the
  // ratio between the target value and the current value by the current
  // number of pods.  Ergo, metrics used must decrease as the pod count is
  // increased, and vice-versa.  See the individual metric source types for
  // more information about how each type of metric must respond.
  // If not set, the default metric will be set to 80% average CPU utilization.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricSpec metrics = 4;

  // behavior configures the scaling behavior of the target
  // in both Up and Down directions (scaleUp and scaleDown fields respectively).
  // If not set, the default PgBouncerScalingRules for scale up and scale down are used.
  // +optional
  optional PgBouncerAutoscalerBehavior behavior = 5;
}

// PgBouncerAutoscalerStatus describes the current status of a horizontal pod autoscaler.
message PgBouncerAutoscalerStatus {
  // observedGeneration is the most recent generation observed by this autoscaler.
  // +optional
  optional int64 observedGeneration = 1;

  // lastScaleTime is the last time the PgBouncerAutoscaler scaled the number of pods,
  // used by the autoscaler to control how often the number of pods is changed.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastScaleTime = 2;

  // currentReplicas is current number of replicas of pods managed by this autoscaler,
  // as last seen by the autoscaler.
  optional int32 currentReplicas = 3;

  // desiredReplicas is the desired number of replicas of pods managed by this autoscaler,
  // as last calculated by the autoscaler.
  optional int32 desiredReplicas = 4;

  // currentMetrics is the last read state of the metrics used by this autoscaler.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricStatus currentMetrics = 5;

  // conditions is the set of conditions required for this autoscaler to scale its target,
  // and indicates whether or not those conditions are met.
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 6;
}

// PgBouncerScalingPolicy is a single policy which must hold true for a specified past interval.
message PgBouncerScalingPolicy {
  // Type is used to specify the scaling policy.
  optional string type = 1;

  // Value contains the amount of change which is permitted by the policy.
  // It must be greater than zero
  optional int32 value = 2;

  // PeriodSeconds specifies the window of time for which the policy should hold true.
  // PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
  optional int32 periodSeconds = 3;
}

// PgBouncerScalingRules configures the scaling behavior for one direction.
// These Rules are applied after calculating DesiredReplicas from metrics for the HPA.
// They can limit the scaling velocity by specifying scaling policies.
// They can prevent flapping by specifying the stabilization window, so that the
// number of replicas is not set instantly, instead, the safest value from the stabilization
// window is chosen.
message PgBouncerScalingRules {
  // StabilizationWindowSeconds is the number of seconds for which past recommendations should be
  // considered while scaling up or scaling down.
  // StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
  // If not set, use the default values:
  // - For scale up: 0 (i.e. no stabilization is done).
  // - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
  // +optional
  optional int32 stabilizationWindowSeconds = 3;

  // selectPolicy is used to specify which policy should be used.
  // If not set, the default value MaxPolicySelect is used.
  // +optional
  optional string selectPolicy = 1;

  // policies is a list of potential scaling polices which can be used during scaling.
  // At least one policy must be specified, otherwise the PgBouncerScalingRules will be discarded as invalid
  // +optional
  repeated PgBouncerScalingPolicy policies = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=postgresautoscalers,singular=postgresautoscaler,shortName=pgscaler,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
message PostgresAutoscaler {
  // metadata is the standard object metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec is the specification for the behaviour of the autoscaler.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  // +optional
  optional PostgresAutoscalerSpec spec = 2;

  // status is the current information about the autoscaler.
  // +optional
  optional PostgresAutoscalerStatus status = 3;
}

// PostgresAutoscalerBehavior configures the scaling behavior of the target
// in both Up and Down directions (scaleUp and scaleDown fields respectively).
message PostgresAutoscalerBehavior {
  // scaleUp is scaling policy for scaling Up.
  // If not set, the default value is the higher of:
  //   * increase no more than 4 pods per 60 seconds
  //   * double the number of pods per 60 seconds
  // No stabilization is used.
  // +optional
  optional PostgresScalingRules scaleUp = 1;

  // scaleDown is scaling policy for scaling Down.
  // If not set, the default value is to allow to scale down to minReplicas pods, with a
  // 300 second stabilization window (i.e., the highest recommendation for
  // the last 300sec is used).
  // +optional
  optional PostgresScalingRules scaleDown = 2;
}

// PostgresAutoscalerList is a list of horizontal pod autoscaler objects.
message PostgresAutoscalerList {
  // metadata is the standard list metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of horizontal pod autoscaler objects.
  repeated PostgresAutoscaler items = 2;
}

// PostgresAutoscalerSpec describes the desired functionality of the PostgresAutoscaler.
message PostgresAutoscalerSpec {
  // scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics
  // should be collected, as well as to actually change the replica count.
  optional k8s.io.api.core.v1.LocalObjectReference scaleTargetRef = 1;

  // minReplicas is the lower limit for the number of replicas to which the autoscaler
  // can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the
  // alpha feature gate HPAScaleToZero is enabled and at least one Object or External
  // metric is configured.  Scaling is active as long as at least one metric value is
  // available.
  // +optional
  optional int32 minReplicas = 2;

  // maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
  // It cannot be less that minReplicas.
  optional int32 maxReplicas = 3;

  // metrics contains the specifications for which to use to calculate the
  // desired replica count (the maximum replica count across all metrics will
  // be used).  The desired replica count is calculated multiplying the
  // ratio between the target value and the current value by the current
  // number of pods.  Ergo, metrics used must decrease as the pod count is
  // increased, and vice-versa.  See the individual metric source types for
  // more information about how each type of metric must respond.
  // If not set, the default metric will be set to 80% average CPU utilization.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricSpec metrics = 4;

  // behavior configures the scaling behavior of the target
  // in both Up and Down directions (scaleUp and scaleDown fields respectively).
  // If not set, the default PostgresScalingRules for scale up and scale down are used.
  // +optional
  optional PostgresAutoscalerBehavior behavior = 5;
}

// PostgresAutoscalerStatus describes the current status of a horizontal pod autoscaler.
message PostgresAutoscalerStatus {
  // observedGeneration is the most recent generation observed by this autoscaler.
  // +optional
  optional int64 observedGeneration = 1;

  // lastScaleTime is the last time the PostgresAutoscaler scaled the number of pods,
  // used by the autoscaler to control how often the number of pods is changed.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastScaleTime = 2;

  // currentReplicas is current number of replicas of pods managed by this autoscaler,
  // as last seen by the autoscaler.
  optional int32 currentReplicas = 3;

  // desiredReplicas is the desired number of replicas of pods managed by this autoscaler,
  // as last calculated by the autoscaler.
  optional int32 desiredReplicas = 4;

  // currentMetrics is the last read state of the metrics used by this autoscaler.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricStatus currentMetrics = 5;

  // conditions is the set of conditions required for this autoscaler to scale its target,
  // and indicates whether or not those conditions are met.
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 6;
}

// PostgresScalingPolicy is a single policy which must hold true for a specified past interval.
message PostgresScalingPolicy {
  // Type is used to specify the scaling policy.
  optional string type = 1;

  // Value contains the amount of change which is permitted by the policy.
  // It must be greater than zero
  optional int32 value = 2;

  // PeriodSeconds specifies the window of time for which the policy should hold true.
  // PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
  optional int32 periodSeconds = 3;
}

// PostgresScalingRules configures the scaling behavior for one direction.
// These Rules are applied after calculating DesiredReplicas from metrics for the HPA.
// They can limit the scaling velocity by specifying scaling policies.
// They can prevent flapping by specifying the stabilization window, so that the
// number of replicas is not set instantly, instead, the safest value from the stabilization
// window is chosen.
message PostgresScalingRules {
  // StabilizationWindowSeconds is the number of seconds for which past recommendations should be
  // considered while scaling up or scaling down.
  // StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
  // If not set, use the default values:
  // - For scale up: 0 (i.e. no stabilization is done).
  // - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
  // +optional
  optional int32 stabilizationWindowSeconds = 3;

  // selectPolicy is used to specify which policy should be used.
  // If not set, the default value MaxPolicySelect is used.
  // +optional
  optional string selectPolicy = 1;

  // policies is a list of potential scaling polices which can be used during scaling.
  // At least one policy must be specified, otherwise the PostgresScalingRules will be discarded as invalid
  // +optional
  repeated PostgresScalingPolicy policies = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=proxysqlautoscalers,singular=proxysqlautoscaler,shortName=pxscaler,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
message ProxySQLAutoscaler {
  // metadata is the standard object metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec is the specification for the behaviour of the autoscaler.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  // +optional
  optional ProxySQLAutoscalerSpec spec = 2;

  // status is the current information about the autoscaler.
  // +optional
  optional ProxySQLAutoscalerStatus status = 3;
}

// ProxySQLAutoscalerBehavior configures the scaling behavior of the target
// in both Up and Down directions (scaleUp and scaleDown fields respectively).
message ProxySQLAutoscalerBehavior {
  // scaleUp is scaling policy for scaling Up.
  // If not set, the default value is the higher of:
  //   * increase no more than 4 pods per 60 seconds
  //   * double the number of pods per 60 seconds
  // No stabilization is used.
  // +optional
  optional ProxySQLScalingRules scaleUp = 1;

  // scaleDown is scaling policy for scaling Down.
  // If not set, the default value is to allow to scale down to minReplicas pods, with a
  // 300 second stabilization window (i.e., the highest recommendation for
  // the last 300sec is used).
  // +optional
  optional ProxySQLScalingRules scaleDown = 2;
}

// ProxySQLAutoscalerList is a list of horizontal pod autoscaler objects.
message ProxySQLAutoscalerList {
  // metadata is the standard list metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of horizontal pod autoscaler objects.
  repeated ProxySQLAutoscaler items = 2;
}

// ProxySQLAutoscalerSpec describes the desired functionality of the ProxySQLAutoscaler.
message ProxySQLAutoscalerSpec {
  // scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics
  // should be collected, as well as to actually change the replica count.
  optional k8s.io.api.core.v1.LocalObjectReference scaleTargetRef = 1;

  // minReplicas is the lower limit for the number of replicas to which the autoscaler
  // can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the
  // alpha feature gate HPAScaleToZero is enabled and at least one Object or External
  // metric is configured.  Scaling is active as long as at least one metric value is
  // available.
  // +optional
  optional int32 minReplicas = 2;

  // maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
  // It cannot be less that minReplicas.
  optional int32 maxReplicas = 3;

  // metrics contains the specifications for which to use to calculate the
  // desired replica count (the maximum replica count across all metrics will
  // be used).  The desired replica count is calculated multiplying the
  // ratio between the target value and the current value by the current
  // number of pods.  Ergo, metrics used must decrease as the pod count is
  // increased, and vice-versa.  See the individual metric source types for
  // more information about how each type of metric must respond.
  // If not set, the default metric will be set to 80% average CPU utilization.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricSpec metrics = 4;

  // behavior configures the scaling behavior of the target
  // in both Up and Down directions (scaleUp and scaleDown fields respectively).
  // If not set, the default ProxySQLScalingRules for scale up and scale down are used.
  // +optional
  optional ProxySQLAutoscalerBehavior behavior = 5;
}

// ProxySQLAutoscalerStatus describes the current status of a horizontal pod autoscaler.
message ProxySQLAutoscalerStatus {
  // observedGeneration is the most recent generation observed by this autoscaler.
  // +optional
  optional int64 observedGeneration = 1;

  // lastScaleTime is the last time the ProxySQLAutoscaler scaled the number of pods,
  // used by the autoscaler to control how often the number of pods is changed.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastScaleTime = 2;

  // currentReplicas is current number of replicas of pods managed by this autoscaler,
  // as last seen by the autoscaler.
  optional int32 currentReplicas = 3;

  // desiredReplicas is the desired number of replicas of pods managed by this autoscaler,
  // as last calculated by the autoscaler.
  optional int32 desiredReplicas = 4;

  // currentMetrics is the last read state of the metrics used by this autoscaler.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricStatus currentMetrics = 5;

  // conditions is the set of conditions required for this autoscaler to scale its target,
  // and indicates whether or not those conditions are met.
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 6;
}

// ProxySQLScalingPolicy is a single policy which must hold true for a specified past interval.
message ProxySQLScalingPolicy {
  // Type is used to specify the scaling policy.
  optional string type = 1;

  // Value contains the amount of change which is permitted by the policy.
  // It must be greater than zero
  optional int32 value = 2;

  // PeriodSeconds specifies the window of time for which the policy should hold true.
  // PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
  optional int32 periodSeconds = 3;
}

// ProxySQLScalingRules configures the scaling behavior for one direction.
// These Rules are applied after calculating DesiredReplicas from metrics for the HPA.
// They can limit the scaling velocity by specifying scaling policies.
// They can prevent flapping by specifying the stabilization window, so that the
// number of replicas is not set instantly, instead, the safest value from the stabilization
// window is chosen.
message ProxySQLScalingRules {
  // StabilizationWindowSeconds is the number of seconds for which past recommendations should be
  // considered while scaling up or scaling down.
  // StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
  // If not set, use the default values:
  // - For scale up: 0 (i.e. no stabilization is done).
  // - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
  // +optional
  optional int32 stabilizationWindowSeconds = 3;

  // selectPolicy is used to specify which policy should be used.
  // If not set, the default value MaxPolicySelect is used.
  // +optional
  optional string selectPolicy = 1;

  // policies is a list of potential scaling polices which can be used during scaling.
  // At least one policy must be specified, otherwise the ProxySQLScalingRules will be discarded as invalid
  // +optional
  repeated ProxySQLScalingPolicy policies = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=redisautoscalers,singular=redisautoscaler,shortName=rdscaler,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
message RedisAutoscaler {
  // metadata is the standard object metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec is the specification for the behaviour of the autoscaler.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  // +optional
  optional RedisAutoscalerSpec spec = 2;

  // status is the current information about the autoscaler.
  // +optional
  optional RedisAutoscalerStatus status = 3;
}

// RedisAutoscalerBehavior configures the scaling behavior of the target
// in both Up and Down directions (scaleUp and scaleDown fields respectively).
message RedisAutoscalerBehavior {
  // scaleUp is scaling policy for scaling Up.
  // If not set, the default value is the higher of:
  //   * increase no more than 4 pods per 60 seconds
  //   * double the number of pods per 60 seconds
  // No stabilization is used.
  // +optional
  optional RedisScalingRules scaleUp = 1;

  // scaleDown is scaling policy for scaling Down.
  // If not set, the default value is to allow to scale down to minReplicas pods, with a
  // 300 second stabilization window (i.e., the highest recommendation for
  // the last 300sec is used).
  // +optional
  optional RedisScalingRules scaleDown = 2;
}

// RedisAutoscalerList is a list of horizontal pod autoscaler objects.
message RedisAutoscalerList {
  // metadata is the standard list metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of horizontal pod autoscaler objects.
  repeated RedisAutoscaler items = 2;
}

// RedisAutoscalerSpec describes the desired functionality of the RedisAutoscaler.
message RedisAutoscalerSpec {
  // scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics
  // should be collected, as well as to actually change the replica count.
  optional k8s.io.api.core.v1.LocalObjectReference scaleTargetRef = 1;

  // minReplicas is the lower limit for the number of replicas to which the autoscaler
  // can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the
  // alpha feature gate HPAScaleToZero is enabled and at least one Object or External
  // metric is configured.  Scaling is active as long as at least one metric value is
  // available.
  // +optional
  optional int32 minReplicas = 2;

  // maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
  // It cannot be less that minReplicas.
  optional int32 maxReplicas = 3;

  // metrics contains the specifications for which to use to calculate the
  // desired replica count (the maximum replica count across all metrics will
  // be used).  The desired replica count is calculated multiplying the
  // ratio between the target value and the current value by the current
  // number of pods.  Ergo, metrics used must decrease as the pod count is
  // increased, and vice-versa.  See the individual metric source types for
  // more information about how each type of metric must respond.
  // If not set, the default metric will be set to 80% average CPU utilization.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricSpec metrics = 4;

  // behavior configures the scaling behavior of the target
  // in both Up and Down directions (scaleUp and scaleDown fields respectively).
  // If not set, the default RedisScalingRules for scale up and scale down are used.
  // +optional
  optional RedisAutoscalerBehavior behavior = 5;
}

// RedisAutoscalerStatus describes the current status of a horizontal pod autoscaler.
message RedisAutoscalerStatus {
  // observedGeneration is the most recent generation observed by this autoscaler.
  // +optional
  optional int64 observedGeneration = 1;

  // lastScaleTime is the last time the RedisAutoscaler scaled the number of pods,
  // used by the autoscaler to control how often the number of pods is changed.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastScaleTime = 2;

  // currentReplicas is current number of replicas of pods managed by this autoscaler,
  // as last seen by the autoscaler.
  optional int32 currentReplicas = 3;

  // desiredReplicas is the desired number of replicas of pods managed by this autoscaler,
  // as last calculated by the autoscaler.
  optional int32 desiredReplicas = 4;

  // currentMetrics is the last read state of the metrics used by this autoscaler.
  // +optional
  repeated k8s.io.api.autoscaling.v2beta2.MetricStatus currentMetrics = 5;

  // conditions is the set of conditions required for this autoscaler to scale its target,
  // and indicates whether or not those conditions are met.
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 6;
}

// RedisScalingPolicy is a single policy which must hold true for a specified past interval.
message RedisScalingPolicy {
  // Type is used to specify the scaling policy.
  optional string type = 1;

  // Value contains the amount of change which is permitted by the policy.
  // It must be greater than zero
  optional int32 value = 2;

  // PeriodSeconds specifies the window of time for which the policy should hold true.
  // PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
  optional int32 periodSeconds = 3;
}

// RedisScalingRules configures the scaling behavior for one direction.
// These Rules are applied after calculating DesiredReplicas from metrics for the HPA.
// They can limit the scaling velocity by specifying scaling policies.
// They can prevent flapping by specifying the stabilization window, so that the
// number of replicas is not set instantly, instead, the safest value from the stabilization
// window is chosen.
message RedisScalingRules {
  // StabilizationWindowSeconds is the number of seconds for which past recommendations should be
  // considered while scaling up or scaling down.
  // StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
  // If not set, use the default values:
  // - For scale up: 0 (i.e. no stabilization is done).
  // - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
  // +optional
  optional int32 stabilizationWindowSeconds = 3;

  // selectPolicy is used to specify which policy should be used.
  // If not set, the default value MaxPolicySelect is used.
  // +optional
  optional string selectPolicy = 1;

  // policies is a list of potential scaling polices which can be used during scaling.
  // At least one policy must be specified, otherwise the RedisScalingRules will be discarded as invalid
  // +optional
  repeated RedisScalingPolicy policies = 2;
}

message StorageAutoscalerSpec {
  // Whether compute autoscaler is enabled. The default is Off".
  optional string trigger = 1;

  optional int32 usageThreshold = 2;

  optional int32 scalingThreshold = 3;

  optional string expansionMode = 4;
}

