/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kubedb.dev/apimachinery/apis/ui/v1alpha1/generated.proto

package v1alpha1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	kubedb_dev_apimachinery_apis_kubedb_v1alpha2 "kubedb.dev/apimachinery/apis/kubedb/v1alpha2"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *ElasticsearchClusterHealth) Reset()      { *m = ElasticsearchClusterHealth{} }
func (*ElasticsearchClusterHealth) ProtoMessage() {}
func (*ElasticsearchClusterHealth) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{0}
}
func (m *ElasticsearchClusterHealth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElasticsearchClusterHealth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElasticsearchClusterHealth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticsearchClusterHealth.Merge(m, src)
}
func (m *ElasticsearchClusterHealth) XXX_Size() int {
	return m.Size()
}
func (m *ElasticsearchClusterHealth) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticsearchClusterHealth.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticsearchClusterHealth proto.InternalMessageInfo

func (m *ElasticsearchIndexSpec) Reset()      { *m = ElasticsearchIndexSpec{} }
func (*ElasticsearchIndexSpec) ProtoMessage() {}
func (*ElasticsearchIndexSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{1}
}
func (m *ElasticsearchIndexSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElasticsearchIndexSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElasticsearchIndexSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticsearchIndexSpec.Merge(m, src)
}
func (m *ElasticsearchIndexSpec) XXX_Size() int {
	return m.Size()
}
func (m *ElasticsearchIndexSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticsearchIndexSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticsearchIndexSpec proto.InternalMessageInfo

func (m *ElasticsearchInsight) Reset()      { *m = ElasticsearchInsight{} }
func (*ElasticsearchInsight) ProtoMessage() {}
func (*ElasticsearchInsight) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{2}
}
func (m *ElasticsearchInsight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElasticsearchInsight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElasticsearchInsight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticsearchInsight.Merge(m, src)
}
func (m *ElasticsearchInsight) XXX_Size() int {
	return m.Size()
}
func (m *ElasticsearchInsight) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticsearchInsight.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticsearchInsight proto.InternalMessageInfo

func (m *ElasticsearchInsightList) Reset()      { *m = ElasticsearchInsightList{} }
func (*ElasticsearchInsightList) ProtoMessage() {}
func (*ElasticsearchInsightList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{3}
}
func (m *ElasticsearchInsightList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElasticsearchInsightList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElasticsearchInsightList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticsearchInsightList.Merge(m, src)
}
func (m *ElasticsearchInsightList) XXX_Size() int {
	return m.Size()
}
func (m *ElasticsearchInsightList) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticsearchInsightList.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticsearchInsightList proto.InternalMessageInfo

func (m *ElasticsearchInsightSpec) Reset()      { *m = ElasticsearchInsightSpec{} }
func (*ElasticsearchInsightSpec) ProtoMessage() {}
func (*ElasticsearchInsightSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{4}
}
func (m *ElasticsearchInsightSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElasticsearchInsightSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElasticsearchInsightSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticsearchInsightSpec.Merge(m, src)
}
func (m *ElasticsearchInsightSpec) XXX_Size() int {
	return m.Size()
}
func (m *ElasticsearchInsightSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticsearchInsightSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticsearchInsightSpec proto.InternalMessageInfo

func (m *ElasticsearchNodesStatSpec) Reset()      { *m = ElasticsearchNodesStatSpec{} }
func (*ElasticsearchNodesStatSpec) ProtoMessage() {}
func (*ElasticsearchNodesStatSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{5}
}
func (m *ElasticsearchNodesStatSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElasticsearchNodesStatSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElasticsearchNodesStatSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticsearchNodesStatSpec.Merge(m, src)
}
func (m *ElasticsearchNodesStatSpec) XXX_Size() int {
	return m.Size()
}
func (m *ElasticsearchNodesStatSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticsearchNodesStatSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticsearchNodesStatSpec proto.InternalMessageInfo

func (m *ElasticsearchNodesStats) Reset()      { *m = ElasticsearchNodesStats{} }
func (*ElasticsearchNodesStats) ProtoMessage() {}
func (*ElasticsearchNodesStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{6}
}
func (m *ElasticsearchNodesStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElasticsearchNodesStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElasticsearchNodesStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticsearchNodesStats.Merge(m, src)
}
func (m *ElasticsearchNodesStats) XXX_Size() int {
	return m.Size()
}
func (m *ElasticsearchNodesStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticsearchNodesStats.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticsearchNodesStats proto.InternalMessageInfo

func (m *ElasticsearchNodesStatsList) Reset()      { *m = ElasticsearchNodesStatsList{} }
func (*ElasticsearchNodesStatsList) ProtoMessage() {}
func (*ElasticsearchNodesStatsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{7}
}
func (m *ElasticsearchNodesStatsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElasticsearchNodesStatsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElasticsearchNodesStatsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticsearchNodesStatsList.Merge(m, src)
}
func (m *ElasticsearchNodesStatsList) XXX_Size() int {
	return m.Size()
}
func (m *ElasticsearchNodesStatsList) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticsearchNodesStatsList.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticsearchNodesStatsList proto.InternalMessageInfo

func (m *ElasticsearchNodesStatsSpec) Reset()      { *m = ElasticsearchNodesStatsSpec{} }
func (*ElasticsearchNodesStatsSpec) ProtoMessage() {}
func (*ElasticsearchNodesStatsSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{8}
}
func (m *ElasticsearchNodesStatsSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElasticsearchNodesStatsSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElasticsearchNodesStatsSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticsearchNodesStatsSpec.Merge(m, src)
}
func (m *ElasticsearchNodesStatsSpec) XXX_Size() int {
	return m.Size()
}
func (m *ElasticsearchNodesStatsSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticsearchNodesStatsSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticsearchNodesStatsSpec proto.InternalMessageInfo

func (m *ElasticsearchNodesStatsStatus) Reset()      { *m = ElasticsearchNodesStatsStatus{} }
func (*ElasticsearchNodesStatsStatus) ProtoMessage() {}
func (*ElasticsearchNodesStatsStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{9}
}
func (m *ElasticsearchNodesStatsStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElasticsearchNodesStatsStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElasticsearchNodesStatsStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticsearchNodesStatsStatus.Merge(m, src)
}
func (m *ElasticsearchNodesStatsStatus) XXX_Size() int {
	return m.Size()
}
func (m *ElasticsearchNodesStatsStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticsearchNodesStatsStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticsearchNodesStatsStatus proto.InternalMessageInfo

func (m *ElasticsearchSchemaOverview) Reset()      { *m = ElasticsearchSchemaOverview{} }
func (*ElasticsearchSchemaOverview) ProtoMessage() {}
func (*ElasticsearchSchemaOverview) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{10}
}
func (m *ElasticsearchSchemaOverview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElasticsearchSchemaOverview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElasticsearchSchemaOverview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticsearchSchemaOverview.Merge(m, src)
}
func (m *ElasticsearchSchemaOverview) XXX_Size() int {
	return m.Size()
}
func (m *ElasticsearchSchemaOverview) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticsearchSchemaOverview.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticsearchSchemaOverview proto.InternalMessageInfo

func (m *ElasticsearchSchemaOverviewList) Reset()      { *m = ElasticsearchSchemaOverviewList{} }
func (*ElasticsearchSchemaOverviewList) ProtoMessage() {}
func (*ElasticsearchSchemaOverviewList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{11}
}
func (m *ElasticsearchSchemaOverviewList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElasticsearchSchemaOverviewList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElasticsearchSchemaOverviewList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticsearchSchemaOverviewList.Merge(m, src)
}
func (m *ElasticsearchSchemaOverviewList) XXX_Size() int {
	return m.Size()
}
func (m *ElasticsearchSchemaOverviewList) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticsearchSchemaOverviewList.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticsearchSchemaOverviewList proto.InternalMessageInfo

func (m *ElasticsearchSchemaOverviewSpec) Reset()      { *m = ElasticsearchSchemaOverviewSpec{} }
func (*ElasticsearchSchemaOverviewSpec) ProtoMessage() {}
func (*ElasticsearchSchemaOverviewSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{12}
}
func (m *ElasticsearchSchemaOverviewSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElasticsearchSchemaOverviewSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElasticsearchSchemaOverviewSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticsearchSchemaOverviewSpec.Merge(m, src)
}
func (m *ElasticsearchSchemaOverviewSpec) XXX_Size() int {
	return m.Size()
}
func (m *ElasticsearchSchemaOverviewSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticsearchSchemaOverviewSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticsearchSchemaOverviewSpec proto.InternalMessageInfo

func (m *GenericDatabaseSpec) Reset()      { *m = GenericDatabaseSpec{} }
func (*GenericDatabaseSpec) ProtoMessage() {}
func (*GenericDatabaseSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{13}
}
func (m *GenericDatabaseSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenericDatabaseSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GenericDatabaseSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericDatabaseSpec.Merge(m, src)
}
func (m *GenericDatabaseSpec) XXX_Size() int {
	return m.Size()
}
func (m *GenericDatabaseSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericDatabaseSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GenericDatabaseSpec proto.InternalMessageInfo

func (m *GenericSchemaOverviewSpec) Reset()      { *m = GenericSchemaOverviewSpec{} }
func (*GenericSchemaOverviewSpec) ProtoMessage() {}
func (*GenericSchemaOverviewSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{14}
}
func (m *GenericSchemaOverviewSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenericSchemaOverviewSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GenericSchemaOverviewSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericSchemaOverviewSpec.Merge(m, src)
}
func (m *GenericSchemaOverviewSpec) XXX_Size() int {
	return m.Size()
}
func (m *GenericSchemaOverviewSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericSchemaOverviewSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GenericSchemaOverviewSpec proto.InternalMessageInfo

func (m *MariaDBInsight) Reset()      { *m = MariaDBInsight{} }
func (*MariaDBInsight) ProtoMessage() {}
func (*MariaDBInsight) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{15}
}
func (m *MariaDBInsight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MariaDBInsight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MariaDBInsight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MariaDBInsight.Merge(m, src)
}
func (m *MariaDBInsight) XXX_Size() int {
	return m.Size()
}
func (m *MariaDBInsight) XXX_DiscardUnknown() {
	xxx_messageInfo_MariaDBInsight.DiscardUnknown(m)
}

var xxx_messageInfo_MariaDBInsight proto.InternalMessageInfo

func (m *MariaDBInsightList) Reset()      { *m = MariaDBInsightList{} }
func (*MariaDBInsightList) ProtoMessage() {}
func (*MariaDBInsightList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{16}
}
func (m *MariaDBInsightList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MariaDBInsightList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MariaDBInsightList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MariaDBInsightList.Merge(m, src)
}
func (m *MariaDBInsightList) XXX_Size() int {
	return m.Size()
}
func (m *MariaDBInsightList) XXX_DiscardUnknown() {
	xxx_messageInfo_MariaDBInsightList.DiscardUnknown(m)
}

var xxx_messageInfo_MariaDBInsightList proto.InternalMessageInfo

func (m *MariaDBInsightSpec) Reset()      { *m = MariaDBInsightSpec{} }
func (*MariaDBInsightSpec) ProtoMessage() {}
func (*MariaDBInsightSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{17}
}
func (m *MariaDBInsightSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MariaDBInsightSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MariaDBInsightSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MariaDBInsightSpec.Merge(m, src)
}
func (m *MariaDBInsightSpec) XXX_Size() int {
	return m.Size()
}
func (m *MariaDBInsightSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MariaDBInsightSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MariaDBInsightSpec proto.InternalMessageInfo

func (m *MariaDBQueries) Reset()      { *m = MariaDBQueries{} }
func (*MariaDBQueries) ProtoMessage() {}
func (*MariaDBQueries) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{18}
}
func (m *MariaDBQueries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MariaDBQueries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MariaDBQueries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MariaDBQueries.Merge(m, src)
}
func (m *MariaDBQueries) XXX_Size() int {
	return m.Size()
}
func (m *MariaDBQueries) XXX_DiscardUnknown() {
	xxx_messageInfo_MariaDBQueries.DiscardUnknown(m)
}

var xxx_messageInfo_MariaDBQueries proto.InternalMessageInfo

func (m *MariaDBQueriesList) Reset()      { *m = MariaDBQueriesList{} }
func (*MariaDBQueriesList) ProtoMessage() {}
func (*MariaDBQueriesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{19}
}
func (m *MariaDBQueriesList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MariaDBQueriesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MariaDBQueriesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MariaDBQueriesList.Merge(m, src)
}
func (m *MariaDBQueriesList) XXX_Size() int {
	return m.Size()
}
func (m *MariaDBQueriesList) XXX_DiscardUnknown() {
	xxx_messageInfo_MariaDBQueriesList.DiscardUnknown(m)
}

var xxx_messageInfo_MariaDBQueriesList proto.InternalMessageInfo

func (m *MariaDBQueriesSpec) Reset()      { *m = MariaDBQueriesSpec{} }
func (*MariaDBQueriesSpec) ProtoMessage() {}
func (*MariaDBQueriesSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{20}
}
func (m *MariaDBQueriesSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MariaDBQueriesSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MariaDBQueriesSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MariaDBQueriesSpec.Merge(m, src)
}
func (m *MariaDBQueriesSpec) XXX_Size() int {
	return m.Size()
}
func (m *MariaDBQueriesSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MariaDBQueriesSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MariaDBQueriesSpec proto.InternalMessageInfo

func (m *MariaDBQuerySpec) Reset()      { *m = MariaDBQuerySpec{} }
func (*MariaDBQuerySpec) ProtoMessage() {}
func (*MariaDBQuerySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{21}
}
func (m *MariaDBQuerySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MariaDBQuerySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MariaDBQuerySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MariaDBQuerySpec.Merge(m, src)
}
func (m *MariaDBQuerySpec) XXX_Size() int {
	return m.Size()
}
func (m *MariaDBQuerySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MariaDBQuerySpec.DiscardUnknown(m)
}

var xxx_messageInfo_MariaDBQuerySpec proto.InternalMessageInfo

func (m *MariaDBSchemaOverview) Reset()      { *m = MariaDBSchemaOverview{} }
func (*MariaDBSchemaOverview) ProtoMessage() {}
func (*MariaDBSchemaOverview) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{22}
}
func (m *MariaDBSchemaOverview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MariaDBSchemaOverview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MariaDBSchemaOverview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MariaDBSchemaOverview.Merge(m, src)
}
func (m *MariaDBSchemaOverview) XXX_Size() int {
	return m.Size()
}
func (m *MariaDBSchemaOverview) XXX_DiscardUnknown() {
	xxx_messageInfo_MariaDBSchemaOverview.DiscardUnknown(m)
}

var xxx_messageInfo_MariaDBSchemaOverview proto.InternalMessageInfo

func (m *MariaDBSchemaOverviewList) Reset()      { *m = MariaDBSchemaOverviewList{} }
func (*MariaDBSchemaOverviewList) ProtoMessage() {}
func (*MariaDBSchemaOverviewList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{23}
}
func (m *MariaDBSchemaOverviewList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MariaDBSchemaOverviewList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MariaDBSchemaOverviewList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MariaDBSchemaOverviewList.Merge(m, src)
}
func (m *MariaDBSchemaOverviewList) XXX_Size() int {
	return m.Size()
}
func (m *MariaDBSchemaOverviewList) XXX_DiscardUnknown() {
	xxx_messageInfo_MariaDBSchemaOverviewList.DiscardUnknown(m)
}

var xxx_messageInfo_MariaDBSchemaOverviewList proto.InternalMessageInfo

func (m *MongoDBCollectionSpec) Reset()      { *m = MongoDBCollectionSpec{} }
func (*MongoDBCollectionSpec) ProtoMessage() {}
func (*MongoDBCollectionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{24}
}
func (m *MongoDBCollectionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBCollectionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBCollectionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBCollectionSpec.Merge(m, src)
}
func (m *MongoDBCollectionSpec) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBCollectionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBCollectionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBCollectionSpec proto.InternalMessageInfo

func (m *MongoDBConnectionsInfo) Reset()      { *m = MongoDBConnectionsInfo{} }
func (*MongoDBConnectionsInfo) ProtoMessage() {}
func (*MongoDBConnectionsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{25}
}
func (m *MongoDBConnectionsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBConnectionsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBConnectionsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBConnectionsInfo.Merge(m, src)
}
func (m *MongoDBConnectionsInfo) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBConnectionsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBConnectionsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBConnectionsInfo proto.InternalMessageInfo

func (m *MongoDBDatabaseStats) Reset()      { *m = MongoDBDatabaseStats{} }
func (*MongoDBDatabaseStats) ProtoMessage() {}
func (*MongoDBDatabaseStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{26}
}
func (m *MongoDBDatabaseStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBDatabaseStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBDatabaseStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBDatabaseStats.Merge(m, src)
}
func (m *MongoDBDatabaseStats) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBDatabaseStats) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBDatabaseStats.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBDatabaseStats proto.InternalMessageInfo

func (m *MongoDBInsight) Reset()      { *m = MongoDBInsight{} }
func (*MongoDBInsight) ProtoMessage() {}
func (*MongoDBInsight) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{27}
}
func (m *MongoDBInsight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBInsight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBInsight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBInsight.Merge(m, src)
}
func (m *MongoDBInsight) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBInsight) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBInsight.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBInsight proto.InternalMessageInfo

func (m *MongoDBInsightList) Reset()      { *m = MongoDBInsightList{} }
func (*MongoDBInsightList) ProtoMessage() {}
func (*MongoDBInsightList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{28}
}
func (m *MongoDBInsightList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBInsightList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBInsightList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBInsightList.Merge(m, src)
}
func (m *MongoDBInsightList) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBInsightList) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBInsightList.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBInsightList proto.InternalMessageInfo

func (m *MongoDBInsightSpec) Reset()      { *m = MongoDBInsightSpec{} }
func (*MongoDBInsightSpec) ProtoMessage() {}
func (*MongoDBInsightSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{29}
}
func (m *MongoDBInsightSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBInsightSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBInsightSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBInsightSpec.Merge(m, src)
}
func (m *MongoDBInsightSpec) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBInsightSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBInsightSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBInsightSpec proto.InternalMessageInfo

func (m *MongoDBQueries) Reset()      { *m = MongoDBQueries{} }
func (*MongoDBQueries) ProtoMessage() {}
func (*MongoDBQueries) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{30}
}
func (m *MongoDBQueries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBQueries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBQueries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBQueries.Merge(m, src)
}
func (m *MongoDBQueries) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBQueries) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBQueries.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBQueries proto.InternalMessageInfo

func (m *MongoDBQueriesList) Reset()      { *m = MongoDBQueriesList{} }
func (*MongoDBQueriesList) ProtoMessage() {}
func (*MongoDBQueriesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{31}
}
func (m *MongoDBQueriesList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBQueriesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBQueriesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBQueriesList.Merge(m, src)
}
func (m *MongoDBQueriesList) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBQueriesList) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBQueriesList.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBQueriesList proto.InternalMessageInfo

func (m *MongoDBQueriesSpec) Reset()      { *m = MongoDBQueriesSpec{} }
func (*MongoDBQueriesSpec) ProtoMessage() {}
func (*MongoDBQueriesSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{32}
}
func (m *MongoDBQueriesSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBQueriesSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBQueriesSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBQueriesSpec.Merge(m, src)
}
func (m *MongoDBQueriesSpec) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBQueriesSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBQueriesSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBQueriesSpec proto.InternalMessageInfo

func (m *MongoDBQuerySpec) Reset()      { *m = MongoDBQuerySpec{} }
func (*MongoDBQuerySpec) ProtoMessage() {}
func (*MongoDBQuerySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{33}
}
func (m *MongoDBQuerySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBQuerySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBQuerySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBQuerySpec.Merge(m, src)
}
func (m *MongoDBQuerySpec) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBQuerySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBQuerySpec.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBQuerySpec proto.InternalMessageInfo

func (m *MongoDBReplicaSetInfo) Reset()      { *m = MongoDBReplicaSetInfo{} }
func (*MongoDBReplicaSetInfo) ProtoMessage() {}
func (*MongoDBReplicaSetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{34}
}
func (m *MongoDBReplicaSetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBReplicaSetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBReplicaSetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBReplicaSetInfo.Merge(m, src)
}
func (m *MongoDBReplicaSetInfo) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBReplicaSetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBReplicaSetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBReplicaSetInfo proto.InternalMessageInfo

func (m *MongoDBSchemaOverview) Reset()      { *m = MongoDBSchemaOverview{} }
func (*MongoDBSchemaOverview) ProtoMessage() {}
func (*MongoDBSchemaOverview) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{35}
}
func (m *MongoDBSchemaOverview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBSchemaOverview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBSchemaOverview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBSchemaOverview.Merge(m, src)
}
func (m *MongoDBSchemaOverview) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBSchemaOverview) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBSchemaOverview.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBSchemaOverview proto.InternalMessageInfo

func (m *MongoDBSchemaOverviewList) Reset()      { *m = MongoDBSchemaOverviewList{} }
func (*MongoDBSchemaOverviewList) ProtoMessage() {}
func (*MongoDBSchemaOverviewList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{36}
}
func (m *MongoDBSchemaOverviewList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBSchemaOverviewList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBSchemaOverviewList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBSchemaOverviewList.Merge(m, src)
}
func (m *MongoDBSchemaOverviewList) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBSchemaOverviewList) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBSchemaOverviewList.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBSchemaOverviewList proto.InternalMessageInfo

func (m *MongoDBSchemaOverviewSpec) Reset()      { *m = MongoDBSchemaOverviewSpec{} }
func (*MongoDBSchemaOverviewSpec) ProtoMessage() {}
func (*MongoDBSchemaOverviewSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{37}
}
func (m *MongoDBSchemaOverviewSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBSchemaOverviewSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBSchemaOverviewSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBSchemaOverviewSpec.Merge(m, src)
}
func (m *MongoDBSchemaOverviewSpec) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBSchemaOverviewSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBSchemaOverviewSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBSchemaOverviewSpec proto.InternalMessageInfo

func (m *MongoDBShardsInfo) Reset()      { *m = MongoDBShardsInfo{} }
func (*MongoDBShardsInfo) ProtoMessage() {}
func (*MongoDBShardsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{38}
}
func (m *MongoDBShardsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MongoDBShardsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MongoDBShardsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBShardsInfo.Merge(m, src)
}
func (m *MongoDBShardsInfo) XXX_Size() int {
	return m.Size()
}
func (m *MongoDBShardsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBShardsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBShardsInfo proto.InternalMessageInfo

func (m *MySQLInsight) Reset()      { *m = MySQLInsight{} }
func (*MySQLInsight) ProtoMessage() {}
func (*MySQLInsight) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{39}
}
func (m *MySQLInsight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySQLInsight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MySQLInsight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLInsight.Merge(m, src)
}
func (m *MySQLInsight) XXX_Size() int {
	return m.Size()
}
func (m *MySQLInsight) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLInsight.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLInsight proto.InternalMessageInfo

func (m *MySQLInsightList) Reset()      { *m = MySQLInsightList{} }
func (*MySQLInsightList) ProtoMessage() {}
func (*MySQLInsightList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{40}
}
func (m *MySQLInsightList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySQLInsightList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MySQLInsightList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLInsightList.Merge(m, src)
}
func (m *MySQLInsightList) XXX_Size() int {
	return m.Size()
}
func (m *MySQLInsightList) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLInsightList.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLInsightList proto.InternalMessageInfo

func (m *MySQLInsightSpec) Reset()      { *m = MySQLInsightSpec{} }
func (*MySQLInsightSpec) ProtoMessage() {}
func (*MySQLInsightSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{41}
}
func (m *MySQLInsightSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySQLInsightSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MySQLInsightSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLInsightSpec.Merge(m, src)
}
func (m *MySQLInsightSpec) XXX_Size() int {
	return m.Size()
}
func (m *MySQLInsightSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLInsightSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLInsightSpec proto.InternalMessageInfo

func (m *MySQLQueries) Reset()      { *m = MySQLQueries{} }
func (*MySQLQueries) ProtoMessage() {}
func (*MySQLQueries) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{42}
}
func (m *MySQLQueries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySQLQueries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MySQLQueries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLQueries.Merge(m, src)
}
func (m *MySQLQueries) XXX_Size() int {
	return m.Size()
}
func (m *MySQLQueries) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLQueries.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLQueries proto.InternalMessageInfo

func (m *MySQLQueriesList) Reset()      { *m = MySQLQueriesList{} }
func (*MySQLQueriesList) ProtoMessage() {}
func (*MySQLQueriesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{43}
}
func (m *MySQLQueriesList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySQLQueriesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MySQLQueriesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLQueriesList.Merge(m, src)
}
func (m *MySQLQueriesList) XXX_Size() int {
	return m.Size()
}
func (m *MySQLQueriesList) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLQueriesList.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLQueriesList proto.InternalMessageInfo

func (m *MySQLQueriesSpec) Reset()      { *m = MySQLQueriesSpec{} }
func (*MySQLQueriesSpec) ProtoMessage() {}
func (*MySQLQueriesSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{44}
}
func (m *MySQLQueriesSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySQLQueriesSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MySQLQueriesSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLQueriesSpec.Merge(m, src)
}
func (m *MySQLQueriesSpec) XXX_Size() int {
	return m.Size()
}
func (m *MySQLQueriesSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLQueriesSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLQueriesSpec proto.InternalMessageInfo

func (m *MySQLQuerySpec) Reset()      { *m = MySQLQuerySpec{} }
func (*MySQLQuerySpec) ProtoMessage() {}
func (*MySQLQuerySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{45}
}
func (m *MySQLQuerySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySQLQuerySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MySQLQuerySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLQuerySpec.Merge(m, src)
}
func (m *MySQLQuerySpec) XXX_Size() int {
	return m.Size()
}
func (m *MySQLQuerySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLQuerySpec.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLQuerySpec proto.InternalMessageInfo

func (m *MySQLSchemaOverview) Reset()      { *m = MySQLSchemaOverview{} }
func (*MySQLSchemaOverview) ProtoMessage() {}
func (*MySQLSchemaOverview) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{46}
}
func (m *MySQLSchemaOverview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySQLSchemaOverview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MySQLSchemaOverview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLSchemaOverview.Merge(m, src)
}
func (m *MySQLSchemaOverview) XXX_Size() int {
	return m.Size()
}
func (m *MySQLSchemaOverview) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLSchemaOverview.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLSchemaOverview proto.InternalMessageInfo

func (m *MySQLSchemaOverviewList) Reset()      { *m = MySQLSchemaOverviewList{} }
func (*MySQLSchemaOverviewList) ProtoMessage() {}
func (*MySQLSchemaOverviewList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{47}
}
func (m *MySQLSchemaOverviewList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySQLSchemaOverviewList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MySQLSchemaOverviewList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLSchemaOverviewList.Merge(m, src)
}
func (m *MySQLSchemaOverviewList) XXX_Size() int {
	return m.Size()
}
func (m *MySQLSchemaOverviewList) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLSchemaOverviewList.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLSchemaOverviewList proto.InternalMessageInfo

func (m *NodesStatsCompletionFields) Reset()      { *m = NodesStatsCompletionFields{} }
func (*NodesStatsCompletionFields) ProtoMessage() {}
func (*NodesStatsCompletionFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{48}
}
func (m *NodesStatsCompletionFields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsCompletionFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsCompletionFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsCompletionFields.Merge(m, src)
}
func (m *NodesStatsCompletionFields) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsCompletionFields) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsCompletionFields.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsCompletionFields proto.InternalMessageInfo

func (m *NodesStatsCompletionStats) Reset()      { *m = NodesStatsCompletionStats{} }
func (*NodesStatsCompletionStats) ProtoMessage() {}
func (*NodesStatsCompletionStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{49}
}
func (m *NodesStatsCompletionStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsCompletionStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsCompletionStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsCompletionStats.Merge(m, src)
}
func (m *NodesStatsCompletionStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsCompletionStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsCompletionStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsCompletionStats proto.InternalMessageInfo

func (m *NodesStatsDocsStats) Reset()      { *m = NodesStatsDocsStats{} }
func (*NodesStatsDocsStats) ProtoMessage() {}
func (*NodesStatsDocsStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{50}
}
func (m *NodesStatsDocsStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsDocsStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsDocsStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsDocsStats.Merge(m, src)
}
func (m *NodesStatsDocsStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsDocsStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsDocsStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsDocsStats proto.InternalMessageInfo

func (m *NodesStatsFieldDataFields) Reset()      { *m = NodesStatsFieldDataFields{} }
func (*NodesStatsFieldDataFields) ProtoMessage() {}
func (*NodesStatsFieldDataFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{51}
}
func (m *NodesStatsFieldDataFields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsFieldDataFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsFieldDataFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsFieldDataFields.Merge(m, src)
}
func (m *NodesStatsFieldDataFields) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsFieldDataFields) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsFieldDataFields.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsFieldDataFields proto.InternalMessageInfo

func (m *NodesStatsFielddataStats) Reset()      { *m = NodesStatsFielddataStats{} }
func (*NodesStatsFielddataStats) ProtoMessage() {}
func (*NodesStatsFielddataStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{52}
}
func (m *NodesStatsFielddataStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsFielddataStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsFielddataStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsFielddataStats.Merge(m, src)
}
func (m *NodesStatsFielddataStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsFielddataStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsFielddataStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsFielddataStats proto.InternalMessageInfo

func (m *NodesStatsFlushStats) Reset()      { *m = NodesStatsFlushStats{} }
func (*NodesStatsFlushStats) ProtoMessage() {}
func (*NodesStatsFlushStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{53}
}
func (m *NodesStatsFlushStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsFlushStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsFlushStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsFlushStats.Merge(m, src)
}
func (m *NodesStatsFlushStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsFlushStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsFlushStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsFlushStats proto.InternalMessageInfo

func (m *NodesStatsGetStats) Reset()      { *m = NodesStatsGetStats{} }
func (*NodesStatsGetStats) ProtoMessage() {}
func (*NodesStatsGetStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{54}
}
func (m *NodesStatsGetStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsGetStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsGetStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsGetStats.Merge(m, src)
}
func (m *NodesStatsGetStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsGetStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsGetStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsGetStats proto.InternalMessageInfo

func (m *NodesStatsIndex) Reset()      { *m = NodesStatsIndex{} }
func (*NodesStatsIndex) ProtoMessage() {}
func (*NodesStatsIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{55}
}
func (m *NodesStatsIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsIndex.Merge(m, src)
}
func (m *NodesStatsIndex) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsIndex.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsIndex proto.InternalMessageInfo

func (m *NodesStatsIndexingStats) Reset()      { *m = NodesStatsIndexingStats{} }
func (*NodesStatsIndexingStats) ProtoMessage() {}
func (*NodesStatsIndexingStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{56}
}
func (m *NodesStatsIndexingStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsIndexingStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsIndexingStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsIndexingStats.Merge(m, src)
}
func (m *NodesStatsIndexingStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsIndexingStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsIndexingStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsIndexingStats proto.InternalMessageInfo

func (m *NodesStatsMergeStats) Reset()      { *m = NodesStatsMergeStats{} }
func (*NodesStatsMergeStats) ProtoMessage() {}
func (*NodesStatsMergeStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{57}
}
func (m *NodesStatsMergeStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsMergeStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsMergeStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsMergeStats.Merge(m, src)
}
func (m *NodesStatsMergeStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsMergeStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsMergeStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsMergeStats proto.InternalMessageInfo

func (m *NodesStatsNodeOS) Reset()      { *m = NodesStatsNodeOS{} }
func (*NodesStatsNodeOS) ProtoMessage() {}
func (*NodesStatsNodeOS) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{58}
}
func (m *NodesStatsNodeOS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsNodeOS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsNodeOS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsNodeOS.Merge(m, src)
}
func (m *NodesStatsNodeOS) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsNodeOS) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsNodeOS.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsNodeOS proto.InternalMessageInfo

func (m *NodesStatsNodeOSCPU) Reset()      { *m = NodesStatsNodeOSCPU{} }
func (*NodesStatsNodeOSCPU) ProtoMessage() {}
func (*NodesStatsNodeOSCPU) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{59}
}
func (m *NodesStatsNodeOSCPU) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsNodeOSCPU) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsNodeOSCPU) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsNodeOSCPU.Merge(m, src)
}
func (m *NodesStatsNodeOSCPU) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsNodeOSCPU) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsNodeOSCPU.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsNodeOSCPU proto.InternalMessageInfo

func (m *NodesStatsNodeOSMem) Reset()      { *m = NodesStatsNodeOSMem{} }
func (*NodesStatsNodeOSMem) ProtoMessage() {}
func (*NodesStatsNodeOSMem) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{60}
}
func (m *NodesStatsNodeOSMem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsNodeOSMem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsNodeOSMem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsNodeOSMem.Merge(m, src)
}
func (m *NodesStatsNodeOSMem) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsNodeOSMem) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsNodeOSMem.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsNodeOSMem proto.InternalMessageInfo

func (m *NodesStatsNodeOSSwap) Reset()      { *m = NodesStatsNodeOSSwap{} }
func (*NodesStatsNodeOSSwap) ProtoMessage() {}
func (*NodesStatsNodeOSSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{61}
}
func (m *NodesStatsNodeOSSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsNodeOSSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsNodeOSSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsNodeOSSwap.Merge(m, src)
}
func (m *NodesStatsNodeOSSwap) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsNodeOSSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsNodeOSSwap.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsNodeOSSwap proto.InternalMessageInfo

func (m *NodesStatsQueryCacheStats) Reset()      { *m = NodesStatsQueryCacheStats{} }
func (*NodesStatsQueryCacheStats) ProtoMessage() {}
func (*NodesStatsQueryCacheStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{62}
}
func (m *NodesStatsQueryCacheStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsQueryCacheStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsQueryCacheStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsQueryCacheStats.Merge(m, src)
}
func (m *NodesStatsQueryCacheStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsQueryCacheStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsQueryCacheStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsQueryCacheStats proto.InternalMessageInfo

func (m *NodesStatsRecoveryStats) Reset()      { *m = NodesStatsRecoveryStats{} }
func (*NodesStatsRecoveryStats) ProtoMessage() {}
func (*NodesStatsRecoveryStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{63}
}
func (m *NodesStatsRecoveryStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsRecoveryStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsRecoveryStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsRecoveryStats.Merge(m, src)
}
func (m *NodesStatsRecoveryStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsRecoveryStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsRecoveryStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsRecoveryStats proto.InternalMessageInfo

func (m *NodesStatsRefreshStats) Reset()      { *m = NodesStatsRefreshStats{} }
func (*NodesStatsRefreshStats) ProtoMessage() {}
func (*NodesStatsRefreshStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{64}
}
func (m *NodesStatsRefreshStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsRefreshStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsRefreshStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsRefreshStats.Merge(m, src)
}
func (m *NodesStatsRefreshStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsRefreshStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsRefreshStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsRefreshStats proto.InternalMessageInfo

func (m *NodesStatsRequestCacheStats) Reset()      { *m = NodesStatsRequestCacheStats{} }
func (*NodesStatsRequestCacheStats) ProtoMessage() {}
func (*NodesStatsRequestCacheStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{65}
}
func (m *NodesStatsRequestCacheStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsRequestCacheStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsRequestCacheStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsRequestCacheStats.Merge(m, src)
}
func (m *NodesStatsRequestCacheStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsRequestCacheStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsRequestCacheStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsRequestCacheStats proto.InternalMessageInfo

func (m *NodesStatsSearchStats) Reset()      { *m = NodesStatsSearchStats{} }
func (*NodesStatsSearchStats) ProtoMessage() {}
func (*NodesStatsSearchStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{66}
}
func (m *NodesStatsSearchStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsSearchStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsSearchStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsSearchStats.Merge(m, src)
}
func (m *NodesStatsSearchStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsSearchStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsSearchStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsSearchStats proto.InternalMessageInfo

func (m *NodesStatsSegmentsStats) Reset()      { *m = NodesStatsSegmentsStats{} }
func (*NodesStatsSegmentsStats) ProtoMessage() {}
func (*NodesStatsSegmentsStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{67}
}
func (m *NodesStatsSegmentsStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsSegmentsStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsSegmentsStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsSegmentsStats.Merge(m, src)
}
func (m *NodesStatsSegmentsStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsSegmentsStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsSegmentsStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsSegmentsStats proto.InternalMessageInfo

func (m *NodesStatsShardCountStats) Reset()      { *m = NodesStatsShardCountStats{} }
func (*NodesStatsShardCountStats) ProtoMessage() {}
func (*NodesStatsShardCountStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{68}
}
func (m *NodesStatsShardCountStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsShardCountStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsShardCountStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsShardCountStats.Merge(m, src)
}
func (m *NodesStatsShardCountStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsShardCountStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsShardCountStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsShardCountStats proto.InternalMessageInfo

func (m *NodesStatsStoreStats) Reset()      { *m = NodesStatsStoreStats{} }
func (*NodesStatsStoreStats) ProtoMessage() {}
func (*NodesStatsStoreStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{69}
}
func (m *NodesStatsStoreStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsStoreStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsStoreStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsStoreStats.Merge(m, src)
}
func (m *NodesStatsStoreStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsStoreStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsStoreStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsStoreStats proto.InternalMessageInfo

func (m *NodesStatsTranslogStats) Reset()      { *m = NodesStatsTranslogStats{} }
func (*NodesStatsTranslogStats) ProtoMessage() {}
func (*NodesStatsTranslogStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{70}
}
func (m *NodesStatsTranslogStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsTranslogStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsTranslogStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsTranslogStats.Merge(m, src)
}
func (m *NodesStatsTranslogStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsTranslogStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsTranslogStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsTranslogStats proto.InternalMessageInfo

func (m *NodesStatsWarmerStats) Reset()      { *m = NodesStatsWarmerStats{} }
func (*NodesStatsWarmerStats) ProtoMessage() {}
func (*NodesStatsWarmerStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{71}
}
func (m *NodesStatsWarmerStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesStatsWarmerStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesStatsWarmerStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesStatsWarmerStats.Merge(m, src)
}
func (m *NodesStatsWarmerStats) XXX_Size() int {
	return m.Size()
}
func (m *NodesStatsWarmerStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesStatsWarmerStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodesStatsWarmerStats proto.InternalMessageInfo

func (m *PGSetting) Reset()      { *m = PGSetting{} }
func (*PGSetting) ProtoMessage() {}
func (*PGSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{72}
}
func (m *PGSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PGSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PGSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PGSetting.Merge(m, src)
}
func (m *PGSetting) XXX_Size() int {
	return m.Size()
}
func (m *PGSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_PGSetting.DiscardUnknown(m)
}

var xxx_messageInfo_PGSetting proto.InternalMessageInfo

func (m *PostgresBackupInfo) Reset()      { *m = PostgresBackupInfo{} }
func (*PostgresBackupInfo) ProtoMessage() {}
func (*PostgresBackupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{73}
}
func (m *PostgresBackupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresBackupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresBackupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresBackupInfo.Merge(m, src)
}
func (m *PostgresBackupInfo) XXX_Size() int {
	return m.Size()
}
func (m *PostgresBackupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresBackupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresBackupInfo proto.InternalMessageInfo

func (m *PostgresConnectionInfo) Reset()      { *m = PostgresConnectionInfo{} }
func (*PostgresConnectionInfo) ProtoMessage() {}
func (*PostgresConnectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{74}
}
func (m *PostgresConnectionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresConnectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresConnectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresConnectionInfo.Merge(m, src)
}
func (m *PostgresConnectionInfo) XXX_Size() int {
	return m.Size()
}
func (m *PostgresConnectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresConnectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresConnectionInfo proto.InternalMessageInfo

func (m *PostgresInsight) Reset()      { *m = PostgresInsight{} }
func (*PostgresInsight) ProtoMessage() {}
func (*PostgresInsight) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{75}
}
func (m *PostgresInsight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresInsight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresInsight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresInsight.Merge(m, src)
}
func (m *PostgresInsight) XXX_Size() int {
	return m.Size()
}
func (m *PostgresInsight) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresInsight.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresInsight proto.InternalMessageInfo

func (m *PostgresInsightList) Reset()      { *m = PostgresInsightList{} }
func (*PostgresInsightList) ProtoMessage() {}
func (*PostgresInsightList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{76}
}
func (m *PostgresInsightList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresInsightList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresInsightList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresInsightList.Merge(m, src)
}
func (m *PostgresInsightList) XXX_Size() int {
	return m.Size()
}
func (m *PostgresInsightList) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresInsightList.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresInsightList proto.InternalMessageInfo

func (m *PostgresInsightSpec) Reset()      { *m = PostgresInsightSpec{} }
func (*PostgresInsightSpec) ProtoMessage() {}
func (*PostgresInsightSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{77}
}
func (m *PostgresInsightSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresInsightSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresInsightSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresInsightSpec.Merge(m, src)
}
func (m *PostgresInsightSpec) XXX_Size() int {
	return m.Size()
}
func (m *PostgresInsightSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresInsightSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresInsightSpec proto.InternalMessageInfo

func (m *PostgresQueries) Reset()      { *m = PostgresQueries{} }
func (*PostgresQueries) ProtoMessage() {}
func (*PostgresQueries) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{78}
}
func (m *PostgresQueries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresQueries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresQueries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresQueries.Merge(m, src)
}
func (m *PostgresQueries) XXX_Size() int {
	return m.Size()
}
func (m *PostgresQueries) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresQueries.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresQueries proto.InternalMessageInfo

func (m *PostgresQueriesList) Reset()      { *m = PostgresQueriesList{} }
func (*PostgresQueriesList) ProtoMessage() {}
func (*PostgresQueriesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{79}
}
func (m *PostgresQueriesList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresQueriesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresQueriesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresQueriesList.Merge(m, src)
}
func (m *PostgresQueriesList) XXX_Size() int {
	return m.Size()
}
func (m *PostgresQueriesList) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresQueriesList.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresQueriesList proto.InternalMessageInfo

func (m *PostgresQueriesSpec) Reset()      { *m = PostgresQueriesSpec{} }
func (*PostgresQueriesSpec) ProtoMessage() {}
func (*PostgresQueriesSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{80}
}
func (m *PostgresQueriesSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresQueriesSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresQueriesSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresQueriesSpec.Merge(m, src)
}
func (m *PostgresQueriesSpec) XXX_Size() int {
	return m.Size()
}
func (m *PostgresQueriesSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresQueriesSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresQueriesSpec proto.InternalMessageInfo

func (m *PostgresQuerySpec) Reset()      { *m = PostgresQuerySpec{} }
func (*PostgresQuerySpec) ProtoMessage() {}
func (*PostgresQuerySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{81}
}
func (m *PostgresQuerySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresQuerySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresQuerySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresQuerySpec.Merge(m, src)
}
func (m *PostgresQuerySpec) XXX_Size() int {
	return m.Size()
}
func (m *PostgresQuerySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresQuerySpec.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresQuerySpec proto.InternalMessageInfo

func (m *PostgresReplicationStatus) Reset()      { *m = PostgresReplicationStatus{} }
func (*PostgresReplicationStatus) ProtoMessage() {}
func (*PostgresReplicationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{82}
}
func (m *PostgresReplicationStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresReplicationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresReplicationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresReplicationStatus.Merge(m, src)
}
func (m *PostgresReplicationStatus) XXX_Size() int {
	return m.Size()
}
func (m *PostgresReplicationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresReplicationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresReplicationStatus proto.InternalMessageInfo

func (m *PostgresSchemaOverview) Reset()      { *m = PostgresSchemaOverview{} }
func (*PostgresSchemaOverview) ProtoMessage() {}
func (*PostgresSchemaOverview) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{83}
}
func (m *PostgresSchemaOverview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresSchemaOverview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresSchemaOverview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresSchemaOverview.Merge(m, src)
}
func (m *PostgresSchemaOverview) XXX_Size() int {
	return m.Size()
}
func (m *PostgresSchemaOverview) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresSchemaOverview.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresSchemaOverview proto.InternalMessageInfo

func (m *PostgresSchemaOverviewList) Reset()      { *m = PostgresSchemaOverviewList{} }
func (*PostgresSchemaOverviewList) ProtoMessage() {}
func (*PostgresSchemaOverviewList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{84}
}
func (m *PostgresSchemaOverviewList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresSchemaOverviewList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresSchemaOverviewList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresSchemaOverviewList.Merge(m, src)
}
func (m *PostgresSchemaOverviewList) XXX_Size() int {
	return m.Size()
}
func (m *PostgresSchemaOverviewList) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresSchemaOverviewList.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresSchemaOverviewList proto.InternalMessageInfo

func (m *PostgresSettings) Reset()      { *m = PostgresSettings{} }
func (*PostgresSettings) ProtoMessage() {}
func (*PostgresSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{85}
}
func (m *PostgresSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresSettings.Merge(m, src)
}
func (m *PostgresSettings) XXX_Size() int {
	return m.Size()
}
func (m *PostgresSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresSettings.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresSettings proto.InternalMessageInfo

func (m *PostgresSettingsList) Reset()      { *m = PostgresSettingsList{} }
func (*PostgresSettingsList) ProtoMessage() {}
func (*PostgresSettingsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{86}
}
func (m *PostgresSettingsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresSettingsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresSettingsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresSettingsList.Merge(m, src)
}
func (m *PostgresSettingsList) XXX_Size() int {
	return m.Size()
}
func (m *PostgresSettingsList) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresSettingsList.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresSettingsList proto.InternalMessageInfo

func (m *PostgresSettingsSpec) Reset()      { *m = PostgresSettingsSpec{} }
func (*PostgresSettingsSpec) ProtoMessage() {}
func (*PostgresSettingsSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{87}
}
func (m *PostgresSettingsSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresSettingsSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresSettingsSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresSettingsSpec.Merge(m, src)
}
func (m *PostgresSettingsSpec) XXX_Size() int {
	return m.Size()
}
func (m *PostgresSettingsSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresSettingsSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresSettingsSpec proto.InternalMessageInfo

func (m *PostgresVacuumInfo) Reset()      { *m = PostgresVacuumInfo{} }
func (*PostgresVacuumInfo) ProtoMessage() {}
func (*PostgresVacuumInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{88}
}
func (m *PostgresVacuumInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresVacuumInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresVacuumInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresVacuumInfo.Merge(m, src)
}
func (m *PostgresVacuumInfo) XXX_Size() int {
	return m.Size()
}
func (m *PostgresVacuumInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresVacuumInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresVacuumInfo proto.InternalMessageInfo

func (m *RedisDatabaseSpec) Reset()      { *m = RedisDatabaseSpec{} }
func (*RedisDatabaseSpec) ProtoMessage() {}
func (*RedisDatabaseSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{89}
}
func (m *RedisDatabaseSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisDatabaseSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RedisDatabaseSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisDatabaseSpec.Merge(m, src)
}
func (m *RedisDatabaseSpec) XXX_Size() int {
	return m.Size()
}
func (m *RedisDatabaseSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisDatabaseSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RedisDatabaseSpec proto.InternalMessageInfo

func (m *RedisInsight) Reset()      { *m = RedisInsight{} }
func (*RedisInsight) ProtoMessage() {}
func (*RedisInsight) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{90}
}
func (m *RedisInsight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisInsight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RedisInsight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisInsight.Merge(m, src)
}
func (m *RedisInsight) XXX_Size() int {
	return m.Size()
}
func (m *RedisInsight) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisInsight.DiscardUnknown(m)
}

var xxx_messageInfo_RedisInsight proto.InternalMessageInfo

func (m *RedisInsightList) Reset()      { *m = RedisInsightList{} }
func (*RedisInsightList) ProtoMessage() {}
func (*RedisInsightList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{91}
}
func (m *RedisInsightList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisInsightList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RedisInsightList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisInsightList.Merge(m, src)
}
func (m *RedisInsightList) XXX_Size() int {
	return m.Size()
}
func (m *RedisInsightList) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisInsightList.DiscardUnknown(m)
}

var xxx_messageInfo_RedisInsightList proto.InternalMessageInfo

func (m *RedisInsightSpec) Reset()      { *m = RedisInsightSpec{} }
func (*RedisInsightSpec) ProtoMessage() {}
func (*RedisInsightSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{92}
}
func (m *RedisInsightSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisInsightSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RedisInsightSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisInsightSpec.Merge(m, src)
}
func (m *RedisInsightSpec) XXX_Size() int {
	return m.Size()
}
func (m *RedisInsightSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisInsightSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RedisInsightSpec proto.InternalMessageInfo

func (m *RedisQueries) Reset()      { *m = RedisQueries{} }
func (*RedisQueries) ProtoMessage() {}
func (*RedisQueries) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{93}
}
func (m *RedisQueries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisQueries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RedisQueries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisQueries.Merge(m, src)
}
func (m *RedisQueries) XXX_Size() int {
	return m.Size()
}
func (m *RedisQueries) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisQueries.DiscardUnknown(m)
}

var xxx_messageInfo_RedisQueries proto.InternalMessageInfo

func (m *RedisQueriesList) Reset()      { *m = RedisQueriesList{} }
func (*RedisQueriesList) ProtoMessage() {}
func (*RedisQueriesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{94}
}
func (m *RedisQueriesList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisQueriesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RedisQueriesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisQueriesList.Merge(m, src)
}
func (m *RedisQueriesList) XXX_Size() int {
	return m.Size()
}
func (m *RedisQueriesList) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisQueriesList.DiscardUnknown(m)
}

var xxx_messageInfo_RedisQueriesList proto.InternalMessageInfo

func (m *RedisQueriesSpec) Reset()      { *m = RedisQueriesSpec{} }
func (*RedisQueriesSpec) ProtoMessage() {}
func (*RedisQueriesSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{95}
}
func (m *RedisQueriesSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisQueriesSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RedisQueriesSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisQueriesSpec.Merge(m, src)
}
func (m *RedisQueriesSpec) XXX_Size() int {
	return m.Size()
}
func (m *RedisQueriesSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisQueriesSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RedisQueriesSpec proto.InternalMessageInfo

func (m *RedisQuerySpec) Reset()      { *m = RedisQuerySpec{} }
func (*RedisQuerySpec) ProtoMessage() {}
func (*RedisQuerySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{96}
}
func (m *RedisQuerySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisQuerySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RedisQuerySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisQuerySpec.Merge(m, src)
}
func (m *RedisQuerySpec) XXX_Size() int {
	return m.Size()
}
func (m *RedisQuerySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisQuerySpec.DiscardUnknown(m)
}

var xxx_messageInfo_RedisQuerySpec proto.InternalMessageInfo

func (m *RedisSchemaOverview) Reset()      { *m = RedisSchemaOverview{} }
func (*RedisSchemaOverview) ProtoMessage() {}
func (*RedisSchemaOverview) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{97}
}
func (m *RedisSchemaOverview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisSchemaOverview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RedisSchemaOverview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisSchemaOverview.Merge(m, src)
}
func (m *RedisSchemaOverview) XXX_Size() int {
	return m.Size()
}
func (m *RedisSchemaOverview) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisSchemaOverview.DiscardUnknown(m)
}

var xxx_messageInfo_RedisSchemaOverview proto.InternalMessageInfo

func (m *RedisSchemaOverviewList) Reset()      { *m = RedisSchemaOverviewList{} }
func (*RedisSchemaOverviewList) ProtoMessage() {}
func (*RedisSchemaOverviewList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{98}
}
func (m *RedisSchemaOverviewList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisSchemaOverviewList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RedisSchemaOverviewList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisSchemaOverviewList.Merge(m, src)
}
func (m *RedisSchemaOverviewList) XXX_Size() int {
	return m.Size()
}
func (m *RedisSchemaOverviewList) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisSchemaOverviewList.DiscardUnknown(m)
}

var xxx_messageInfo_RedisSchemaOverviewList proto.InternalMessageInfo

func (m *RedisSchemaOverviewSpec) Reset()      { *m = RedisSchemaOverviewSpec{} }
func (*RedisSchemaOverviewSpec) ProtoMessage() {}
func (*RedisSchemaOverviewSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_28547d2d7dcabf55, []int{99}
}
func (m *RedisSchemaOverviewSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisSchemaOverviewSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RedisSchemaOverviewSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisSchemaOverviewSpec.Merge(m, src)
}
func (m *RedisSchemaOverviewSpec) XXX_Size() int {
	return m.Size()
}
func (m *RedisSchemaOverviewSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisSchemaOverviewSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RedisSchemaOverviewSpec proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ElasticsearchClusterHealth)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.ElasticsearchClusterHealth")
	proto.RegisterType((*ElasticsearchIndexSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.ElasticsearchIndexSpec")
	proto.RegisterType((*ElasticsearchInsight)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.ElasticsearchInsight")
	proto.RegisterType((*ElasticsearchInsightList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.ElasticsearchInsightList")
	proto.RegisterType((*ElasticsearchInsightSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.ElasticsearchInsightSpec")
	proto.RegisterType((*ElasticsearchNodesStatSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.ElasticsearchNodesStatSpec")
	proto.RegisterType((*ElasticsearchNodesStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.ElasticsearchNodesStats")
	proto.RegisterType((*ElasticsearchNodesStatsList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.ElasticsearchNodesStatsList")
	proto.RegisterType((*ElasticsearchNodesStatsSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.ElasticsearchNodesStatsSpec")
	proto.RegisterType((*ElasticsearchNodesStatsStatus)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.ElasticsearchNodesStatsStatus")
	proto.RegisterType((*ElasticsearchSchemaOverview)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.ElasticsearchSchemaOverview")
	proto.RegisterType((*ElasticsearchSchemaOverviewList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.ElasticsearchSchemaOverviewList")
	proto.RegisterType((*ElasticsearchSchemaOverviewSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.ElasticsearchSchemaOverviewSpec")
	proto.RegisterType((*GenericDatabaseSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.GenericDatabaseSpec")
	proto.RegisterType((*GenericSchemaOverviewSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.GenericSchemaOverviewSpec")
	proto.RegisterType((*MariaDBInsight)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MariaDBInsight")
	proto.RegisterType((*MariaDBInsightList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MariaDBInsightList")
	proto.RegisterType((*MariaDBInsightSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MariaDBInsightSpec")
	proto.RegisterType((*MariaDBQueries)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MariaDBQueries")
	proto.RegisterType((*MariaDBQueriesList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MariaDBQueriesList")
	proto.RegisterType((*MariaDBQueriesSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MariaDBQueriesSpec")
	proto.RegisterType((*MariaDBQuerySpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MariaDBQuerySpec")
	proto.RegisterType((*MariaDBSchemaOverview)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MariaDBSchemaOverview")
	proto.RegisterType((*MariaDBSchemaOverviewList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MariaDBSchemaOverviewList")
	proto.RegisterType((*MongoDBCollectionSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBCollectionSpec")
	proto.RegisterType((*MongoDBConnectionsInfo)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBConnectionsInfo")
	proto.RegisterType((*MongoDBDatabaseStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBDatabaseStats")
	proto.RegisterType((*MongoDBInsight)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBInsight")
	proto.RegisterType((*MongoDBInsightList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBInsightList")
	proto.RegisterType((*MongoDBInsightSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBInsightSpec")
	proto.RegisterType((*MongoDBQueries)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBQueries")
	proto.RegisterType((*MongoDBQueriesList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBQueriesList")
	proto.RegisterType((*MongoDBQueriesSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBQueriesSpec")
	proto.RegisterType((*MongoDBQuerySpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBQuerySpec")
	proto.RegisterType((*MongoDBReplicaSetInfo)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBReplicaSetInfo")
	proto.RegisterType((*MongoDBSchemaOverview)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBSchemaOverview")
	proto.RegisterType((*MongoDBSchemaOverviewList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBSchemaOverviewList")
	proto.RegisterType((*MongoDBSchemaOverviewSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBSchemaOverviewSpec")
	proto.RegisterType((*MongoDBShardsInfo)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MongoDBShardsInfo")
	proto.RegisterType((*MySQLInsight)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MySQLInsight")
	proto.RegisterType((*MySQLInsightList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MySQLInsightList")
	proto.RegisterType((*MySQLInsightSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MySQLInsightSpec")
	proto.RegisterType((*MySQLQueries)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MySQLQueries")
	proto.RegisterType((*MySQLQueriesList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MySQLQueriesList")
	proto.RegisterType((*MySQLQueriesSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MySQLQueriesSpec")
	proto.RegisterType((*MySQLQuerySpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MySQLQuerySpec")
	proto.RegisterType((*MySQLSchemaOverview)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MySQLSchemaOverview")
	proto.RegisterType((*MySQLSchemaOverviewList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.MySQLSchemaOverviewList")
	proto.RegisterType((*NodesStatsCompletionFields)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsCompletionFields")
	proto.RegisterType((*NodesStatsCompletionStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsCompletionStats")
	proto.RegisterType((*NodesStatsDocsStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsDocsStats")
	proto.RegisterType((*NodesStatsFieldDataFields)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsFieldDataFields")
	proto.RegisterType((*NodesStatsFielddataStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsFielddataStats")
	proto.RegisterType((*NodesStatsFlushStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsFlushStats")
	proto.RegisterType((*NodesStatsGetStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsGetStats")
	proto.RegisterType((*NodesStatsIndex)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsIndex")
	proto.RegisterMapType((map[string]NodesStatsIndex)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsIndex.IndicesEntry")
	proto.RegisterMapType((map[string]NodesStatsIndex)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsIndex.ShardsEntry")
	proto.RegisterType((*NodesStatsIndexingStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsIndexingStats")
	proto.RegisterMapType((map[string]NodesStatsIndexingStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsIndexingStats.TypesEntry")
	proto.RegisterType((*NodesStatsMergeStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsMergeStats")
	proto.RegisterType((*NodesStatsNodeOS)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsNodeOS")
	proto.RegisterType((*NodesStatsNodeOSCPU)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsNodeOSCPU")
	proto.RegisterMapType((map[string]float64)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsNodeOSCPU.LoadAverageEntry")
	proto.RegisterType((*NodesStatsNodeOSMem)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsNodeOSMem")
	proto.RegisterType((*NodesStatsNodeOSSwap)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsNodeOSSwap")
	proto.RegisterType((*NodesStatsQueryCacheStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsQueryCacheStats")
	proto.RegisterType((*NodesStatsRecoveryStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsRecoveryStats")
	proto.RegisterType((*NodesStatsRefreshStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsRefreshStats")
	proto.RegisterType((*NodesStatsRequestCacheStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsRequestCacheStats")
	proto.RegisterType((*NodesStatsSearchStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsSearchStats")
	proto.RegisterMapType((map[string]NodesStatsSearchStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsSearchStats.GroupsEntry")
	proto.RegisterType((*NodesStatsSegmentsStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsSegmentsStats")
	proto.RegisterType((*NodesStatsShardCountStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsShardCountStats")
	proto.RegisterType((*NodesStatsStoreStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsStoreStats")
	proto.RegisterType((*NodesStatsTranslogStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsTranslogStats")
	proto.RegisterType((*NodesStatsWarmerStats)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.NodesStatsWarmerStats")
	proto.RegisterType((*PGSetting)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PGSetting")
	proto.RegisterType((*PostgresBackupInfo)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresBackupInfo")
	proto.RegisterType((*PostgresConnectionInfo)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresConnectionInfo")
	proto.RegisterType((*PostgresInsight)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresInsight")
	proto.RegisterType((*PostgresInsightList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresInsightList")
	proto.RegisterType((*PostgresInsightSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresInsightSpec")
	proto.RegisterType((*PostgresQueries)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresQueries")
	proto.RegisterType((*PostgresQueriesList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresQueriesList")
	proto.RegisterType((*PostgresQueriesSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresQueriesSpec")
	proto.RegisterType((*PostgresQuerySpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresQuerySpec")
	proto.RegisterType((*PostgresReplicationStatus)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresReplicationStatus")
	proto.RegisterType((*PostgresSchemaOverview)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresSchemaOverview")
	proto.RegisterType((*PostgresSchemaOverviewList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresSchemaOverviewList")
	proto.RegisterType((*PostgresSettings)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresSettings")
	proto.RegisterType((*PostgresSettingsList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresSettingsList")
	proto.RegisterType((*PostgresSettingsSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresSettingsSpec")
	proto.RegisterType((*PostgresVacuumInfo)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.PostgresVacuumInfo")
	proto.RegisterType((*RedisDatabaseSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.RedisDatabaseSpec")
	proto.RegisterType((*RedisInsight)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.RedisInsight")
	proto.RegisterType((*RedisInsightList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.RedisInsightList")
	proto.RegisterType((*RedisInsightSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.RedisInsightSpec")
	proto.RegisterType((*RedisQueries)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.RedisQueries")
	proto.RegisterType((*RedisQueriesList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.RedisQueriesList")
	proto.RegisterType((*RedisQueriesSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.RedisQueriesSpec")
	proto.RegisterType((*RedisQuerySpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.RedisQuerySpec")
	proto.RegisterType((*RedisSchemaOverview)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.RedisSchemaOverview")
	proto.RegisterType((*RedisSchemaOverviewList)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.RedisSchemaOverviewList")
	proto.RegisterType((*RedisSchemaOverviewSpec)(nil), "kubedb.dev.apimachinery.apis.ui.v1alpha1.RedisSchemaOverviewSpec")
}

func init() {
	proto.RegisterFile("kubedb.dev/apimachinery/apis/ui/v1alpha1/generated.proto", fileDescriptor_28547d2d7dcabf55)
}

var fileDescriptor_28547d2d7dcabf55 = []byte{
	// 7208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x4b, 0x6c, 0x1c, 0xc9,
	0x79, 0xf0, 0xce, 0x0c, 0x9f, 0x35, 0x7c, 0x16, 0x29, 0x89, 0xa2, 0x76, 0x25, 0xed, 0xf8, 0xb7,
	0xff, 0xdd, 0x20, 0x4b, 0xd9, 0x72, 0x6c, 0x4b, 0x5a, 0xad, 0x6c, 0x0e, 0x49, 0x69, 0xb9, 0x26,
	0x25, 0xaa, 0x86, 0x92, 0x62, 0x7b, 0x6d, 0x6e, 0xb3, 0xbb, 0x38, 0xec, 0xe5, 0x4c, 0xf7, 0xa8,
	0xbb, 0x87, 0x22, 0xd7, 0x0e, 0xe0, 0x5c, 0xf2, 0x40, 0x82, 0xc4, 0x41, 0x0e, 0x89, 0x01, 0x5f,
	0x82, 0x20, 0x47, 0x03, 0xc9, 0x21, 0xc8, 0x0b, 0x41, 0x4e, 0x09, 0x9c, 0x00, 0x09, 0x9c, 0x87,
	0x03, 0x07, 0x49, 0xb4, 0x5e, 0x19, 0xbe, 0xc4, 0xb9, 0x26, 0x40, 0x9c, 0x43, 0x82, 0xfa, 0xea,
	0xd1, 0x55, 0xd5, 0x3d, 0x24, 0x67, 0x98, 0xe5, 0xae, 0x8c, 0x3d, 0x71, 0xba, 0xbe, 0x67, 0x7d,
	0x55, 0xfd, 0xf5, 0xf7, 0x7d, 0xf5, 0x20, 0xba, 0xb2, 0xd3, 0xde, 0xa4, 0xde, 0xe6, 0x9c, 0x47,
	0x77, 0x2f, 0x39, 0x2d, 0xbf, 0xe9, 0xb8, 0xdb, 0x7e, 0x40, 0xa3, 0x7d, 0xf6, 0x10, 0x5f, 0x6a,
	0xfb, 0x97, 0x76, 0x3f, 0xe6, 0x34, 0x5a, 0xdb, 0xce, 0xc7, 0x2e, 0xd5, 0x69, 0x40, 0x23, 0x27,
	0xa1, 0xde, 0x5c, 0x2b, 0x0a, 0x93, 0x10, 0xbf, 0x90, 0x52, 0xce, 0xe9, 0x94, 0xec, 0x21, 0x9e,
	0x6b, 0xfb, 0x73, 0x92, 0x72, 0xf6, 0xa5, 0xba, 0x9f, 0x6c, 0xb7, 0x37, 0xe7, 0xdc, 0xb0, 0x79,
	0xa9, 0x1e, 0xd6, 0xc3, 0x4b, 0xc0, 0x60, 0xb3, 0xbd, 0x05, 0x4f, 0xf0, 0x00, 0xbf, 0x38, 0xe3,
	0xd9, 0x9f, 0xda, 0xb9, 0x12, 0xcf, 0xf9, 0xa1, 0xa9, 0x4e, 0x6b, 0xa7, 0xce, 0x55, 0x6a, 0xd2,
	0xc4, 0xb9, 0xb4, 0x9b, 0x51, 0x67, 0xf6, 0x93, 0x9d, 0xa8, 0xa2, 0x76, 0x90, 0xf8, 0x4d, 0x7a,
	0x29, 0x76, 0xb7, 0x69, 0xd3, 0xc9, 0xd0, 0x5d, 0x3f, 0xd0, 0x00, 0x1c, 0x28, 0x8d, 0x70, 0x39,
	0x43, 0x7d, 0x35, 0xf6, 0xeb, 0xf1, 0x9c, 0x10, 0xed, 0x86, 0x41, 0x12, 0x85, 0x8d, 0x06, 0x8d,
	0x5e, 0x92, 0x42, 0x99, 0x02, 0x20, 0x98, 0xda, 0xa4, 0x95, 0x7f, 0x1a, 0x42, 0xb3, 0x4b, 0x0d,
	0x27, 0x4e, 0x7c, 0x37, 0xa6, 0x4e, 0xe4, 0x6e, 0x2f, 0x34, 0xda, 0x71, 0x42, 0xa3, 0x57, 0xa9,
	0xd3, 0x48, 0xb6, 0xf1, 0x2a, 0x9a, 0x72, 0xdc, 0xc4, 0xdf, 0xa5, 0x6b, 0x91, 0xdf, 0x74, 0xa2,
	0xfd, 0xda, 0xb6, 0x13, 0x79, 0xf1, 0x4c, 0xe1, 0x62, 0xe1, 0x85, 0xfe, 0xea, 0xb9, 0x6f, 0x3d,
	0xbe, 0xf0, 0xcc, 0x93, 0xc7, 0x17, 0xa6, 0xe6, 0xb3, 0x28, 0x24, 0x8f, 0x0e, 0x5f, 0x41, 0x23,
	0xbc, 0x59, 0xf0, 0x29, 0x02, 0x9f, 0x69, 0xc1, 0x67, 0x64, 0x5e, 0x83, 0x11, 0x03, 0x13, 0x53,
	0x74, 0x4e, 0x7f, 0x5e, 0xa3, 0x91, 0x4b, 0x83, 0x64, 0x3e, 0xbe, 0xdd, 0x6e, 0x6e, 0xd2, 0x68,
	0xa6, 0x04, 0x8c, 0x3e, 0x24, 0x18, 0x9d, 0x9b, 0xef, 0x8c, 0x4a, 0x0e, 0xe2, 0x83, 0x3f, 0x81,
	0xca, 0x2e, 0x37, 0xc0, 0x6d, 0xa7, 0x49, 0x67, 0xfa, 0x2e, 0x16, 0x5e, 0x18, 0xae, 0x4e, 0x09,
	0xb6, 0xe5, 0x85, 0x14, 0x44, 0x74, 0x3c, 0xfc, 0x39, 0x74, 0xc6, 0xa3, 0x0d, 0x67, 0x9f, 0x7a,
	0xf7, 0x02, 0x27, 0x8e, 0xfd, 0x7a, 0x40, 0x3d, 0xd1, 0xc5, 0x7e, 0xd0, 0xec, 0x82, 0x60, 0x71,
	0x66, 0x31, 0x1f, 0x8d, 0x74, 0xa2, 0xc7, 0xaf, 0x21, 0xec, 0x07, 0x7e, 0xe2, 0x3b, 0x0d, 0xff,
	0x2d, 0x3f, 0xa8, 0x0b, 0xae, 0x03, 0xc0, 0x75, 0x56, 0x70, 0xc5, 0xcb, 0x19, 0x0c, 0x92, 0x43,
	0x85, 0x6f, 0xa1, 0xc9, 0x00, 0xfa, 0x79, 0x67, 0x6b, 0xd1, 0x49, 0x9c, 0xdb, 0xa1, 0x47, 0xe3,
	0x99, 0x41, 0x60, 0x75, 0x56, 0xb0, 0x9a, 0xbc, 0x6d, 0x23, 0x90, 0x2c, 0x0d, 0xae, 0xa1, 0x53,
	0xb2, 0x71, 0x39, 0xb8, 0xd9, 0xf0, 0xeb, 0xdb, 0xc9, 0x4d, 0x9a, 0xb8, 0xdb, 0x33, 0x43, 0xc0,
	0xec, 0x39, 0xc1, 0xec, 0xd4, 0xed, 0x3c, 0x24, 0x92, 0x4f, 0x8b, 0x5f, 0x46, 0xa3, 0x12, 0xc0,
	0x35, 0x1b, 0x06, 0x66, 0xa7, 0x04, 0xb3, 0xd1, 0xdb, 0x3a, 0x90, 0x98, 0xb8, 0x78, 0x0d, 0x4d,
	0xcb, 0x86, 0x35, 0x1a, 0x78, 0x7e, 0x50, 0x5f, 0x77, 0xe2, 0x9d, 0x78, 0x06, 0x01, 0x8f, 0x67,
	0x05, 0x8f, 0xe9, 0xdb, 0x39, 0x38, 0x24, 0x97, 0x12, 0x2f, 0xa2, 0x89, 0x88, 0x36, 0x42, 0xd7,
	0x49, 0x52, 0xb3, 0x97, 0x81, 0xdb, 0x8c, 0xe0, 0x36, 0x41, 0x2c, 0x38, 0xc9, 0x50, 0xb0, 0x4e,
	0x89, 0x89, 0x52, 0x4b, 0x9c, 0xa4, 0x1d, 0xcf, 0x8c, 0xc0, 0x94, 0x52, 0x9d, 0x5a, 0xd0, 0x81,
	0xc4, 0xc4, 0x65, 0x2a, 0xb4, 0xed, 0xf9, 0x34, 0x6a, 0xaa, 0x90, 0x99, 0x48, 0x19, 0x0a, 0xfc,
	0x08, 0x3d, 0x9f, 0x38, 0xf1, 0xce, 0xaa, 0xb3, 0xf7, 0xc0, 0xf1, 0x99, 0x6a, 0xcb, 0xc1, 0xdd,
	0x36, 0x6d, 0xd3, 0x55, 0xbf, 0xd1, 0xf0, 0x6b, 0xd4, 0x0d, 0x03, 0x2f, 0x9e, 0x19, 0x03, 0xb6,
	0x2f, 0x0a, 0xb6, 0xcf, 0xaf, 0x1f, 0x46, 0x40, 0x0e, 0xe7, 0x59, 0xf9, 0xaf, 0x02, 0x3a, 0x6d,
	0xf8, 0x96, 0xe5, 0xc0, 0xa3, 0x7b, 0xb5, 0x16, 0x75, 0xf1, 0x25, 0x34, 0xec, 0xb3, 0x07, 0x78,
	0xcb, 0x0a, 0x60, 0x92, 0x49, 0x21, 0x7b, 0x78, 0x59, 0x02, 0x48, 0x8a, 0xc3, 0xde, 0xb0, 0x96,
	0x70, 0x25, 0x49, 0x18, 0xd1, 0x9a, 0xff, 0x16, 0x5d, 0x0e, 0xaa, 0xfb, 0x09, 0xe5, 0x4e, 0x64,
	0x38, 0x7d, 0xc3, 0xd6, 0xf2, 0xd1, 0x48, 0x27, 0x7a, 0x36, 0x99, 0x93, 0x30, 0x71, 0x1a, 0x19,
	0xc6, 0x25, 0x60, 0xac, 0x26, 0xf3, 0x7a, 0x1e, 0x12, 0xc9, 0xa7, 0xad, 0xfc, 0x65, 0x11, 0x4d,
	0x5b, 0x7d, 0x8f, 0xd9, 0x54, 0xc7, 0x6f, 0xa0, 0x21, 0xf6, 0xf1, 0xf0, 0x9c, 0xc4, 0x81, 0x8e,
	0x97, 0x2f, 0x7f, 0x54, 0x78, 0x6e, 0xf3, 0xfb, 0xd5, 0xda, 0xa9, 0xf3, 0x6f, 0x18, 0xc3, 0x9e,
	0xdb, 0xfd, 0xd8, 0xdc, 0x9d, 0xcd, 0x37, 0xa9, 0x9b, 0xac, 0xd2, 0xc4, 0xa9, 0x62, 0xa1, 0x12,
	0x4a, 0xdb, 0x88, 0xe2, 0x8a, 0x3d, 0xd4, 0x17, 0xb7, 0xa8, 0x0b, 0x76, 0x29, 0x5f, 0xae, 0xce,
	0x1d, 0xf5, 0x0b, 0x39, 0x97, 0xa7, 0x2f, 0x1b, 0xad, 0xea, 0x88, 0x90, 0xd7, 0xc7, 0x9e, 0x08,
	0x70, 0xc7, 0x3e, 0x1a, 0x88, 0xf9, 0x8c, 0x2e, 0x81, 0x9c, 0xf9, 0x83, 0xe5, 0x08, 0xa0, 0xfc,
	0x84, 0x99, 0xb2, 0xf8, 0x74, 0xaf, 0x8e, 0x09, 0x31, 0x03, 0xe2, 0x6d, 0x10, 0x02, 0x2a, 0xff,
	0x5a, 0x40, 0x33, 0x79, 0xba, 0xad, 0xf8, 0x71, 0x82, 0x5f, 0xcf, 0xd8, 0x73, 0xee, 0x68, 0xf6,
	0x64, 0xd4, 0x60, 0xcd, 0x09, 0x21, 0x76, 0x48, 0xb6, 0x68, 0xb6, 0x74, 0x51, 0xbf, 0x9f, 0xd0,
	0x26, 0x9b, 0x64, 0xa5, 0x17, 0xca, 0x97, 0x6f, 0x1c, 0xcf, 0x98, 0xd5, 0x51, 0x21, 0xaa, 0x7f,
	0x99, 0x31, 0x25, 0x9c, 0x77, 0xe5, 0xd7, 0x8b, 0xf9, 0xfd, 0x83, 0x37, 0xe5, 0x45, 0x34, 0xb8,
	0x4b, 0xa3, 0xd8, 0x0f, 0x03, 0xf1, 0x9e, 0x8c, 0x0b, 0x1e, 0x83, 0xf7, 0x79, 0x33, 0x91, 0x70,
	0xfc, 0x11, 0x35, 0x24, 0xfc, 0x95, 0xe8, 0x60, 0x4f, 0x7c, 0x11, 0xf5, 0x35, 0x43, 0x8f, 0x8a,
	0xf9, 0xad, 0x06, 0x77, 0x35, 0xf4, 0x28, 0x01, 0x08, 0xfe, 0xd9, 0x82, 0x72, 0x5b, 0x3c, 0x10,
	0x80, 0x2f, 0x61, 0xf9, 0xf2, 0x62, 0x8f, 0xfd, 0x37, 0x82, 0x8a, 0x8c, 0xf3, 0xe3, 0xcd, 0xc4,
	0x94, 0x58, 0xf9, 0xb7, 0x92, 0x15, 0x99, 0x80, 0xa3, 0x67, 0x5d, 0x01, 0xbb, 0x3c, 0x40, 0xc3,
	0x2c, 0xb6, 0x89, 0x13, 0xa7, 0xd9, 0x12, 0x03, 0xff, 0x13, 0x47, 0x1b, 0xf8, 0x75, 0xbf, 0x49,
	0xab, 0xa3, 0xcc, 0xd3, 0xac, 0x4b, 0x06, 0x24, 0xe5, 0xc5, 0xac, 0x13, 0x30, 0xaf, 0x54, 0x34,
	0xad, 0x03, 0x0e, 0x09, 0x20, 0xf8, 0x3a, 0x1a, 0x4b, 0x22, 0x27, 0x88, 0x5b, 0x61, 0x94, 0x6c,
	0x38, 0x9e, 0x17, 0x09, 0x4b, 0xaa, 0x7e, 0xad, 0x4b, 0xe8, 0xbc, 0xe7, 0x45, 0x64, 0x34, 0xd1,
	0x1f, 0x19, 0xff, 0xed, 0x30, 0x4e, 0x44, 0x6c, 0xa1, 0xf8, 0xbf, 0x1a, 0xc6, 0x09, 0x01, 0x08,
	0x9e, 0x45, 0x45, 0xbf, 0x05, 0x81, 0xc3, 0x70, 0x15, 0x09, 0x78, 0x71, 0x79, 0x8d, 0x14, 0xfd,
	0x16, 0xbe, 0x80, 0xfa, 0xa3, 0xb0, 0x41, 0x59, 0x04, 0x50, 0x7a, 0x61, 0xb8, 0x3a, 0xcc, 0x26,
	0x13, 0x61, 0x0d, 0x84, 0xb7, 0xe3, 0x37, 0xd0, 0xa0, 0x1f, 0x78, 0xbe, 0x2b, 0xbe, 0xec, 0xe5,
	0xcb, 0x57, 0x8f, 0x3e, 0x66, 0xca, 0xc2, 0x31, 0xf8, 0xe0, 0x6a, 0x99, 0x4d, 0xb3, 0x65, 0xce,
	0x8d, 0x48, 0xb6, 0x98, 0xa0, 0x62, 0x18, 0xc3, 0x97, 0xbe, 0x7c, 0xf9, 0x5a, 0x2f, 0xcc, 0xd9,
	0xaf, 0x3b, 0xb5, 0xea, 0x00, 0xeb, 0xd6, 0x9d, 0x1a, 0x29, 0x86, 0x71, 0xe5, 0x3b, 0x45, 0x74,
	0x26, 0x7f, 0xb0, 0xe3, 0x13, 0xf0, 0x98, 0x75, 0xc3, 0x63, 0x2e, 0xf5, 0x38, 0xc9, 0x53, 0x95,
	0x3b, 0x3a, 0xcd, 0xd0, 0x72, 0x9a, 0xb7, 0x8e, 0x2f, 0xea, 0x60, 0xd7, 0xf9, 0xfd, 0x02, 0x3a,
	0xd7, 0x81, 0xf2, 0x04, 0xbc, 0xe7, 0x96, 0xe9, 0x3d, 0xe7, 0x8f, 0xdd, 0xdb, 0x0e, 0x0e, 0xf4,
	0x17, 0x3a, 0xf7, 0xb2, 0xc6, 0xbf, 0x55, 0xfd, 0x01, 0x44, 0x94, 0x05, 0xd0, 0x63, 0xf1, 0xb8,
	0x7a, 0xc0, 0xf8, 0x2a, 0x55, 0x78, 0x3c, 0xca, 0x25, 0x54, 0x2e, 0xa0, 0xe7, 0x0e, 0x1c, 0xa9,
	0xca, 0xbf, 0xdb, 0xba, 0xd6, 0x20, 0x23, 0xbc, 0xb3, 0x4b, 0xa3, 0x5d, 0x9f, 0x3e, 0x3a, 0x81,
	0xd9, 0xbe, 0x63, 0xcc, 0xf6, 0xe5, 0x1e, 0x8d, 0x61, 0xaa, 0xdd, 0x69, 0xc6, 0x57, 0x7e, 0x58,
	0x40, 0x17, 0x0e, 0xa0, 0x3b, 0x81, 0x49, 0xf8, 0xa6, 0x39, 0x09, 0x97, 0xfe, 0x4f, 0xfa, 0xdb,
	0x61, 0x22, 0xfe, 0xca, 0xc1, 0xbd, 0x85, 0xc9, 0xb8, 0x93, 0x3a, 0x68, 0x3e, 0x1d, 0x3f, 0xd3,
	0x73, 0x50, 0x21, 0xa2, 0xe9, 0x34, 0x24, 0xb0, 0x7d, 0x75, 0xe5, 0x2f, 0x0a, 0x68, 0xea, 0x16,
	0x4b, 0xf9, 0x7d, 0x97, 0x65, 0x6f, 0x9b, 0x4e, 0x4c, 0x41, 0x89, 0x2b, 0x68, 0xc4, 0x13, 0xcf,
	0x5a, 0x08, 0xae, 0x12, 0xf1, 0x45, 0x0d, 0x46, 0x0c, 0x4c, 0x16, 0xb9, 0x27, 0xce, 0x66, 0x83,
	0x93, 0x15, 0xcd, 0xc8, 0x7d, 0x5d, 0x02, 0x48, 0x8a, 0xc3, 0x92, 0x18, 0x78, 0xc8, 0x46, 0xd6,
	0x2a, 0x89, 0x59, 0xb7, 0xe0, 0x24, 0x43, 0x51, 0xf9, 0xa5, 0x02, 0x3a, 0x2b, 0x3a, 0x92, 0x63,
	0xd3, 0x00, 0x0d, 0x4b, 0x25, 0xa5, 0x55, 0x5f, 0x39, 0xba, 0x55, 0x73, 0x0c, 0x94, 0xf6, 0x49,
	0xb6, 0xc6, 0x24, 0x15, 0x51, 0xf9, 0x83, 0x22, 0x1a, 0x5b, 0x75, 0x22, 0xdf, 0x59, 0xac, 0x9e,
	0x5c, 0x5c, 0xff, 0x25, 0xe3, 0xbd, 0xbd, 0x7e, 0xf4, 0xfe, 0x99, 0x9a, 0x76, 0xfc, 0x38, 0xb9,
	0xd6, 0xc7, 0xe9, 0xe5, 0xee, 0x22, 0x7a, 0x21, 0xe5, 0x90, 0x0f, 0xd2, 0xdf, 0x16, 0x10, 0x36,
	0xf5, 0x39, 0x01, 0x17, 0xf0, 0x45, 0xd3, 0x05, 0x5c, 0xe9, 0xd5, 0x74, 0x1d, 0xde, 0xfa, 0x5f,
	0x1b, 0xb4, 0xfb, 0xf4, 0xde, 0x45, 0xee, 0x37, 0xd0, 0x58, 0xd3, 0xd9, 0x5b, 0x08, 0x83, 0x80,
	0xba, 0x89, 0x1f, 0x06, 0x31, 0xc4, 0x99, 0xfd, 0xd5, 0xd3, 0x02, 0x77, 0x6c, 0xd5, 0x80, 0x12,
	0x0b, 0x1b, 0xbf, 0x86, 0x70, 0xd3, 0xd9, 0xbb, 0x17, 0x53, 0x4f, 0xe7, 0xd1, 0x6f, 0x96, 0x9b,
	0x56, 0x33, 0x18, 0x24, 0x87, 0x8a, 0xb9, 0x8a, 0x87, 0x6d, 0x1a, 0x73, 0x16, 0xbc, 0x62, 0xa5,
	0x5e, 0xab, 0xbb, 0x12, 0x40, 0x52, 0x1c, 0xbc, 0x83, 0x9e, 0x6b, 0x84, 0x41, 0xfd, 0x6e, 0x9b,
	0x46, 0xfb, 0x2c, 0x36, 0x5f, 0xdf, 0x8e, 0x68, 0xbc, 0x1d, 0x36, 0x3c, 0x59, 0xa5, 0x60, 0x11,
	0x6d, 0xa1, 0xfa, 0x61, 0xc1, 0xe4, 0xb9, 0x95, 0x83, 0x90, 0xc9, 0xc1, 0xbc, 0xf0, 0x2a, 0x9a,
	0x92, 0x75, 0x9f, 0x5a, 0x23, 0x7c, 0xc4, 0x10, 0x7d, 0x1a, 0x8b, 0x0a, 0x96, 0x2a, 0x6d, 0xde,
	0xce, 0xa2, 0x90, 0x3c, 0x3a, 0x66, 0x78, 0x67, 0x33, 0x8c, 0x12, 0xea, 0x2d, 0x34, 0x7c, 0x1a,
	0x24, 0xb2, 0x7c, 0xa5, 0x0c, 0x3f, 0x6f, 0x40, 0x89, 0x85, 0xcd, 0x0c, 0x2f, 0x5b, 0x34, 0xc3,
	0x23, 0xd3, 0xf0, 0xf3, 0x19, 0x0c, 0x92, 0x43, 0x85, 0x5f, 0x46, 0xa3, 0xc9, 0x76, 0x44, 0x1d,
	0x2f, 0x5e, 0x70, 0xdc, 0x6d, 0xea, 0x89, 0xba, 0x55, 0x9a, 0x9f, 0xe8, 0x40, 0x62, 0xe2, 0x82,
	0xbf, 0x16, 0x0d, 0x9c, 0x25, 0xf5, 0xa0, 0x68, 0xa5, 0x15, 0x9d, 0xd6, 0x2d, 0x38, 0xc9, 0x50,
	0x30, 0x73, 0xc8, 0xb6, 0x88, 0x3a, 0x8c, 0xc7, 0xa8, 0x69, 0x8e, 0x75, 0x03, 0x4a, 0x2c, 0x6c,
	0x8d, 0x9e, 0xb4, 0x83, 0xc0, 0x0f, 0xea, 0xa2, 0x42, 0x65, 0xd3, 0x0b, 0x28, 0xb1, 0xb0, 0x2b,
	0x7f, 0x57, 0x50, 0x1e, 0x5a, 0x8e, 0xd0, 0xfb, 0xdf, 0x43, 0x0b, 0x4d, 0x3b, 0x06, 0x53, 0x9a,
	0xf3, 0x14, 0xa8, 0x4f, 0x83, 0xf3, 0x14, 0xaa, 0x76, 0x70, 0x9e, 0x5f, 0xb6, 0xbb, 0x04, 0xbe,
	0x93, 0xa2, 0xc1, 0x87, 0xe2, 0x85, 0xe4, 0x9f, 0xf3, 0x6b, 0x3d, 0x89, 0xdd, 0x37, 0xc3, 0x23,
	0xf9, 0x02, 0x4b, 0xde, 0x95, 0xff, 0xee, 0x47, 0x13, 0x36, 0x3a, 0x7e, 0x80, 0x86, 0xe3, 0xc4,
	0x89, 0x12, 0xe6, 0x35, 0x7a, 0xad, 0x2c, 0xd4, 0x24, 0x03, 0x92, 0xf2, 0xc2, 0x3f, 0x89, 0x86,
	0xda, 0x31, 0x8d, 0x58, 0xa6, 0x2f, 0xfc, 0xbc, 0xb2, 0xfb, 0x3d, 0xd1, 0x4e, 0x14, 0x06, 0xfe,
	0x1c, 0x3a, 0xf3, 0x50, 0x3a, 0xaf, 0xe5, 0xc0, 0x28, 0xd6, 0x96, 0xcc, 0x8a, 0xe7, 0xdd, 0x7c,
	0x34, 0xd2, 0x89, 0x1e, 0xdf, 0x47, 0xa7, 0x1b, 0xa1, 0xbb, 0x93, 0xc3, 0x99, 0x17, 0x25, 0xce,
	0x0b, 0xce, 0xa7, 0x57, 0x72, 0xb1, 0x48, 0x07, 0x6a, 0xfc, 0x12, 0x1a, 0x8e, 0xc2, 0x47, 0xf1,
	0x46, 0x4c, 0x83, 0x04, 0xbe, 0x19, 0xa5, 0xb4, 0x87, 0x24, 0x7c, 0x14, 0xd7, 0x68, 0x90, 0x90,
	0xa1, 0x48, 0xfc, 0xc2, 0x57, 0xd1, 0x28, 0xa0, 0xd3, 0x3d, 0xa7, 0xe9, 0x07, 0xd4, 0x83, 0x6f,
	0x44, 0x29, 0x8d, 0x42, 0x19, 0xc9, 0x92, 0x80, 0x91, 0x91, 0x48, 0x7b, 0xc2, 0xb3, 0xa8, 0xe8,
	0x6d, 0xc2, 0xe7, 0x40, 0x2b, 0x91, 0x2c, 0x56, 0x49, 0xd1, 0xdb, 0x64, 0xb1, 0x2d, 0x0b, 0x93,
	0x97, 0x83, 0x98, 0x46, 0xc9, 0xb2, 0x07, 0x1e, 0x5d, 0xe3, 0xba, 0xa2, 0xc1, 0x88, 0x81, 0xc9,
	0x06, 0xc8, 0x97, 0x54, 0xc3, 0xa6, 0xfa, 0x8a, 0x42, 0x61, 0x30, 0xec, 0x98, 0x46, 0xbb, 0x34,
	0x5a, 0xf6, 0xc0, 0x4f, 0x6b, 0xd8, 0x35, 0xd1, 0x4e, 0x14, 0x06, 0x8b, 0x06, 0xe2, 0x87, 0x8d,
	0x75, 0xba, 0x97, 0x80, 0x37, 0xd6, 0xa2, 0x81, 0xda, 0xdd, 0x15, 0xd6, 0x4c, 0x24, 0x9c, 0x31,
	0xe6, 0xde, 0x6c, 0x99, 0x7b, 0x5e, 0x8d, 0xf1, 0xba, 0x68, 0x27, 0x0a, 0x83, 0x75, 0x97, 0x99,
	0x66, 0x7e, 0x6b, 0x8b, 0xfb, 0xea, 0xd1, 0xac, 0x11, 0x25, 0x8c, 0x18, 0x98, 0x95, 0xef, 0x15,
	0xd0, 0x29, 0x19, 0xb5, 0x9d, 0x74, 0x12, 0x4a, 0x0d, 0x57, 0xb9, 0xd0, 0x75, 0xb0, 0x7e, 0xc4,
	0xf4, 0xf3, 0xed, 0x02, 0x3a, 0x9b, 0xdb, 0xc5, 0x13, 0x70, 0x9c, 0x9e, 0xe9, 0x38, 0x3f, 0xdd,
	0xb5, 0x07, 0x3b, 0x52, 0xca, 0xf9, 0x3a, 0x3a, 0xb5, 0x1a, 0x06, 0xf5, 0x70, 0xb1, 0xba, 0x10,
	0x36, 0x1a, 0x3c, 0x02, 0x00, 0x37, 0x26, 0xeb, 0x98, 0x85, 0x8e, 0x75, 0xcc, 0xe7, 0x51, 0x5f,
	0xec, 0xbf, 0x45, 0x41, 0xbf, 0x7e, 0x51, 0x11, 0x85, 0xc5, 0x0c, 0xff, 0x2d, 0x4a, 0x00, 0x54,
	0xf9, 0xf3, 0x22, 0x3a, 0xad, 0xd8, 0xab, 0x00, 0x63, 0x39, 0xd8, 0x0a, 0x59, 0xc0, 0xe2, 0xb6,
	0xa3, 0x88, 0x06, 0x89, 0x1e, 0xb0, 0x14, 0xcc, 0x80, 0x65, 0x21, 0x83, 0x41, 0x72, 0xa8, 0x20,
	0xe6, 0x60, 0x92, 0x75, 0x4e, 0x45, 0x2b, 0xe6, 0xb0, 0xe0, 0x24, 0x43, 0x81, 0xd7, 0xd0, 0xb4,
	0xb3, 0xeb, 0xf8, 0x0d, 0x96, 0x3b, 0xea, 0x9c, 0x4a, 0xe6, 0x1a, 0xe0, 0x7c, 0x0e, 0x0e, 0xc9,
	0xa5, 0xc4, 0xb7, 0xd0, 0x24, 0x5f, 0x2d, 0xce, 0x06, 0xd4, 0x6a, 0xc1, 0x74, 0xde, 0x46, 0x20,
	0x59, 0x9a, 0xca, 0x7f, 0x14, 0xd0, 0xb4, 0xb0, 0xa3, 0x4a, 0x33, 0xa1, 0xb8, 0x99, 0xf6, 0x5c,
	0x0e, 0x9e, 0xb4, 0xa1, 0xdd, 0x73, 0x05, 0x27, 0x19, 0x0a, 0xe6, 0x31, 0xd8, 0x94, 0xab, 0xf1,
	0xd1, 0x34, 0x3c, 0xc6, 0xa2, 0x68, 0x27, 0x0a, 0x83, 0x79, 0x0c, 0xe0, 0x00, 0x05, 0x04, 0x2a,
	0xed, 0xa3, 0x3c, 0xc6, 0xba, 0x06, 0x23, 0x06, 0xa6, 0x5a, 0xb6, 0x03, 0x41, 0x7d, 0x20, 0xc8,
	0x5c, 0xb6, 0x03, 0x49, 0x29, 0x0e, 0x4f, 0x94, 0x79, 0xbf, 0x9f, 0x86, 0x44, 0xd9, 0xd0, 0xf4,
	0x5d, 0x4b, 0x94, 0xb9, 0x94, 0xa3, 0x24, 0xca, 0x86, 0x3e, 0xef, 0xef, 0x58, 0xcf, 0x50, 0xb5,
	0x83, 0xaf, 0xfa, 0x46, 0xbf, 0xdd, 0xa7, 0x6e, 0x13, 0xe5, 0x4b, 0xa8, 0x2f, 0xd9, 0x6f, 0xc9,
	0xc2, 0x93, 0xcc, 0xd2, 0xfa, 0xd6, 0xf7, 0x5b, 0xf4, 0x47, 0x8f, 0x2f, 0x94, 0x05, 0x73, 0x9e,
	0x0f, 0x33, 0x44, 0xec, 0x19, 0x63, 0x35, 0x5c, 0x5d, 0x31, 0xcd, 0xfd, 0xa3, 0xc7, 0x17, 0xae,
	0x75, 0xb3, 0xf5, 0x66, 0x4e, 0xbe, 0xbd, 0x6b, 0xdb, 0x4e, 0x4c, 0x55, 0x5e, 0x1e, 0xa3, 0xb2,
	0x6b, 0x79, 0x88, 0xae, 0xea, 0x7a, 0xf9, 0x2e, 0xb6, 0x3a, 0x0e, 0x9b, 0x4e, 0x34, 0xcf, 0xa2,
	0x4b, 0x61, 0x31, 0xb2, 0xb7, 0x09, 0x5e, 0x04, 0x62, 0xad, 0xae, 0x56, 0x27, 0xf3, 0x7c, 0x11,
	0x5f, 0xee, 0xe1, 0x13, 0x33, 0x26, 0x92, 0x37, 0xde, 0x41, 0x28, 0x86, 0x8d, 0x04, 0x4c, 0x25,
	0x08, 0xd1, 0x0e, 0x9d, 0xf1, 0x39, 0x92, 0x6a, 0x8a, 0x45, 0x75, 0x8c, 0xbd, 0xb8, 0xe9, 0x33,
	0xd1, 0xd8, 0xe3, 0x2f, 0xa3, 0xb1, 0x88, 0xb6, 0x1a, 0xbe, 0xeb, 0xd4, 0x68, 0x02, 0x02, 0xf9,
	0x22, 0xd6, 0xa7, 0xbb, 0x16, 0x48, 0x0c, 0x36, 0x55, 0xcc, 0x72, 0x46, 0xb3, 0x8d, 0x58, 0xa2,
	0x78, 0xce, 0xc8, 0xa9, 0x9f, 0x86, 0x9c, 0xd1, 0xd0, 0xf4, 0xe0, 0x9c, 0xd1, 0x40, 0x7d, 0x1a,
	0xfc, 0xc8, 0xe1, 0x39, 0x63, 0xa6, 0xf7, 0xc7, 0xcb, 0x19, 0x53, 0x76, 0x87, 0xe5, 0x8c, 0x6f,
	0xf7, 0xa1, 0x09, 0x1b, 0x1d, 0x2f, 0xa0, 0xe1, 0xb0, 0x45, 0x23, 0x27, 0x49, 0x9d, 0x98, 0xac,
	0x52, 0x0d, 0xdf, 0x91, 0x80, 0x1f, 0x3d, 0xbe, 0x20, 0x29, 0x55, 0x1b, 0x49, 0xe9, 0x32, 0x45,
	0xf9, 0xe2, 0x91, 0x8b, 0xf2, 0x37, 0xd0, 0x98, 0xab, 0xc2, 0x01, 0xa0, 0xe5, 0xde, 0x4e, 0x55,
	0x4b, 0x16, 0x0c, 0x28, 0xb1, 0xb0, 0x99, 0x07, 0x76, 0xc3, 0x66, 0xd3, 0x09, 0x3c, 0x91, 0x01,
	0xaa, 0xee, 0x2f, 0xf0, 0x66, 0x22, 0xe1, 0xf8, 0x43, 0xa8, 0xdf, 0x0d, 0xdb, 0x2a, 0xbf, 0x53,
	0x03, 0xb4, 0xc0, 0x1a, 0x09, 0x87, 0xe1, 0x6d, 0xf4, 0xac, 0xb3, 0x5b, 0x5f, 0xda, 0xa3, 0x6e,
	0x9b, 0xc9, 0x60, 0xa9, 0xa2, 0x91, 0x66, 0xf2, 0x44, 0xef, 0xff, 0x09, 0xda, 0x67, 0xe7, 0x0f,
	0xc0, 0x25, 0x07, 0x72, 0x62, 0x92, 0x9a, 0x7e, 0xd0, 0x59, 0xd2, 0xa0, 0x29, 0x69, 0xf5, 0x00,
	0x5c, 0x72, 0x20, 0x27, 0x90, 0xe4, 0xec, 0x75, 0x96, 0x34, 0x64, 0x49, 0x3a, 0x00, 0x97, 0x1c,
	0xc8, 0xa9, 0xf2, 0x45, 0x15, 0xd2, 0x9b, 0x0e, 0x8b, 0x05, 0x8b, 0xb2, 0xf4, 0x28, 0x20, 0x99,
	0x60, 0xf1, 0xb6, 0x05, 0x27, 0x19, 0x0a, 0x9e, 0xf6, 0x09, 0xaf, 0xfc, 0xd4, 0xa4, 0x7d, 0xb9,
	0x0a, 0x1f, 0x9c, 0xf6, 0xe5, 0x51, 0xbc, 0xbf, 0xd3, 0xbe, 0x3c, 0x8d, 0x3b, 0xed, 0x19, 0xea,
	0xd4, 0x43, 0x70, 0x47, 0xbb, 0x2c, 0x1e, 0xd1, 0x13, 0x8a, 0xde, 0x34, 0x31, 0x33, 0x4a, 0x6d,
	0x1f, 0xac, 0x96, 0x8c, 0xe8, 0x82, 0x2a, 0x6f, 0x17, 0xd1, 0x64, 0xe6, 0x83, 0xcf, 0xbc, 0x93,
	0xaa, 0x98, 0xeb, 0xfb, 0x87, 0x95, 0x77, 0xba, 0x6d, 0x40, 0x89, 0x85, 0xcd, 0xb2, 0x30, 0xf1,
	0xa5, 0x8e, 0xd7, 0x68, 0x64, 0x6c, 0x1d, 0x56, 0x59, 0x18, 0xb1, 0x11, 0x48, 0x96, 0x46, 0x57,
	0x64, 0x61, 0xbb, 0x1d, 0xec, 0xc8, 0xd4, 0x27, 0xa3, 0x08, 0x87, 0x12, 0x0b, 0x1b, 0xcf, 0xa3,
	0xf1, 0x4d, 0xa7, 0xe1, 0x04, 0x2e, 0x8d, 0x96, 0x02, 0x96, 0x2b, 0x72, 0x77, 0x39, 0x54, 0x3d,
	0x23, 0x18, 0x8c, 0x57, 0x4d, 0x30, 0xb1, 0xf1, 0xc1, 0x53, 0x03, 0x33, 0x81, 0xe9, 0x81, 0x1f,
	0x1d, 0xd2, 0x3c, 0xb5, 0x01, 0x25, 0x16, 0x76, 0xe5, 0xf7, 0x8a, 0x68, 0x64, 0x75, 0xbf, 0x76,
	0x77, 0xe5, 0xe4, 0xd2, 0xa9, 0xd7, 0x8d, 0x77, 0xb6, 0x9b, 0x8f, 0xaa, 0xa6, 0x67, 0xc7, 0x64,
	0xca, 0xb1, 0x92, 0xa9, 0xab, 0x5d, 0x26, 0x53, 0x4c, 0xc6, 0x21, 0xa9, 0xd4, 0x5f, 0x17, 0xd0,
	0x84, 0xae, 0xcb, 0x09, 0x38, 0x81, 0x2f, 0x98, 0x4e, 0xe0, 0x93, 0xbd, 0x19, 0xad, 0xc3, 0xbb,
	0xff, 0xab, 0x83, 0x66, 0x7f, 0x3e, 0x58, 0x6d, 0xfc, 0x60, 0xb5, 0xf1, 0x83, 0xd5, 0xc6, 0xf7,
	0x72, 0xb5, 0xf1, 0x6f, 0x0a, 0xc2, 0x2b, 0x9f, 0x5c, 0xde, 0x78, 0x3c, 0xaf, 0x7c, 0x58, 0xd6,
	0xa8, 0x5c, 0xe6, 0xc9, 0xe5, 0x8c, 0xc7, 0x74, 0x99, 0x07, 0x67, 0x8c, 0x8f, 0xcc, 0xee, 0xd4,
	0x78, 0x19, 0xcf, 0xca, 0x17, 0xaf, 0xf4, 0x20, 0xf2, 0xb0, 0x6c, 0xf1, 0xcf, 0xfa, 0xd1, 0x98,
	0x89, 0xfc, 0xc1, 0xfa, 0xe2, 0x07, 0xeb, 0x8b, 0x4f, 0xd1, 0xfa, 0x62, 0xe5, 0x71, 0x01, 0x4d,
	0xf1, 0x28, 0xeb, 0xc7, 0x74, 0x8d, 0xf0, 0x9f, 0x0b, 0xe8, 0x4c, 0x4e, 0x07, 0x4f, 0xc0, 0xe5,
	0x6d, 0x9a, 0x2e, 0xef, 0x95, 0x2e, 0xfd, 0xcf, 0x91, 0x12, 0xc5, 0xaf, 0xa0, 0xd9, 0x74, 0x0f,
	0xf2, 0x42, 0xd8, 0x6c, 0x35, 0x28, 0xfb, 0x6c, 0xdf, 0xf4, 0x69, 0xc3, 0x8b, 0xf1, 0x87, 0xc5,
	0x12, 0x60, 0xc9, 0xda, 0xc8, 0x69, 0x2e, 0x03, 0xe2, 0x4f, 0xa1, 0x51, 0xf6, 0x77, 0xc3, 0x0f,
	0x36, 0x36, 0xd5, 0x99, 0xab, 0x52, 0x9a, 0x10, 0xea, 0x7b, 0x37, 0xcb, 0xb1, 0xb6, 0x6d, 0xf3,
	0x07, 0x05, 0x74, 0x36, 0x4f, 0x3c, 0x2f, 0x2d, 0x4b, 0xe9, 0x7d, 0xef, 0x8e, 0x74, 0xbc, 0x8d,
	0x06, 0xb6, 0xa0, 0x9f, 0x22, 0xb7, 0x58, 0xec, 0xe5, 0xb4, 0x82, 0x6d, 0xb3, 0x2a, 0x62, 0xa1,
	0x32, 0xff, 0x4d, 0x04, 0xff, 0x0a, 0x45, 0x53, 0x29, 0xc5, 0x62, 0xe8, 0x8a, 0xa3, 0x0b, 0xaa,
	0x58, 0x56, 0x38, 0xa0, 0x58, 0xf6, 0x22, 0x1a, 0xf4, 0x68, 0x83, 0xb2, 0xa8, 0x85, 0x77, 0x4c,
	0xbd, 0xb9, 0x8b, 0xbc, 0x99, 0x48, 0x78, 0xe5, 0x1b, 0x86, 0x39, 0x41, 0x87, 0x45, 0x27, 0x71,
	0xc4, 0x60, 0x7e, 0x1c, 0x95, 0x9b, 0xb4, 0x19, 0x46, 0xfb, 0x1b, 0x60, 0x55, 0x9e, 0x06, 0xa8,
	0x57, 0x6c, 0x15, 0x40, 0x60, 0x56, 0xd4, 0x54, 0xbf, 0xf1, 0x6b, 0x68, 0x5a, 0x23, 0xb2, 0x6d,
	0xac, 0xf2, 0xeb, 0x94, 0x5a, 0x5a, 0x7a, 0xb2, 0x69, 0x37, 0x55, 0x7e, 0xbf, 0x88, 0x66, 0x2c,
	0xf5, 0x60, 0xd1, 0x11, 0x6c, 0xf1, 0x5e, 0x6b, 0xc7, 0x12, 0x04, 0xba, 0xeb, 0x6b, 0x6b, 0xc2,
	0xda, 0xe2, 0xe5, 0x92, 0x04, 0x90, 0x14, 0x07, 0xd7, 0xd5, 0xf4, 0xe9, 0xeb, 0xd6, 0x03, 0x75,
	0x1c, 0xa4, 0xdc, 0xd9, 0xf3, 0x47, 0x05, 0x34, 0xad, 0x51, 0x34, 0xda, 0xf1, 0xb6, 0x9a, 0x3f,
	0xb0, 0xfe, 0x6a, 0xcf, 0x1f, 0x78, 0x43, 0x08, 0x87, 0xe1, 0x8f, 0x22, 0x04, 0x3f, 0x36, 0x12,
	0x3f, 0x67, 0x4b, 0x36, 0x83, 0xf0, 0x40, 0x21, 0x91, 0x3f, 0x99, 0x55, 0x53, 0x0a, 0x66, 0xd4,
	0x26, 0xfb, 0xca, 0x4a, 0xa3, 0x28, 0xab, 0x2a, 0x5a, 0xf1, 0x19, 0x8e, 0xc9, 0x64, 0x62, 0x37,
	0x55, 0x7e, 0xb3, 0x0f, 0xe1, 0x54, 0xf7, 0x5b, 0x34, 0xe9, 0x42, 0xf3, 0xff, 0x8f, 0x86, 0xea,
	0x34, 0xd1, 0xf5, 0x56, 0xfe, 0x19, 0x54, 0x1e, 0xac, 0x53, 0x1e, 0xd9, 0x5c, 0x43, 0x63, 0xb9,
	0xaa, 0xa6, 0x6b, 0xd6, 0xba, 0x96, 0x23, 0x89, 0xf6, 0xc4, 0xb2, 0x5d, 0xba, 0xe7, 0xc7, 0x49,
	0x2c, 0x16, 0xac, 0x55, 0xb6, 0xbb, 0x04, 0xad, 0x44, 0x40, 0xd9, 0xfc, 0xe4, 0xbf, 0xb8, 0x3e,
	0xfd, 0xe6, 0xfc, 0xe4, 0xc8, 0xa0, 0x15, 0xa2, 0xea, 0x37, 0x4b, 0x5f, 0x04, 0x51, 0xaa, 0x1a,
	0x8f, 0x32, 0x54, 0x16, 0x95, 0x52, 0x2a, 0x05, 0xc7, 0x38, 0x8d, 0x52, 0xf1, 0x45, 0x34, 0xd8,
	0xf4, 0xe3, 0x98, 0xe5, 0x1d, 0x83, 0xa6, 0x07, 0x58, 0xe5, 0xcd, 0x44, 0xc2, 0xf1, 0x27, 0xd1,
	0x88, 0xf8, 0xc9, 0xd5, 0x1c, 0x32, 0x4f, 0xa8, 0x0b, 0x7c, 0xd0, 0xb3, 0xdc, 0x4c, 0x1f, 0xf0,
	0x2d, 0x34, 0x29, 0xe9, 0x52, 0x4d, 0x79, 0x0c, 0xa2, 0xb2, 0x4f, 0x8d, 0x58, 0xa9, 0x3a, 0x2e,
	0xa8, 0x74, 0x5d, 0xc5, 0x06, 0x0e, 0x11, 0x94, 0xa4, 0x4b, 0x05, 0xbc, 0x99, 0x48, 0x78, 0xe5,
	0x7f, 0x26, 0xd1, 0xb8, 0x75, 0xa4, 0x0c, 0x7f, 0x01, 0xf5, 0x79, 0xa1, 0x1b, 0x8b, 0x8f, 0xe9,
	0x2b, 0xbd, 0xbc, 0x51, 0xca, 0xbd, 0x56, 0x87, 0xd8, 0x4c, 0x61, 0x8f, 0x04, 0x98, 0xe2, 0x08,
	0x8d, 0xf0, 0xb5, 0xc4, 0x8d, 0x18, 0x96, 0x45, 0x8b, 0xbd, 0xbf, 0xb6, 0x50, 0x31, 0x04, 0x37,
	0xcd, 0x45, 0xc1, 0x6b, 0x2b, 0x2a, 0x8b, 0x65, 0x2e, 0x84, 0x4f, 0xf4, 0x0d, 0xd4, 0x1f, 0x27,
	0x61, 0x44, 0xc5, 0x27, 0xe6, 0x46, 0x4f, 0xc2, 0xe0, 0xf4, 0x30, 0xc8, 0x81, 0x03, 0x7d, 0xf0,
	0x4c, 0x38, 0x5f, 0xbc, 0xc3, 0x82, 0x46, 0x8f, 0xee, 0xb1, 0xd9, 0xd1, 0x77, 0x94, 0xa3, 0xb6,
	0x07, 0x9c, 0xe8, 0xf3, 0x83, 0x3a, 0x17, 0x33, 0xc2, 0x63, 0x4e, 0xde, 0x44, 0x94, 0x00, 0xfc,
	0x00, 0x95, 0xea, 0x34, 0x11, 0xeb, 0xc9, 0xd7, 0x7b, 0x91, 0x23, 0x3d, 0x40, 0x75, 0xf0, 0xc9,
	0xe3, 0x0b, 0xa5, 0x5b, 0x34, 0x21, 0x8c, 0x23, 0xec, 0x99, 0x80, 0x53, 0x2b, 0x62, 0x05, 0xf9,
	0xd3, 0x3d, 0xd9, 0x49, 0x9d, 0x16, 0x96, 0x03, 0x02, 0x0d, 0x44, 0xb0, 0xc6, 0x9b, 0x68, 0xa0,
	0x49, 0xa3, 0xba, 0x3a, 0xfa, 0xd8, 0xd3, 0x60, 0xac, 0x32, 0x0e, 0x9a, 0x0c, 0x78, 0x8e, 0x89,
	0xe0, 0x8c, 0xeb, 0x68, 0x30, 0xa2, 0x5b, 0x11, 0x8d, 0xb7, 0xc5, 0x11, 0xc8, 0xcf, 0xf4, 0x22,
	0x84, 0x70, 0x16, 0xda, 0xba, 0xbb, 0x68, 0x21, 0x92, 0x3b, 0x9b, 0x58, 0x5b, 0xec, 0x4b, 0x00,
	0x6f, 0x69, 0x8f, 0x7d, 0x49, 0x3f, 0x25, 0x7c, 0x62, 0xc1, 0x33, 0xe1, 0x7c, 0xd9, 0x90, 0x3c,
	0x72, 0xa2, 0x26, 0x8d, 0xe0, 0x45, 0xee, 0x71, 0x48, 0x1e, 0x00, 0x07, 0xcd, 0x5c, 0xbc, 0x81,
	0x08, 0xd6, 0x38, 0x41, 0x65, 0xc8, 0x12, 0x37, 0x5c, 0xc7, 0xdd, 0xa6, 0x90, 0x9a, 0xf4, 0xf8,
	0x46, 0x42, 0x16, 0x0a, 0x55, 0x23, 0x2e, 0x0d, 0xb6, 0x11, 0xa4, 0x8d, 0x04, 0x3d, 0x54, 0xbf,
	0x71, 0x88, 0x86, 0xb7, 0x64, 0xf4, 0x01, 0x29, 0x4e, 0x57, 0xe7, 0xe0, 0x3b, 0x85, 0x30, 0x3c,
	0xf5, 0x56, 0x6d, 0x24, 0x95, 0x81, 0x63, 0x84, 0x5c, 0x15, 0x27, 0x42, 0xf1, 0xa9, 0xc7, 0x5e,
	0x5a, 0x21, 0x32, 0xef, 0x65, 0xda, 0x48, 0x34, 0x31, 0xcc, 0x33, 0xc4, 0xb4, 0xde, 0x84, 0xf2,
	0xdf, 0x58, 0xef, 0x9e, 0xa1, 0x26, 0x78, 0x68, 0x9e, 0x41, 0x36, 0x11, 0x25, 0x80, 0x09, 0x83,
	0x73, 0xcc, 0x8d, 0xb0, 0x3e, 0x33, 0xde, 0xbb, 0xb0, 0x75, 0xc1, 0x43, 0x13, 0x26, 0x9b, 0x88,
	0x12, 0x80, 0xbf, 0x82, 0x46, 0x23, 0x0a, 0x95, 0x5a, 0x31, 0x6f, 0x26, 0xba, 0x3d, 0x99, 0xab,
	0xbf, 0x6a, 0xc0, 0x48, 0x9b, 0x39, 0x13, 0x90, 0xfc, 0x6b, 0xcd, 0x64, 0x24, 0xd2, 0x9e, 0x70,
	0x88, 0x86, 0x22, 0xea, 0x86, 0xbb, 0x34, 0xda, 0x9f, 0x99, 0xec, 0xbd, 0xab, 0x44, 0xf0, 0x10,
	0x42, 0x55, 0xa1, 0x42, 0x34, 0x13, 0x25, 0x04, 0xef, 0xa6, 0x47, 0x02, 0x31, 0x64, 0x82, 0x37,
	0x7b, 0xf6, 0xf0, 0x73, 0xe2, 0x08, 0xe0, 0x52, 0x90, 0x44, 0xfb, 0x69, 0x7c, 0x24, 0x5a, 0x57,
	0xe8, 0x2e, 0x6d, 0xa4, 0x27, 0xb9, 0x23, 0x34, 0xc0, 0x3f, 0x65, 0x33, 0x53, 0xdd, 0x9e, 0x8d,
	0xb4, 0xc5, 0xf2, 0x4f, 0x23, 0x97, 0x9a, 0x26, 0x66, 0xd0, 0xc8, 0x85, 0x0a, 0x49, 0xb3, 0x6d,
	0x34, 0xa2, 0xab, 0x88, 0x27, 0x50, 0x69, 0x87, 0xee, 0xf3, 0x74, 0x80, 0xb0, 0x9f, 0xf8, 0x0e,
	0xea, 0xdf, 0x75, 0x1a, 0x6d, 0x2a, 0x3e, 0xdf, 0xbd, 0x9f, 0x5f, 0x27, 0x9c, 0xcf, 0xb5, 0xe2,
	0x95, 0xc2, 0x6c, 0x82, 0xca, 0x9a, 0x8a, 0x27, 0x24, 0xb5, 0xf2, 0x87, 0x43, 0xe8, 0x4c, 0x87,
	0x4f, 0x30, 0x8b, 0x37, 0xe1, 0xb3, 0xbb, 0xa1, 0xc7, 0xc9, 0x2a, 0xde, 0x04, 0x5c, 0x1e, 0x2c,
	0x23, 0x5f, 0xfd, 0x66, 0xb1, 0xbe, 0x20, 0xca, 0x89, 0xf5, 0x39, 0x8d, 0xaf, 0x2e, 0x4e, 0x91,
	0xb1, 0x7e, 0x4a, 0xd1, 0x39, 0xd6, 0x57, 0xb4, 0x69, 0xac, 0xef, 0xdb, 0x4d, 0xf8, 0x2a, 0x1a,
	0xe5, 0xbc, 0x64, 0x04, 0xd8, 0x67, 0x46, 0xe1, 0xc0, 0x44, 0x86, 0x81, 0x23, 0xbe, 0xf6, 0xc4,
	0xe2, 0x56, 0x4e, 0xba, 0xe5, 0xf8, 0x0d, 0xb1, 0xea, 0xa9, 0xa5, 0xf0, 0x40, 0x79, 0x13, 0x40,
	0x84, 0x9b, 0x85, 0x3f, 0x30, 0x3a, 0x9e, 0xfc, 0x0a, 0x33, 0x0d, 0x98, 0x74, 0x3c, 0x43, 0xe6,
	0x76, 0x2a, 0x7b, 0xe9, 0x03, 0xb3, 0xae, 0xa4, 0x63, 0x96, 0x1a, 0x34, 0xa3, 0x79, 0x41, 0x06,
	0xd1, 0xbc, 0xa7, 0x7e, 0xe3, 0x55, 0x74, 0x4a, 0x23, 0xd2, 0x8c, 0x35, 0x64, 0x86, 0xf4, 0x29,
	0xb9, 0xb2, 0x16, 0xf6, 0x32, 0x6d, 0xf8, 0x3a, 0x1a, 0x13, 0xec, 0xa4, 0xbd, 0x78, 0xc0, 0xad,
	0x56, 0x46, 0x38, 0x1f, 0x69, 0xb0, 0x51, 0x4f, 0x7f, 0xc4, 0x0b, 0x68, 0x32, 0x08, 0xc3, 0xd6,
	0x46, 0xbb, 0xe5, 0x39, 0xaa, 0xfb, 0x3c, 0xe4, 0x56, 0xcb, 0xcd, 0xb7, 0xc3, 0xb0, 0x75, 0x0f,
	0xe0, 0xdc, 0x04, 0xe3, 0x81, 0xd9, 0x00, 0x66, 0x8f, 0x37, 0x92, 0xed, 0x28, 0x4c, 0x92, 0x86,
	0x58, 0x9a, 0x19, 0xd2, 0xcc, 0x1e, 0xaf, 0x4b, 0x10, 0x29, 0xfb, 0xe9, 0x03, 0xbe, 0x06, 0x6b,
	0x3a, 0xf0, 0xc0, 0x0d, 0x68, 0x5d, 0x5b, 0xa4, 0x30, 0xc1, 0x86, 0x23, 0x12, 0x17, 0xac, 0xb8,
	0x8e, 0xce, 0x18, 0xb4, 0x9a, 0x1d, 0xf9, 0xd9, 0x84, 0xf4, 0x46, 0x1d, 0x9d, 0x8b, 0x32, 0xe5,
	0xb4, 0xce, 0x4d, 0x19, 0xf3, 0x21, 0xea, 0x4f, 0xf6, 0x5b, 0x94, 0x7d, 0xe9, 0x98, 0xab, 0x5a,
	0x39, 0x76, 0x0c, 0x3c, 0xb7, 0xce, 0xd8, 0x71, 0x8f, 0x95, 0xa6, 0xa7, 0xac, 0x8d, 0x70, 0x49,
	0xb3, 0x5f, 0x46, 0x28, 0xc5, 0xc9, 0x71, 0x19, 0x0f, 0x4c, 0x97, 0x71, 0xfc, 0xb0, 0x5c, 0x77,
	0x1d, 0x6f, 0x0f, 0xe9, 0x35, 0x81, 0x34, 0x28, 0xd5, 0x13, 0xb0, 0xc2, 0xc1, 0x09, 0x18, 0x1b,
	0x7d, 0xf1, 0x73, 0x03, 0x92, 0x2e, 0xab, 0x6e, 0x26, 0xf0, 0x21, 0x81, 0x2a, 0xbb, 0xe9, 0x83,
	0x4e, 0xa7, 0x55, 0x07, 0x6d, 0x3a, 0x28, 0xd6, 0x48, 0x3a, 0xa8, 0xd6, 0xac, 0xa2, 0x53, 0x3a,
	0x5d, 0x5a, 0xae, 0xe9, 0x33, 0xdf, 0x1f, 0x8d, 0x81, 0xac, 0xd7, 0x60, 0x37, 0xd3, 0x96, 0xd6,
	0x10, 0xfa, 0x8f, 0x5c, 0xfd, 0x18, 0x38, 0x46, 0xf5, 0x63, 0xb0, 0xfb, 0xea, 0x47, 0x2a, 0x1d,
	0xec, 0x3b, 0x64, 0x16, 0x95, 0x80, 0x03, 0x58, 0x97, 0x4b, 0x07, 0xdb, 0x2a, 0x0a, 0xb0, 0xec,
	0x70, 0xa7, 0xca, 0x27, 0xa7, 0x00, 0xab, 0xde, 0x42, 0x53, 0x29, 0x45, 0x6a, 0x53, 0xee, 0x0a,
	0xcc, 0x53, 0x02, 0xe6, 0x19, 0x7a, 0xab, 0x05, 0xdf, 0x44, 0x58, 0x30, 0x4a, 0xc2, 0x56, 0x8b,
	0x7a, 0xdc, 0x64, 0x65, 0xeb, 0x2c, 0xbe, 0xb8, 0xce, 0x8a, 0x21, 0x80, 0xe5, 0x26, 0x12, 0xab,
	0x05, 0xbf, 0x81, 0x9e, 0xcd, 0xf2, 0xd1, 0x0c, 0xc9, 0xd7, 0x14, 0x2e, 0x0a, 0x8e, 0x33, 0x36,
	0x47, 0x65, 0xcf, 0x99, 0xa4, 0x03, 0x04, 0xaf, 0xa8, 0x21, 0x92, 0x1e, 0x82, 0xeb, 0x3a, 0x0a,
	0xba, 0xaa, 0x79, 0xc4, 0x87, 0xc8, 0x70, 0x45, 0xbc, 0x87, 0x46, 0x1b, 0xde, 0x42, 0xe7, 0xf3,
	0xb8, 0x69, 0x1a, 0x8f, 0x81, 0xc6, 0x15, 0xc1, 0x77, 0x36, 0xcb, 0x57, 0xe9, 0x3c, 0x9b, 0x74,
	0x84, 0xe1, 0xd7, 0xe4, 0x40, 0x39, 0xed, 0x24, 0x54, 0xc2, 0x20, 0x5a, 0xee, 0xa4, 0xb4, 0x28,
	0x56, 0x02, 0xd9, 0x7c, 0x3b, 0x09, 0x65, 0x3b, 0x76, 0xa4, 0x8d, 0x0d, 0x5e, 0xe9, 0xe8, 0x4f,
	0x80, 0xc6, 0xcf, 0x0b, 0xa6, 0x67, 0xb3, 0x4c, 0xe5, 0x34, 0x98, 0xc9, 0xf0, 0x96, 0xd5, 0xda,
	0xef, 0x14, 0xd1, 0x84, 0x7d, 0x29, 0x0f, 0x5c, 0xef, 0x60, 0x5c, 0xab, 0xa4, 0xcf, 0xe7, 0xbc,
	0xeb, 0x92, 0x7e, 0x1a, 0x95, 0xdc, 0x56, 0x5b, 0xb8, 0xc0, 0x57, 0x7a, 0xbf, 0x0e, 0x68, 0x61,
	0xed, 0x1e, 0x2f, 0x19, 0x2c, 0xac, 0xdd, 0x23, 0x8c, 0x25, 0xe3, 0xdc, 0xa4, 0x4d, 0x51, 0x57,
	0x39, 0x06, 0xe7, 0x55, 0xda, 0xe4, 0x9c, 0x57, 0x69, 0x93, 0x30, 0x96, 0xb0, 0x76, 0xfe, 0xc8,
	0x69, 0x89, 0x72, 0xca, 0x8d, 0xde, 0x59, 0xd7, 0x1e, 0x39, 0x2d, 0x5e, 0x85, 0x62, 0xbf, 0x08,
	0x70, 0xad, 0xfc, 0x62, 0x51, 0x5f, 0x0c, 0x50, 0xbd, 0x63, 0x8e, 0xbb, 0xc5, 0xaf, 0x9b, 0xb4,
	0x1d, 0xb7, 0xb8, 0x85, 0x92, 0x48, 0x38, 0xfe, 0xb9, 0x02, 0x1a, 0x69, 0x84, 0x8e, 0xb7, 0xe1,
	0xec, 0xd2, 0xc8, 0xa9, 0x53, 0xb1, 0x40, 0x74, 0xfb, 0x58, 0xe6, 0x9d, 0x5b, 0x09, 0x1d, 0x6f,
	0x9e, 0x33, 0xb4, 0x02, 0x75, 0x0d, 0x42, 0xca, 0x8d, 0xf4, 0x61, 0xf6, 0x06, 0x9a, 0xb0, 0xa9,
	0x72, 0x3e, 0x84, 0xd3, 0xfa, 0x87, 0xb0, 0xa0, 0x7f, 0xc5, 0xbe, 0x51, 0xca, 0xda, 0x62, 0x95,
	0x36, 0xcd, 0xf2, 0xf0, 0x70, 0x07, 0xd7, 0x7e, 0x0d, 0x8d, 0xf1, 0x77, 0xc0, 0x2a, 0xfb, 0xdb,
	0x27, 0x95, 0xf8, 0x44, 0x97, 0x27, 0x95, 0xb8, 0xaf, 0xbb, 0x88, 0xfa, 0xb6, 0x22, 0x9a, 0xd9,
	0xbb, 0x74, 0x33, 0xa2, 0x94, 0x00, 0x04, 0x7f, 0x0a, 0x8d, 0xb2, 0xbf, 0xf6, 0x47, 0x4a, 0xd9,
	0x84, 0xa1, 0xaa, 0x55, 0xa5, 0xad, 0xf4, 0x81, 0xb1, 0x6e, 0xc7, 0x22, 0x84, 0xd5, 0x58, 0xdf,
	0x8b, 0xa9, 0x47, 0x00, 0xc2, 0x58, 0xb3, 0xbf, 0x29, 0x6b, 0x2b, 0x6a, 0x65, 0xa8, 0x8a, 0x75,
	0x3b, 0x7d, 0x60, 0x1f, 0x5e, 0xd0, 0x49, 0xce, 0x93, 0xc1, 0xac, 0x4a, 0x72, 0xae, 0x80, 0x4a,
	0xe2, 0x81, 0xd1, 0x81, 0x40, 0x49, 0x37, 0x94, 0x95, 0xa7, 0xe8, 0xda, 0xe9, 0x43, 0xe5, 0x9b,
	0x45, 0x3d, 0xc8, 0x48, 0xe7, 0xf4, 0x07, 0xe3, 0x93, 0x3b, 0x3e, 0x95, 0xbf, 0x2a, 0xe9, 0xeb,
	0x6f, 0x56, 0x45, 0xea, 0xbd, 0x5f, 0xe1, 0xfa, 0x38, 0x2a, 0xf3, 0x01, 0xe1, 0x8b, 0x8e, 0x25,
	0x33, 0xa5, 0x14, 0xe7, 0x08, 0xdb, 0x41, 0x42, 0x50, 0xa2, 0x7e, 0xe3, 0x97, 0xd0, 0xf0, 0xb6,
	0x9f, 0x08, 0x92, 0x3e, 0x73, 0x3b, 0xc0, 0xab, 0x7e, 0xc2, 0x09, 0x86, 0xb6, 0xc5, 0x2f, 0x16,
	0xbf, 0x34, 0xfd, 0x38, 0xde, 0xd0, 0x0f, 0x01, 0xa8, 0x2f, 0xc4, 0xaa, 0x1f, 0xc7, 0x9c, 0x60,
	0xb8, 0x29, 0x7f, 0x32, 0x0a, 0x28, 0xe2, 0x70, 0xab, 0x0c, 0x98, 0x14, 0xdc, 0x7c, 0x10, 0xf1,
	0xb8, 0xf2, 0x27, 0xeb, 0x07, 0xa7, 0xe0, 0x42, 0x06, 0xcd, 0x7e, 0x00, 0x89, 0xe8, 0x87, 0xab,
	0x7e, 0x9b, 0xcb, 0x7b, 0x43, 0x87, 0x2f, 0xef, 0x55, 0x7e, 0xbb, 0xa0, 0x27, 0xe7, 0x46, 0xb5,
	0x86, 0x25, 0x5f, 0x32, 0x92, 0x75, 0xe2, 0x8d, 0x38, 0x6c, 0x47, 0x2e, 0x15, 0x5e, 0x5b, 0x25,
	0x5f, 0x22, 0x8a, 0x9d, 0x8f, 0x6b, 0x00, 0x26, 0xe3, 0xae, 0xd9, 0x60, 0x31, 0x49, 0x9c, 0xa8,
	0x4e, 0x13, 0x31, 0xae, 0x59, 0x26, 0xeb, 0x00, 0xd6, 0x98, 0xf0, 0x86, 0xca, 0x9f, 0x14, 0xd0,
	0xe9, 0xfc, 0xba, 0xf1, 0xd3, 0xb0, 0x3a, 0xf8, 0xbb, 0x45, 0x74, 0xee, 0x80, 0x52, 0xdc, 0x53,
	0xb8, 0x28, 0xfc, 0x6e, 0xbf, 0x2e, 0x95, 0xaf, 0x0f, 0xa1, 0x53, 0xb9, 0x4b, 0x1e, 0xf8, 0x2a,
	0x1a, 0x0d, 0x5b, 0x34, 0xd8, 0x70, 0xc3, 0x20, 0xa1, 0x7b, 0x49, 0x2c, 0xc6, 0x5d, 0xb9, 0xdb,
	0x3b, 0x2d, 0x1a, 0x2c, 0x08, 0x18, 0x19, 0x09, 0xb5, 0x27, 0x66, 0x67, 0x5e, 0x86, 0xe7, 0x13,
	0xa6, 0x68, 0xbe, 0x51, 0x7c, 0x83, 0x17, 0x2f, 0x36, 0x3d, 0x54, 0xbf, 0x99, 0xee, 0x82, 0xc8,
	0x6f, 0x66, 0xb6, 0x88, 0xa8, 0x4d, 0x61, 0xb0, 0xa5, 0x96, 0xff, 0x64, 0x23, 0x93, 0x52, 0x68,
	0x53, 0xa7, 0xcf, 0x1c, 0x19, 0x7b, 0x43, 0x59, 0x4c, 0x26, 0xed, 0xad, 0x64, 0xd0, 0x5b, 0xb1,
	0x72, 0x20, 0xb2, 0xdd, 0x7e, 0xb3, 0xb7, 0xdc, 0xfb, 0xca, 0x62, 0xd3, 0x43, 0xed, 0x89, 0xf5,
	0x76, 0x8b, 0x26, 0xee, 0xb6, 0x51, 0x33, 0x52, 0xbd, 0x85, 0xdb, 0xa6, 0x45, 0x6f, 0xb7, 0xd4,
	0x6f, 0xd6, 0x5b, 0x41, 0x94, 0x16, 0x8c, 0x54, 0x6f, 0x39, 0x0d, 0xf4, 0x76, 0x4b, 0xfe, 0x64,
	0xbd, 0x4d, 0x29, 0x32, 0xd5, 0x22, 0xd5, 0x5b, 0x45, 0x9b, 0xf6, 0x76, 0xcb, 0x6e, 0x62, 0xbd,
	0xe5, 0xbc, 0xcc, 0x52, 0x91, 0xea, 0x2d, 0x30, 0x51, 0xbd, 0xdd, 0xd2, 0x9e, 0xd8, 0xc7, 0x3f,
	0x76, 0xa3, 0xb0, 0xd1, 0x30, 0x6a, 0x44, 0x69, 0x11, 0x16, 0x60, 0xa2, 0x44, 0x16, 0xa7, 0x0f,
	0xcc, 0x4a, 0x92, 0x2e, 0xcd, 0x03, 0x95, 0x95, 0x04, 0x19, 0x94, 0xc8, 0x62, 0xf5, 0x9b, 0xa5,
	0xf8, 0x1a, 0x51, 0x26, 0xe9, 0x53, 0x59, 0x4e, 0x4a, 0x9e, 0x96, 0xc8, 0xe2, 0x4c, 0x1b, 0xbe,
	0x8e, 0xc6, 0x04, 0x3b, 0xd9, 0xef, 0x51, 0xb3, 0x44, 0xc6, 0xf9, 0xa8, 0x12, 0x59, 0xac, 0x3f,
	0xe2, 0x18, 0x0d, 0xd4, 0xa3, 0xb0, 0xdd, 0x92, 0x45, 0xa1, 0xcf, 0x1e, 0x73, 0x51, 0x71, 0xee,
	0x16, 0x70, 0xe3, 0xc1, 0xb1, 0xda, 0x27, 0xc0, 0x1b, 0x89, 0x10, 0x35, 0xfb, 0x16, 0x2a, 0x6b,
	0x68, 0x39, 0xd1, 0xf0, 0x3d, 0xb3, 0x2c, 0x74, 0xdc, 0x95, 0x4e, 0x3d, 0x9c, 0xfe, 0xe1, 0x88,
	0xfe, 0xc9, 0x32, 0x16, 0x6e, 0x8e, 0xb6, 0xd7, 0xe8, 0x23, 0x68, 0x80, 0xfb, 0x40, 0x7b, 0xeb,
	0x3f, 0x77, 0x96, 0x44, 0x40, 0xf1, 0x2b, 0x68, 0x5c, 0xb8, 0x58, 0xe5, 0x5d, 0x4b, 0xe6, 0xc0,
	0x70, 0x02, 0xe9, 0x59, 0x47, 0x9b, 0xfa, 0x23, 0x9b, 0x92, 0x09, 0x8d, 0x9a, 0xf1, 0x86, 0x10,
	0x66, 0xdd, 0xa3, 0xbf, 0xce, 0x60, 0x42, 0x62, 0x39, 0x49, 0x1f, 0xd8, 0xec, 0xd2, 0xe9, 0x52,
	0xe1, 0xfd, 0xe6, 0xec, 0xd2, 0x18, 0xa8, 0x02, 0x52, 0x92, 0x69, 0xc3, 0x2b, 0x68, 0x1a, 0xd6,
	0xd0, 0xbd, 0x0d, 0xbe, 0xd1, 0x46, 0xaa, 0x33, 0x60, 0x66, 0xe4, 0xb0, 0xdc, 0xee, 0xf1, 0x3d,
	0x39, 0x42, 0x2b, 0x1c, 0x67, 0xda, 0xb0, 0x8b, 0x9e, 0xcb, 0xe3, 0x96, 0x2a, 0x39, 0x68, 0xe6,
	0xe4, 0x59, 0xb6, 0x52, 0xd7, 0xb3, 0x71, 0x27, 0x10, 0x5e, 0x46, 0x53, 0xac, 0x23, 0x1b, 0xbb,
	0xd4, 0x4d, 0xc2, 0x48, 0x69, 0xcc, 0xb7, 0x79, 0xa4, 0xdf, 0x5e, 0x1a, 0x35, 0xef, 0x73, 0x0c,
	0xa1, 0xf0, 0x64, 0x62, 0x37, 0x41, 0x99, 0x26, 0xcb, 0x2a, 0x55, 0x77, 0xd8, 0x2a, 0xd3, 0xd8,
	0x0c, 0xd2, 0x0a, 0x42, 0x07, 0x08, 0x1b, 0xe6, 0x20, 0xd4, 0x86, 0x19, 0x99, 0xc3, 0x7c, 0x3b,
	0xd4, 0x86, 0x39, 0x08, 0x8d, 0x61, 0xd6, 0xe9, 0x52, 0x95, 0xca, 0xe6, 0x30, 0x6b, 0x0c, 0xd4,
	0x30, 0x07, 0x99, 0x36, 0x16, 0x67, 0x79, 0xa1, 0xbb, 0x01, 0xaf, 0x89, 0xd2, 0x85, 0x17, 0xac,
	0x55, 0x9c, 0xb5, 0x18, 0xba, 0xf7, 0x01, 0x2e, 0xf4, 0x19, 0xf7, 0xcc, 0x06, 0xfc, 0x79, 0x34,
	0x9b, 0x61, 0x92, 0x2a, 0xc6, 0xbd, 0x92, 0xda, 0xb7, 0x6c, 0x71, 0x93, 0xca, 0x9d, 0xf6, 0x72,
	0xdb, 0xd9, 0xa0, 0xf2, 0xc5, 0x8f, 0x47, 0x91, 0x9f, 0xd0, 0x48, 0xaa, 0x38, 0x66, 0x0e, 0x2a,
	0x94, 0x82, 0x1f, 0x00, 0x86, 0x1c, 0x54, 0xdf, 0x6e, 0x62, 0x83, 0x9a, 0xc3, 0x2a, 0x55, 0x74,
	0xdc, 0x1c, 0xd4, 0x0c, 0x4f, 0x35, 0xa8, 0x7e, 0x07, 0x08, 0xae, 0xa1, 0x33, 0xa6, 0x04, 0x67,
	0x4f, 0x2a, 0x3c, 0x01, 0x0a, 0xab, 0x8b, 0x54, 0x74, 0xe6, 0xce, 0x9e, 0xd0, 0x79, 0xda, 0xcf,
	0x69, 0xc5, 0x6f, 0xa2, 0x8b, 0x1d, 0x98, 0xa6, 0xaa, 0x4f, 0x82, 0xea, 0xea, 0x7f, 0x78, 0xe4,
	0x71, 0x97, 0xda, 0x9f, 0xf3, 0x3b, 0x03, 0xf1, 0x4d, 0x84, 0xc5, 0x49, 0xa7, 0x8d, 0xa6, 0xd3,
	0x92, 0xba, 0x63, 0xb3, 0xcc, 0x29, 0x0e, 0x45, 0xad, 0x3a, 0x2d, 0xa1, 0xf7, 0xc4, 0xae, 0xd5,
	0x82, 0xbf, 0x88, 0xce, 0x65, 0xf9, 0xa4, 0xea, 0x4e, 0x81, 0xba, 0x6a, 0x93, 0xbc, 0xcd, 0x50,
	0xfd, 0xdb, 0x81, 0xdd, 0x7c, 0x00, 0x7e, 0x05, 0x8d, 0x6e, 0xf9, 0x7b, 0xd4, 0xdb, 0xd8, 0xf4,
	0x93, 0x8d, 0x98, 0x26, 0x33, 0xd3, 0xe6, 0x74, 0xb8, 0xc9, 0x80, 0x55, 0x3f, 0xa9, 0xd1, 0x44,
	0xbe, 0x43, 0x5b, 0x69, 0x13, 0x76, 0xd0, 0x73, 0x06, 0x79, 0x46, 0xbf, 0x53, 0xe6, 0x4c, 0xc8,
	0xb0, 0x53, 0x33, 0x61, 0xab, 0x03, 0xa4, 0xb2, 0xa6, 0x27, 0xbb, 0xd6, 0x86, 0x28, 0x3b, 0xd7,
	0x2c, 0x1c, 0x25, 0xd7, 0xac, 0xec, 0xea, 0xe5, 0x86, 0x74, 0xd7, 0xd3, 0xbb, 0xbe, 0x0d, 0xf9,
	0x9b, 0x46, 0xaa, 0x67, 0xec, 0x41, 0xc0, 0x97, 0x11, 0x52, 0x47, 0xf0, 0x63, 0xbb, 0x1f, 0xea,
	0x9c, 0x7e, 0x4c, 0x34, 0xac, 0x9e, 0x37, 0x2e, 0x97, 0x8e, 0xbe, 0x6d, 0xfa, 0x54, 0xee, 0x1e,
	0x9b, 0x6e, 0x56, 0x7f, 0x54, 0x7a, 0x58, 0x3c, 0x72, 0x7a, 0x58, 0x3a, 0x46, 0x7a, 0xd8, 0xd7,
	0x43, 0x7a, 0xf8, 0xc3, 0x02, 0x1a, 0x5e, 0xbb, 0x55, 0xa3, 0x49, 0xe2, 0x07, 0xf5, 0x23, 0xdc,
	0x58, 0x75, 0x45, 0x2d, 0x4c, 0xdd, 0x57, 0x11, 0x96, 0x76, 0x43, 0xc2, 0x82, 0x06, 0x23, 0x06,
	0x26, 0xdc, 0xad, 0x40, 0xb7, 0x9c, 0x76, 0x43, 0x50, 0x96, 0xac, 0xbb, 0x15, 0x34, 0x18, 0x31,
	0x30, 0xa1, 0x9c, 0x14, 0xf8, 0x99, 0xfb, 0xfa, 0xef, 0x05, 0x7e, 0x42, 0x00, 0x02, 0xe7, 0x29,
	0x79, 0x85, 0xa0, 0xdf, 0x3a, 0x4f, 0xc9, 0x0b, 0x03, 0x02, 0x5a, 0x99, 0x46, 0x78, 0x2d, 0x8c,
	0x93, 0x7a, 0x44, 0xe3, 0xaa, 0xe3, 0xee, 0xb4, 0x5b, 0x70, 0xeb, 0xc8, 0x6f, 0x15, 0xd0, 0x69,
	0xd9, 0x9c, 0x1e, 0xab, 0x93, 0x07, 0xa7, 0xad, 0xe3, 0x95, 0x7c, 0xcc, 0x8f, 0x7a, 0xbc, 0x32,
	0xf7, 0xfa, 0x2a, 0x2b, 0x4b, 0x3e, 0xd2, 0xf5, 0x55, 0x7f, 0x5c, 0x44, 0xe3, 0x52, 0xc7, 0x93,
	0x3b, 0x78, 0xbc, 0x61, 0x9c, 0xff, 0xe8, 0x62, 0x05, 0xc0, 0x52, 0xb5, 0xe3, 0xd9, 0x63, 0xcf,
	0x3a, 0x7b, 0x7c, 0xbd, 0xbb, 0xb3, 0xc7, 0x52, 0xcc, 0x21, 0xc7, 0x8f, 0xff, 0xbe, 0x80, 0xa6,
	0x2c, 0x8d, 0x4e, 0xe0, 0x6c, 0xc9, 0x97, 0xcc, 0xb3, 0x25, 0x57, 0x7b, 0xb6, 0x5e, 0x87, 0x73,
	0x25, 0x7f, 0xda, 0x9f, 0xe9, 0x55, 0xb7, 0xe7, 0x90, 0x5f, 0x46, 0xa3, 0xe9, 0x7d, 0x46, 0xf7,
	0xc8, 0x8a, 0x78, 0x9d, 0xd3, 0x7f, 0x0f, 0xa2, 0x03, 0x89, 0x89, 0xab, 0x1d, 0x62, 0x2e, 0x1d,
	0xe9, 0x10, 0x73, 0x5f, 0xc7, 0x43, 0xcc, 0xbf, 0x5c, 0x50, 0xf7, 0x0b, 0xc8, 0x7d, 0x77, 0x6d,
	0x96, 0x71, 0x94, 0xba, 0xdb, 0xc3, 0x27, 0x8d, 0x41, 0x6c, 0x56, 0x99, 0x4b, 0x0a, 0x52, 0x10,
	0xc9, 0x0a, 0xc6, 0x5f, 0x2d, 0xa0, 0x31, 0xd7, 0xf0, 0x03, 0x62, 0xcb, 0xec, 0x67, 0xba, 0xd7,
	0xc5, 0xf4, 0x27, 0xfa, 0x75, 0x30, 0x7a, 0x3b, 0xb1, 0xe4, 0xe1, 0x16, 0x42, 0x9b, 0xca, 0x41,
	0x89, 0xbd, 0xb4, 0xd7, 0xbb, 0x97, 0x9e, 0x3a, 0xb9, 0xf4, 0x45, 0x4f, 0xdb, 0x88, 0x26, 0x83,
	0x49, 0xdc, 0x75, 0xdc, 0x76, 0xbb, 0x09, 0x12, 0x87, 0x7a, 0x95, 0x78, 0x5f, 0xf1, 0x48, 0x25,
	0xa6, 0x6d, 0x44, 0x93, 0x51, 0xf9, 0x87, 0x42, 0xea, 0xd2, 0x4e, 0xee, 0xd4, 0xee, 0xb1, 0x5d,
	0xda, 0x61, 0x07, 0x77, 0x75, 0x67, 0x73, 0x72, 0x67, 0x77, 0x8f, 0xef, 0x6c, 0x0e, 0x3e, 0xbe,
	0xfb, 0x33, 0x99, 0x4e, 0x81, 0xaf, 0xd9, 0xb2, 0x4f, 0xf0, 0xbe, 0xdc, 0x9b, 0xe0, 0xc3, 0x0e,
	0xf1, 0xfe, 0x4e, 0x19, 0x4d, 0x66, 0xf0, 0x99, 0xa7, 0x6b, 0xc7, 0x34, 0xba, 0xb3, 0xbc, 0x68,
	0x87, 0x62, 0xf7, 0x78, 0x33, 0x91, 0x70, 0xfc, 0x09, 0x54, 0x96, 0xf7, 0x35, 0x31, 0x74, 0x2b,
	0x6c, 0x5d, 0x4c, 0x41, 0x44, 0xc7, 0x63, 0x11, 0x1c, 0xd4, 0x35, 0x85, 0x8b, 0x53, 0xb6, 0x01,
	0x1d, 0x08, 0x87, 0x41, 0xdd, 0xc7, 0x69, 0x34, 0x64, 0x00, 0x96, 0xd6, 0x7d, 0x58, 0x23, 0xe1,
	0x30, 0xe6, 0x05, 0xa3, 0xf0, 0x91, 0xac, 0xa3, 0xa8, 0x89, 0x43, 0xc2, 0x47, 0x31, 0x01, 0x88,
	0xfa, 0x2f, 0x68, 0xb9, 0x77, 0x35, 0x15, 0xac, 0xff, 0x82, 0x96, 0xb9, 0xd0, 0x28, 0x9f, 0x16,
	0xaf, 0xa2, 0xa9, 0xa6, 0x9f, 0x7f, 0x29, 0x53, 0x41, 0x3f, 0x77, 0x92, 0xbd, 0x21, 0x29, 0x8f,
	0x0e, 0xd8, 0x39, 0x7b, 0xb9, 0x37, 0x2f, 0xe9, 0xec, 0xb2, 0x28, 0x24, 0x8f, 0x8e, 0x7d, 0x7f,
	0xe2, 0x6d, 0x27, 0xa2, 0x5e, 0xb5, 0xb1, 0x13, 0xbf, 0xea, 0x67, 0xb6, 0xe7, 0xd5, 0x74, 0x20,
	0x31, 0x71, 0x59, 0x6c, 0x96, 0x36, 0x10, 0xea, 0xc8, 0x33, 0xba, 0xca, 0xc7, 0xd6, 0x0c, 0x28,
	0xb1, 0xb0, 0x59, 0x6c, 0x96, 0xb6, 0x2c, 0xfa, 0x51, 0xe2, 0x8b, 0xed, 0x79, 0x5a, 0x6c, 0x56,
	0xb3, 0x11, 0x48, 0x96, 0xc6, 0x64, 0xc4, 0x52, 0xe2, 0x84, 0x06, 0xa2, 0x1a, 0x9b, 0xc3, 0x48,
	0x20, 0x90, 0x2c, 0x0d, 0x9c, 0x6b, 0x0e, 0x5d, 0xa7, 0x21, 0xad, 0x61, 0x5d, 0x24, 0xbc, 0xa2,
	0xc1, 0x88, 0x81, 0xc9, 0x0c, 0xa9, 0x9e, 0xc1, 0x14, 0x63, 0xa6, 0x21, 0x57, 0x74, 0x20, 0x31,
	0x71, 0xf1, 0x22, 0x9a, 0x50, 0x0d, 0xd2, 0x0e, 0xe3, 0xe6, 0xde, 0xa6, 0x15, 0x0b, 0x4e, 0x32,
	0x14, 0x06, 0x17, 0x69, 0x84, 0x89, 0x0e, 0x5c, 0xa4, 0x0d, 0x32, 0x14, 0x70, 0x33, 0x2a, 0x6d,
	0xb6, 0x54, 0x3f, 0x26, 0xad, 0xf5, 0x6c, 0x0d, 0x46, 0x0c, 0x4c, 0x3c, 0x8f, 0xc6, 0xe5, 0xb3,
	0x14, 0x8f, 0xcd, 0x95, 0xbe, 0x75, 0x13, 0x4c, 0x6c, 0x7c, 0xfc, 0x39, 0x74, 0x66, 0xb3, 0xb1,
	0xc3, 0xb8, 0x65, 0x66, 0xf8, 0x14, 0xcc, 0x70, 0x55, 0x6b, 0xa8, 0xe6, 0xa3, 0x91, 0x4e, 0xf4,
	0xac, 0x5f, 0x9b, 0x8d, 0x1d, 0xa8, 0x97, 0xc0, 0xad, 0x03, 0xd3, 0xc0, 0x4f, 0xf5, 0xab, 0xaa,
	0xc1, 0x88, 0x81, 0xc9, 0x5e, 0xb9, 0xcd, 0xf6, 0xd6, 0x16, 0x8d, 0x5e, 0xf5, 0x13, 0xb1, 0x6b,
	0xc0, 0xa9, 0x53, 0x28, 0x2e, 0x68, 0xaf, 0x5c, 0x35, 0x8b, 0x42, 0xf2, 0xe8, 0xf0, 0xeb, 0x68,
	0x86, 0x1b, 0x3d, 0x87, 0xe7, 0x69, 0xe0, 0xa9, 0x0a, 0x16, 0x2b, 0x1d, 0xf0, 0x48, 0x47, 0x0e,
	0x95, 0xaf, 0x15, 0xd1, 0xd9, 0x8e, 0x61, 0x18, 0x1b, 0x22, 0xa7, 0xa5, 0x1a, 0xb5, 0x7f, 0x7b,
	0xa3, 0x86, 0x68, 0xde, 0x04, 0x13, 0x1b, 0x9f, 0xf9, 0x5a, 0x16, 0x56, 0xca, 0xc4, 0x53, 0xf9,
	0x5a, 0x26, 0x01, 0x0e, 0x6c, 0x39, 0x09, 0x5c, 0xc3, 0x00, 0x55, 0xae, 0x15, 0xa7, 0x2e, 0x12,
	0x7e, 0xf5, 0xe9, 0x7c, 0x20, 0xda, 0x89, 0xc2, 0x60, 0xd8, 0x70, 0x1c, 0x87, 0x61, 0x5b, 0xcb,
	0x89, 0x37, 0x45, 0x3b, 0x51, 0x18, 0xf8, 0x12, 0x1a, 0x66, 0x11, 0xa3, 0xb3, 0xcf, 0xd0, 0xad,
	0xd5, 0x44, 0x22, 0x01, 0x24, 0xc5, 0xa9, 0xbc, 0xa3, 0x65, 0x97, 0x3f, 0xae, 0x07, 0xf8, 0xdf,
	0x29, 0xa0, 0xd9, 0xfc, 0x3e, 0x9e, 0x40, 0xe8, 0x43, 0xcd, 0xd0, 0xa7, 0x87, 0x20, 0xfd, 0x48,
	0xc7, 0xf8, 0xff, 0xb1, 0x80, 0x26, 0x14, 0x01, 0xaf, 0x97, 0x9c, 0x44, 0xbc, 0xfa, 0x86, 0x31,
	0x82, 0x37, 0x7a, 0xe8, 0x9c, 0xd0, 0xb5, 0xe3, 0xe0, 0x7d, 0xa7, 0x80, 0xa6, 0x6d, 0xe4, 0x13,
	0x18, 0xb6, 0x0d, 0x73, 0xd8, 0xae, 0xf5, 0xde, 0xb3, 0x0e, 0x03, 0xb6, 0x9f, 0xed, 0x56, 0x8d,
	0xdf, 0x77, 0x36, 0x14, 0x8b, 0x67, 0x11, 0xb4, 0x7e, 0xbc, 0x0b, 0xd9, 0xb2, 0x56, 0xa6, 0x5f,
	0x05, 0xc2, 0x99, 0x11, 0xc5, 0xb6, 0xf2, 0x1b, 0x85, 0xb4, 0xd0, 0x94, 0x66, 0x3f, 0xf8, 0x32,
	0x42, 0x4e, 0x3b, 0x09, 0x79, 0x8b, 0xbd, 0xd5, 0x62, 0x5e, 0x41, 0x88, 0x86, 0x95, 0xfe, 0xff,
	0x6f, 0xfe, 0xbc, 0x16, 0x85, 0x2e, 0x8d, 0x65, 0x0d, 0xc9, 0xfa, 0xff, 0xdf, 0x06, 0x0a, 0xc9,
	0xa3, 0xab, 0xfc, 0x67, 0x01, 0x4d, 0x12, 0xea, 0xf9, 0xb1, 0xf1, 0xcf, 0xc8, 0x2e, 0xa2, 0x3e,
	0x6f, 0x73, 0xd9, 0xb3, 0xeb, 0x7e, 0x8b, 0xd5, 0x65, 0x8f, 0x00, 0x84, 0x61, 0xec, 0xd0, 0xfd,
	0xd8, 0x3e, 0x24, 0xfe, 0x59, 0xba, 0x1f, 0x13, 0x80, 0xe0, 0xbb, 0x68, 0x90, 0xee, 0xb5, 0xfc,
	0x88, 0xca, 0x5a, 0x4e, 0x37, 0x57, 0xea, 0xc0, 0x01, 0xcc, 0x25, 0x4e, 0x4e, 0x24, 0x1f, 0xb8,
	0x23, 0x6b, 0xb7, 0xbe, 0xbe, 0xbe, 0x92, 0x73, 0x83, 0x4d, 0x7a, 0x47, 0x56, 0x06, 0x83, 0xe4,
	0x50, 0xc1, 0xb5, 0x7d, 0xd0, 0xf1, 0xa7, 0xe0, 0xda, 0x3e, 0x5d, 0xcf, 0x77, 0xeb, 0xda, 0x3e,
	0x90, 0x71, 0x84, 0x6b, 0xfb, 0x74, 0x5d, 0xde, 0xd7, 0x77, 0x50, 0xe9, 0x8a, 0x76, 0xf0, 0x08,
	0x3f, 0x18, 0x30, 0xfb, 0xf3, 0x9e, 0x5e, 0xdb, 0x27, 0x37, 0x34, 0xad, 0x85, 0x0d, 0xdf, 0x95,
	0x0b, 0xf4, 0x2a, 0x77, 0x59, 0x32, 0xa0, 0xc4, 0xc2, 0x66, 0x9e, 0xa4, 0xe9, 0xec, 0xc9, 0x9b,
	0xe7, 0xfa, 0xcd, 0x25, 0x93, 0x55, 0x05, 0x21, 0x1a, 0x16, 0x0b, 0xd0, 0x5d, 0x79, 0x5f, 0x9b,
	0xa4, 0x1c, 0x30, 0x03, 0xf4, 0x05, 0x0b, 0x4e, 0x32, 0x14, 0x4c, 0xf3, 0xcd, 0x46, 0xe8, 0xee,
	0xa4, 0x3c, 0x06, 0xcd, 0xac, 0xab, 0x6a, 0x40, 0x89, 0x85, 0x0d, 0xdb, 0xdb, 0x59, 0xa6, 0xca,
	0x3c, 0x47, 0xee, 0x71, 0x0d, 0x70, 0x29, 0x29, 0x0e, 0xcb, 0xdc, 0xb9, 0x3f, 0xf0, 0x80, 0x64,
	0xd8, 0xcc, 0xdc, 0x97, 0x52, 0x10, 0xd1, 0xf1, 0x80, 0x8c, 0xd9, 0x4c, 0x90, 0x59, 0x5b, 0x72,
	0x96, 0x52, 0x10, 0xd1, 0xf1, 0x98, 0xbb, 0x8d, 0xa8, 0x4b, 0xfd, 0x5d, 0xf3, 0x5e, 0xbe, 0xb2,
	0xe9, 0x6e, 0x49, 0x16, 0x85, 0xe4, 0xd1, 0x71, 0x76, 0x6f, 0x72, 0x03, 0x6a, 0xec, 0x46, 0x6c,
	0x76, 0x19, 0x14, 0x92, 0x47, 0x87, 0xb7, 0xd1, 0xb3, 0x71, 0x23, 0x7c, 0xb4, 0x12, 0xd6, 0xd5,
	0xf5, 0x86, 0xab, 0x7e, 0xe4, 0x86, 0xd2, 0x35, 0x8e, 0x9a, 0x37, 0x20, 0xd7, 0x0e, 0xc0, 0x25,
	0x07, 0x72, 0x82, 0xcc, 0x9c, 0xc3, 0x57, 0x9d, 0xbd, 0x15, 0x1a, 0xd8, 0x09, 0x65, 0x4d, 0x07,
	0x12, 0x13, 0x17, 0x2e, 0xe3, 0x83, 0xf7, 0xec, 0x29, 0xb8, 0x8c, 0x4f, 0xd7, 0xf3, 0xc0, 0xcb,
	0xf8, 0x74, 0xc4, 0xf7, 0xbf, 0x23, 0x3c, 0xf4, 0x32, 0x3e, 0xbb, 0xdf, 0xc7, 0xba, 0x8c, 0x4f,
	0x31, 0x3b, 0xac, 0x8e, 0xf7, 0xf5, 0x22, 0x1a, 0x33, 0x91, 0x99, 0xff, 0x85, 0x32, 0x9a, 0x08,
	0x3f, 0x4a, 0x26, 0xf5, 0xfe, 0xb2, 0x47, 0x24, 0x1c, 0x6f, 0xa1, 0x31, 0xb5, 0x4b, 0x91, 0x9f,
	0x8f, 0x29, 0x76, 0x1d, 0x69, 0xc0, 0xbf, 0x21, 0xb8, 0x6b, 0x70, 0x21, 0x16, 0x57, 0x7c, 0x1f,
	0x9d, 0xa6, 0x7b, 0xd4, 0x95, 0x0b, 0xa5, 0xda, 0x0b, 0x56, 0x32, 0x77, 0xa1, 0x2c, 0xe5, 0x62,
	0x91, 0x0e, 0xd4, 0xf8, 0x59, 0xd4, 0xe7, 0x44, 0x75, 0x16, 0xc1, 0x94, 0x5e, 0x18, 0xe6, 0xa7,
	0x56, 0xe6, 0xa3, 0x7a, 0x4c, 0xa0, 0xb5, 0xf2, 0x2f, 0x05, 0x34, 0xc5, 0xbf, 0xca, 0x27, 0x9d,
	0x25, 0xba, 0xc6, 0xcb, 0x33, 0xdf, 0xe5, 0xb8, 0x77, 0x71, 0xc9, 0x5b, 0x0e, 0xfe, 0xfb, 0xfa,
	0x92, 0xb7, 0x1c, 0x7d, 0x3b, 0xbc, 0x51, 0x3f, 0x9f, 0xdf, 0x3b, 0x98, 0xe1, 0x8d, 0xec, 0xff,
	0xc6, 0x7d, 0xb9, 0x4b, 0x1d, 0x8e, 0xfe, 0x9f, 0x71, 0xab, 0x73, 0xdf, 0x7a, 0xe7, 0xfc, 0x33,
	0xdf, 0x7e, 0xe7, 0xfc, 0x33, 0xdf, 0x7d, 0xe7, 0xfc, 0x33, 0x5f, 0x7d, 0x72, 0xbe, 0xf0, 0xad,
	0x27, 0xe7, 0x0b, 0xdf, 0x7e, 0x72, 0xbe, 0xf0, 0xdd, 0x27, 0xe7, 0x0b, 0xdf, 0x7b, 0x72, 0xbe,
	0xf0, 0xb5, 0xef, 0x9f, 0x7f, 0xe6, 0xf3, 0x43, 0x92, 0xff, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x98, 0xa6, 0x07, 0xca, 0xfa, 0x89, 0x00, 0x00,
}

func (m *ElasticsearchClusterHealth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElasticsearchClusterHealth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElasticsearchClusterHealth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.TaskMaxWaitingInQueueMilliSeconds))
	i--
	dAtA[i] = 0x70
	i = encodeVarintGenerated(dAtA, i, uint64(m.UnassignedShards))
	i--
	dAtA[i] = 0x68
	i -= len(m.ClusterStatus)
	copy(dAtA[i:], m.ClusterStatus)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterStatus)))
	i--
	dAtA[i] = 0x62
	i = encodeVarintGenerated(dAtA, i, uint64(m.RelocatingShards))
	i--
	dAtA[i] = 0x58
	i = encodeVarintGenerated(dAtA, i, uint64(m.NumberOfPendingTasks))
	i--
	dAtA[i] = 0x50
	i = encodeVarintGenerated(dAtA, i, uint64(m.NumberOfNodes))
	i--
	dAtA[i] = 0x48
	i = encodeVarintGenerated(dAtA, i, uint64(m.NumberOfInFlightFetch))
	i--
	dAtA[i] = 0x40
	i = encodeVarintGenerated(dAtA, i, uint64(m.NumberOfDataNodes))
	i--
	dAtA[i] = 0x38
	i = encodeVarintGenerated(dAtA, i, uint64(m.InitializingShards))
	i--
	dAtA[i] = 0x30
	i = encodeVarintGenerated(dAtA, i, uint64(m.DelayedUnassignedShards))
	i--
	dAtA[i] = 0x28
	i -= len(m.ClusterName)
	copy(dAtA[i:], m.ClusterName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterName)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintGenerated(dAtA, i, uint64(m.ActiveShardsPercentAsNumber))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.ActiveShards))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.ActivePrimaryShards))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ElasticsearchIndexSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElasticsearchIndexSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElasticsearchIndexSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.TotalStoreSizeInBytes)
	copy(dAtA[i:], m.TotalStoreSizeInBytes)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TotalStoreSizeInBytes)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.PrimaryStoreSizeInBytes)
	copy(dAtA[i:], m.PrimaryStoreSizeInBytes)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PrimaryStoreSizeInBytes)))
	i--
	dAtA[i] = 0x12
	i -= len(m.IndexName)
	copy(dAtA[i:], m.IndexName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IndexName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ElasticsearchInsight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElasticsearchInsight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElasticsearchInsight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ElasticsearchInsightList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElasticsearchInsightList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElasticsearchInsightList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ElasticsearchInsightSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElasticsearchInsightSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElasticsearchInsightSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClusterHealth.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	i -= len(m.Mode)
	copy(dAtA[i:], m.Mode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mode)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ElasticsearchNodesStatSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElasticsearchNodesStatSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElasticsearchNodesStatSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OS != nil {
		{
			size, err := m.OS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Indices != nil {
		{
			size, err := m.Indices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Roles[iNdEx])
			copy(dAtA[i:], m.Roles[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Roles[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	i -= len(m.IP)
	copy(dAtA[i:], m.IP)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IP)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0x22
	i -= len(m.TransportAddr)
	copy(dAtA[i:], m.TransportAddr)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TransportAddr)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ElasticsearchNodesStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElasticsearchNodesStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElasticsearchNodesStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ElasticsearchNodesStatsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElasticsearchNodesStatsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElasticsearchNodesStatsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ElasticsearchNodesStatsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElasticsearchNodesStatsSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElasticsearchNodesStatsSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ElasticsearchNodesStatsStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElasticsearchNodesStatsStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElasticsearchNodesStatsStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ElasticsearchSchemaOverview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElasticsearchSchemaOverview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElasticsearchSchemaOverview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ElasticsearchSchemaOverviewList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElasticsearchSchemaOverviewList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElasticsearchSchemaOverviewList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ElasticsearchSchemaOverviewSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElasticsearchSchemaOverviewSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElasticsearchSchemaOverviewSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Indices) > 0 {
		for iNdEx := len(m.Indices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Indices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenericDatabaseSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericDatabaseSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenericDatabaseSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.TableSizeInBytes)
	copy(dAtA[i:], m.TableSizeInBytes)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TableSizeInBytes)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.TableName)
	copy(dAtA[i:], m.TableName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TableName)))
	i--
	dAtA[i] = 0x12
	i -= len(m.DatabaseName)
	copy(dAtA[i:], m.DatabaseName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DatabaseName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenericSchemaOverviewSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericSchemaOverviewSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenericSchemaOverviewSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Databases) > 0 {
		for iNdEx := len(m.Databases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Databases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MariaDBInsight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MariaDBInsight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MariaDBInsight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MariaDBInsightList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MariaDBInsightList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MariaDBInsightList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MariaDBInsightSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MariaDBInsightSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MariaDBInsightSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.ThreadsRunning))
	i--
	dAtA[i] = 0x70
	i = encodeVarintGenerated(dAtA, i, uint64(m.ThreadsCreated))
	i--
	dAtA[i] = 0x68
	i = encodeVarintGenerated(dAtA, i, uint64(m.ThreadsConnected))
	i--
	dAtA[i] = 0x60
	i = encodeVarintGenerated(dAtA, i, uint64(m.ThreadsCached))
	i--
	dAtA[i] = 0x58
	i = encodeVarintGenerated(dAtA, i, uint64(m.AbortedConnections))
	i--
	dAtA[i] = 0x50
	i = encodeVarintGenerated(dAtA, i, uint64(m.AbortedClients))
	i--
	dAtA[i] = 0x48
	i = encodeVarintGenerated(dAtA, i, uint64(m.NumberOfSlowQueries))
	i--
	dAtA[i] = 0x40
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LongQueryTimeThresholdSeconds))))
	i--
	dAtA[i] = 0x39
	i = encodeVarintGenerated(dAtA, i, uint64(m.Questions))
	i--
	dAtA[i] = 0x30
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxUsedConnections))
	i--
	dAtA[i] = 0x28
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxConnections))
	i--
	dAtA[i] = 0x20
	i -= len(m.Mode)
	copy(dAtA[i:], m.Mode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mode)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MariaDBQueries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MariaDBQueries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MariaDBQueries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MariaDBQueriesList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MariaDBQueriesList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MariaDBQueriesList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MariaDBQueriesSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MariaDBQueriesSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MariaDBQueriesSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for iNdEx := len(m.Queries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Queries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MariaDBQuerySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MariaDBQuerySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MariaDBQuerySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.RowsAffected))
	i--
	dAtA[i] = 0x68
	i = encodeVarintGenerated(dAtA, i, uint64(m.ThreadId))
	i--
	dAtA[i] = 0x60
	i -= len(m.SQLText)
	copy(dAtA[i:], m.SQLText)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SQLText)))
	i--
	dAtA[i] = 0x5a
	i = encodeVarintGenerated(dAtA, i, uint64(m.ServerId))
	i--
	dAtA[i] = 0x50
	i = encodeVarintGenerated(dAtA, i, uint64(m.InsertId))
	i--
	dAtA[i] = 0x48
	i = encodeVarintGenerated(dAtA, i, uint64(m.LastInsertId))
	i--
	dAtA[i] = 0x40
	i -= len(m.DB)
	copy(dAtA[i:], m.DB)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DB)))
	i--
	dAtA[i] = 0x3a
	i = encodeVarintGenerated(dAtA, i, uint64(m.RowsExamined))
	i--
	dAtA[i] = 0x30
	i = encodeVarintGenerated(dAtA, i, uint64(m.RowsSent))
	i--
	dAtA[i] = 0x28
	i -= len(m.LockTimeInMilliSeconds)
	copy(dAtA[i:], m.LockTimeInMilliSeconds)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.LockTimeInMilliSeconds)))
	i--
	dAtA[i] = 0x22
	i -= len(m.QueryTimeInMilliSeconds)
	copy(dAtA[i:], m.QueryTimeInMilliSeconds)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.QueryTimeInMilliSeconds)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.UserHost)
	copy(dAtA[i:], m.UserHost)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.UserHost)))
	i--
	dAtA[i] = 0x12
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MariaDBSchemaOverview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MariaDBSchemaOverview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MariaDBSchemaOverview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MariaDBSchemaOverviewList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MariaDBSchemaOverviewList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MariaDBSchemaOverviewList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MongoDBCollectionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBCollectionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBCollectionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalSize) > 0 {
		for iNdEx := len(m.TotalSize) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintGenerated(dAtA, i, uint64(m.TotalSize[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MongoDBConnectionsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBConnectionsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBConnectionsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.ActiveConnections))
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.AvailableConnections))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalConnections))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.CurrentConnections))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MongoDBDatabaseStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBDatabaseStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBDatabaseStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.IndexSize))
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalIndexes))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.DataSize))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalCollections))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MongoDBInsight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBInsight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBInsight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MongoDBInsightList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBInsightList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBInsightList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MongoDBInsightSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBInsightSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBInsightSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReplicaSetInfo != nil {
		{
			size, err := m.ReplicaSetInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ShardsInfo != nil {
		{
			size, err := m.ShardsInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.DBStats != nil {
		{
			size, err := m.DBStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Connections != nil {
		{
			size, err := m.Connections.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MongoDBQueries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBQueries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBQueries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MongoDBQueriesList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBQueriesList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBQueriesList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MongoDBQueriesSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBQueriesSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBQueriesSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for iNdEx := len(m.Queries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Queries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MongoDBQuerySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBQuerySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBQuerySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxExecutionTimeMilliSeconds))
	i--
	dAtA[i] = 0x40
	i = encodeVarintGenerated(dAtA, i, uint64(m.MinExecutionTimeMilliSeconds))
	i--
	dAtA[i] = 0x38
	i = encodeVarintGenerated(dAtA, i, uint64(m.AvgExecutionTimeMilliSeconds))
	i--
	dAtA[i] = 0x30
	i = encodeVarintGenerated(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x28
	i -= len(m.Command)
	copy(dAtA[i:], m.Command)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Command)))
	i--
	dAtA[i] = 0x22
	i -= len(m.CollectionName)
	copy(dAtA[i:], m.CollectionName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CollectionName)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.DatabaseName)
	copy(dAtA[i:], m.DatabaseName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DatabaseName)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Operation)
	copy(dAtA[i:], m.Operation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Operation)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MongoDBReplicaSetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBReplicaSetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBReplicaSetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.NumberOfReplicas))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MongoDBSchemaOverview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBSchemaOverview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBSchemaOverview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MongoDBSchemaOverviewList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBSchemaOverviewList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBSchemaOverviewList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MongoDBSchemaOverviewSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBSchemaOverviewSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBSchemaOverviewSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Collections) > 0 {
		for iNdEx := len(m.Collections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MongoDBShardsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MongoDBShardsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MongoDBShardsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.ChunksBalanced {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i--
	if m.BalancerEnabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.NumberOfChunks))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.ReplicasPerShards))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.NumberOfShards))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MySQLInsight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLInsight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MySQLInsight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MySQLInsightList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLInsightList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MySQLInsightList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MySQLInsightSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLInsightSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MySQLInsightSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.ThreadsRunning))
	i--
	dAtA[i] = 0x70
	i = encodeVarintGenerated(dAtA, i, uint64(m.ThreadsCreated))
	i--
	dAtA[i] = 0x68
	i = encodeVarintGenerated(dAtA, i, uint64(m.ThreadsConnected))
	i--
	dAtA[i] = 0x60
	i = encodeVarintGenerated(dAtA, i, uint64(m.ThreadsCached))
	i--
	dAtA[i] = 0x58
	i = encodeVarintGenerated(dAtA, i, uint64(m.AbortedConnections))
	i--
	dAtA[i] = 0x50
	i = encodeVarintGenerated(dAtA, i, uint64(m.AbortedClients))
	i--
	dAtA[i] = 0x48
	i = encodeVarintGenerated(dAtA, i, uint64(m.NumberOfSlowQueries))
	i--
	dAtA[i] = 0x40
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LongQueryTimeThresholdSeconds))))
	i--
	dAtA[i] = 0x39
	i = encodeVarintGenerated(dAtA, i, uint64(m.Questions))
	i--
	dAtA[i] = 0x30
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxUsedConnections))
	i--
	dAtA[i] = 0x28
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxConnections))
	i--
	dAtA[i] = 0x20
	i -= len(m.Mode)
	copy(dAtA[i:], m.Mode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mode)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MySQLQueries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLQueries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MySQLQueries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MySQLQueriesList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLQueriesList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MySQLQueriesList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MySQLQueriesSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLQueriesSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MySQLQueriesSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for iNdEx := len(m.Queries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Queries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MySQLQuerySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLQuerySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MySQLQuerySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.ThreadId))
	i--
	dAtA[i] = 0x60
	i -= len(m.SQLText)
	copy(dAtA[i:], m.SQLText)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SQLText)))
	i--
	dAtA[i] = 0x5a
	i = encodeVarintGenerated(dAtA, i, uint64(m.ServerId))
	i--
	dAtA[i] = 0x50
	i = encodeVarintGenerated(dAtA, i, uint64(m.InsertId))
	i--
	dAtA[i] = 0x48
	i = encodeVarintGenerated(dAtA, i, uint64(m.LastInsertId))
	i--
	dAtA[i] = 0x40
	i -= len(m.DB)
	copy(dAtA[i:], m.DB)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DB)))
	i--
	dAtA[i] = 0x3a
	i = encodeVarintGenerated(dAtA, i, uint64(m.RowsExamined))
	i--
	dAtA[i] = 0x30
	i = encodeVarintGenerated(dAtA, i, uint64(m.RowsSent))
	i--
	dAtA[i] = 0x28
	i -= len(m.LockTimeInMilliSeconds)
	copy(dAtA[i:], m.LockTimeInMilliSeconds)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.LockTimeInMilliSeconds)))
	i--
	dAtA[i] = 0x22
	i -= len(m.QueryTimeInMilliSeconds)
	copy(dAtA[i:], m.QueryTimeInMilliSeconds)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.QueryTimeInMilliSeconds)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.UserHost)
	copy(dAtA[i:], m.UserHost)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.UserHost)))
	i--
	dAtA[i] = 0x12
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MySQLSchemaOverview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLSchemaOverview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MySQLSchemaOverview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MySQLSchemaOverviewList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLSchemaOverviewList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MySQLSchemaOverviewList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodesStatsCompletionFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsCompletionFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsCompletionFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.TotalSize)
	copy(dAtA[i:], m.TotalSize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TotalSize)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintGenerated(dAtA, i, uint64(m.SizeInBytes))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *NodesStatsCompletionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsCompletionStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsCompletionStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.TotalSize)
	copy(dAtA[i:], m.TotalSize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TotalSize)))
	i--
	dAtA[i] = 0x22
	if m.Fields != nil {
		{
			size, err := m.Fields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.SizeInBytes))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *NodesStatsDocsStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsDocsStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsDocsStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Deleted))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodesStatsFieldDataFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsFieldDataFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsFieldDataFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.MemorySizeInBytes))
	i--
	dAtA[i] = 0x10
	i -= len(m.MemorySize)
	copy(dAtA[i:], m.MemorySize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MemorySize)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodesStatsFielddataStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsFielddataStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsFielddataStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fields != nil {
		{
			size, err := m.Fields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.Evictions))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.MemorySizeInBytes))
	i--
	dAtA[i] = 0x10
	i -= len(m.MemorySize)
	copy(dAtA[i:], m.MemorySize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MemorySize)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodesStatsFlushStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsFlushStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsFlushStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalTimeInMillis))
	i--
	dAtA[i] = 0x18
	i -= len(m.TotalTime)
	copy(dAtA[i:], m.TotalTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TotalTime)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintGenerated(dAtA, i, uint64(m.Total))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodesStatsGetStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsGetStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsGetStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Current))
	i--
	dAtA[i] = 0x50
	i = encodeVarintGenerated(dAtA, i, uint64(m.MissingTimeInMillis))
	i--
	dAtA[i] = 0x48
	i -= len(m.MissingTime)
	copy(dAtA[i:], m.MissingTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MissingTime)))
	i--
	dAtA[i] = 0x42
	i = encodeVarintGenerated(dAtA, i, uint64(m.Missing))
	i--
	dAtA[i] = 0x38
	i = encodeVarintGenerated(dAtA, i, uint64(m.ExistsTimeInMillis))
	i--
	dAtA[i] = 0x30
	i -= len(m.ExistsTime)
	copy(dAtA[i:], m.ExistsTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExistsTime)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintGenerated(dAtA, i, uint64(m.Exists))
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.TimeInMillis))
	i--
	dAtA[i] = 0x18
	i -= len(m.Time)
	copy(dAtA[i:], m.Time)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Time)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintGenerated(dAtA, i, uint64(m.Total))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodesStatsIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShardsLevel) > 0 {
		keysForShardsLevel := make([]string, 0, len(m.ShardsLevel))
		for k := range m.ShardsLevel {
			keysForShardsLevel = append(keysForShardsLevel, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForShardsLevel)
		for iNdEx := len(keysForShardsLevel) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ShardsLevel[string(keysForShardsLevel[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(keysForShardsLevel[iNdEx])
			copy(dAtA[i:], keysForShardsLevel[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForShardsLevel[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.IndicesLevel) > 0 {
		keysForIndicesLevel := make([]string, 0, len(m.IndicesLevel))
		for k := range m.IndicesLevel {
			keysForIndicesLevel = append(keysForIndicesLevel, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForIndicesLevel)
		for iNdEx := len(keysForIndicesLevel) - 1; iNdEx >= 0; iNdEx-- {
			v := m.IndicesLevel[string(keysForIndicesLevel[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(keysForIndicesLevel[iNdEx])
			copy(dAtA[i:], keysForIndicesLevel[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForIndicesLevel[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	{
		size, err := m.Recovery.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	if m.RequestCache != nil {
		{
			size, err := m.RequestCache.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Translog != nil {
		{
			size, err := m.Translog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Segments != nil {
		{
			size, err := m.Segments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Completion != nil {
		{
			size, err := m.Completion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Fielddata != nil {
		{
			size, err := m.Fielddata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.QueryCache != nil {
		{
			size, err := m.QueryCache.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Warmer != nil {
		{
			size, err := m.Warmer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Flush != nil {
		{
			size, err := m.Flush.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Refresh != nil {
		{
			size, err := m.Refresh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Merges != nil {
		{
			size, err := m.Merges.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Search != nil {
		{
			size, err := m.Search.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Get != nil {
		{
			size, err := m.Get.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Indexing != nil {
		{
			size, err := m.Indexing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Store != nil {
		{
			size, err := m.Store.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Shards != nil {
		{
			size, err := m.Shards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Docs != nil {
		{
			size, err := m.Docs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodesStatsIndexingStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsIndexingStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsIndexingStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Types) > 0 {
		keysForTypes := make([]string, 0, len(m.Types))
		for k := range m.Types {
			keysForTypes = append(keysForTypes, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTypes)
		for iNdEx := len(keysForTypes) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Types[string(keysForTypes[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(keysForTypes[iNdEx])
			copy(dAtA[i:], keysForTypes[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForTypes[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.ThrottledTimeInMillis))
	i--
	dAtA[i] = 0x68
	i -= len(m.ThrottledTime)
	copy(dAtA[i:], m.ThrottledTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThrottledTime)))
	i--
	dAtA[i] = 0x62
	i--
	if m.IsThrottled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x58
	i = encodeVarintGenerated(dAtA, i, uint64(m.NoopUpdateTotal))
	i--
	dAtA[i] = 0x50
	i = encodeVarintGenerated(dAtA, i, uint64(m.DeleteCurrent))
	i--
	dAtA[i] = 0x48
	i = encodeVarintGenerated(dAtA, i, uint64(m.DeleteTimeInMillis))
	i--
	dAtA[i] = 0x40
	i -= len(m.DeleteTime)
	copy(dAtA[i:], m.DeleteTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DeleteTime)))
	i--
	dAtA[i] = 0x3a
	i = encodeVarintGenerated(dAtA, i, uint64(m.DeleteTotal))
	i--
	dAtA[i] = 0x30
	i = encodeVarintGenerated(dAtA, i, uint64(m.IndexFailed))
	i--
	dAtA[i] = 0x28
	i = encodeVarintGenerated(dAtA, i, uint64(m.IndexCurrent))
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.IndexTimeInMillis))
	i--
	dAtA[i] = 0x18
	i -= len(m.IndexTime)
	copy(dAtA[i:], m.IndexTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IndexTime)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintGenerated(dAtA, i, uint64(m.IndexTotal))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodesStatsMergeStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsMergeStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsMergeStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalThrottleBytesInBytes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i -= len(m.TotalThrottleBytes)
	copy(dAtA[i:], m.TotalThrottleBytes)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TotalThrottleBytes)))
	i--
	dAtA[i] = 0x7a
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalThrottledTimeInMillis))
	i--
	dAtA[i] = 0x70
	i -= len(m.TotalThrottledTime)
	copy(dAtA[i:], m.TotalThrottledTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TotalThrottledTime)))
	i--
	dAtA[i] = 0x6a
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalStoppedTimeInMillis))
	i--
	dAtA[i] = 0x60
	i -= len(m.TotalStoppedTime)
	copy(dAtA[i:], m.TotalStoppedTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TotalStoppedTime)))
	i--
	dAtA[i] = 0x5a
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalSizeInBytes))
	i--
	dAtA[i] = 0x50
	i -= len(m.TotalSize)
	copy(dAtA[i:], m.TotalSize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TotalSize)))
	i--
	dAtA[i] = 0x4a
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalDocs))
	i--
	dAtA[i] = 0x40
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalTimeInMillis))
	i--
	dAtA[i] = 0x38
	i -= len(m.TotalTime)
	copy(dAtA[i:], m.TotalTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TotalTime)))
	i--
	dAtA[i] = 0x32
	i = encodeVarintGenerated(dAtA, i, uint64(m.Total))
	i--
	dAtA[i] = 0x28
	i = encodeVarintGenerated(dAtA, i, uint64(m.CurrentSizeInBytes))
	i--
	dAtA[i] = 0x20
	i -= len(m.CurrentSize)
	copy(dAtA[i:], m.CurrentSize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CurrentSize)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintGenerated(dAtA, i, uint64(m.CurrentDocs))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.Current))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodesStatsNodeOS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsNodeOS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsNodeOS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Swap != nil {
		{
			size, err := m.Swap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Mem != nil {
		{
			size, err := m.Mem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CPU != nil {
		{
			size, err := m.CPU.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.Timestamp))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodesStatsNodeOSCPU) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsNodeOSCPU) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsNodeOSCPU) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoadAverage) > 0 {
		keysForLoadAverage := make([]string, 0, len(m.LoadAverage))
		for k := range m.LoadAverage {
			keysForLoadAverage = append(keysForLoadAverage, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLoadAverage)
		for iNdEx := len(keysForLoadAverage) - 1; iNdEx >= 0; iNdEx-- {
			v := m.LoadAverage[string(keysForLoadAverage[iNdEx])]
			baseI := i
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i--
			dAtA[i] = 0x11
			i -= len(keysForLoadAverage[iNdEx])
			copy(dAtA[i:], keysForLoadAverage[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForLoadAverage[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.Percent))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodesStatsNodeOSMem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsNodeOSMem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsNodeOSMem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.UsedPercent))
	i--
	dAtA[i] = 0x40
	i = encodeVarintGenerated(dAtA, i, uint64(m.FreePercent))
	i--
	dAtA[i] = 0x38
	i = encodeVarintGenerated(dAtA, i, uint64(m.UsedInBytes))
	i--
	dAtA[i] = 0x30
	i -= len(m.Used)
	copy(dAtA[i:], m.Used)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Used)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintGenerated(dAtA, i, uint64(m.FreeInBytes))
	i--
	dAtA[i] = 0x20
	i -= len(m.Free)
	copy(dAtA[i:], m.Free)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Free)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalInBytes))
	i--
	dAtA[i] = 0x10
	i -= len(m.Total)
	copy(dAtA[i:], m.Total)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Total)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodesStatsNodeOSSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsNodeOSSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsNodeOSSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.UsedInBytes))
	i--
	dAtA[i] = 0x30
	i -= len(m.Used)
	copy(dAtA[i:], m.Used)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Used)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintGenerated(dAtA, i, uint64(m.FreeInBytes))
	i--
	dAtA[i] = 0x20
	i -= len(m.Free)
	copy(dAtA[i:], m.Free)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Free)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalInBytes))
	i--
	dAtA[i] = 0x10
	i -= len(m.Total)
	copy(dAtA[i:], m.Total)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Total)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodesStatsQueryCacheStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsQueryCacheStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsQueryCacheStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Evictions))
	i--
	dAtA[i] = 0x40
	i = encodeVarintGenerated(dAtA, i, uint64(m.CacheCount))
	i--
	dAtA[i] = 0x38
	i = encodeVarintGenerated(dAtA, i, uint64(m.CacheSize))
	i--
	dAtA[i] = 0x30
	i = encodeVarintGenerated(dAtA, i, uint64(m.MissCount))
	i--
	dAtA[i] = 0x28
	i = encodeVarintGenerated(dAtA, i, uint64(m.HitCount))
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalCount))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.MemorySizeInBytes))
	i--
	dAtA[i] = 0x10
	i -= len(m.MemorySize)
	copy(dAtA[i:], m.MemorySize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MemorySize)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodesStatsRecoveryStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsRecoveryStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsRecoveryStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.CurrentAsTarget))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.CurrentAsSource))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodesStatsRefreshStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsRefreshStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsRefreshStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalTimeInMillis))
	i--
	dAtA[i] = 0x18
	i -= len(m.TotalTime)
	copy(dAtA[i:], m.TotalTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TotalTime)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintGenerated(dAtA, i, uint64(m.Total))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodesStatsRequestCacheStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsRequestCacheStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsRequestCacheStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.MissCount))
	i--
	dAtA[i] = 0x28
	i = encodeVarintGenerated(dAtA, i, uint64(m.HitCount))
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.Evictions))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.MemorySizeInBytes))
	i--
	dAtA[i] = 0x10
	i -= len(m.MemorySize)
	copy(dAtA[i:], m.MemorySize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MemorySize)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodesStatsSearchStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsSearchStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsSearchStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		keysForGroups := make([]string, 0, len(m.Groups))
		for k := range m.Groups {
			keysForGroups = append(keysForGroups, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForGroups)
		for iNdEx := len(keysForGroups) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Groups[string(keysForGroups[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(keysForGroups[iNdEx])
			copy(dAtA[i:], keysForGroups[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForGroups[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.ScrollCurrent))
	i--
	dAtA[i] = 0x68
	i = encodeVarintGenerated(dAtA, i, uint64(m.ScrollTimeInMillis))
	i--
	dAtA[i] = 0x60
	i -= len(m.ScrollTime)
	copy(dAtA[i:], m.ScrollTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ScrollTime)))
	i--
	dAtA[i] = 0x5a
	i = encodeVarintGenerated(dAtA, i, uint64(m.ScrollTotal))
	i--
	dAtA[i] = 0x50
	i = encodeVarintGenerated(dAtA, i, uint64(m.FetchCurrent))
	i--
	dAtA[i] = 0x48
	i = encodeVarintGenerated(dAtA, i, uint64(m.FetchTimeInMillis))
	i--
	dAtA[i] = 0x40
	i -= len(m.FetchTime)
	copy(dAtA[i:], m.FetchTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FetchTime)))
	i--
	dAtA[i] = 0x3a
	i = encodeVarintGenerated(dAtA, i, uint64(m.FetchTotal))
	i--
	dAtA[i] = 0x30
	i = encodeVarintGenerated(dAtA, i, uint64(m.QueryCurrent))
	i--
	dAtA[i] = 0x28
	i = encodeVarintGenerated(dAtA, i, uint64(m.QueryTimeInMillis))
	i--
	dAtA[i] = 0x20
	i -= len(m.QueryTime)
	copy(dAtA[i:], m.QueryTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.QueryTime)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintGenerated(dAtA, i, uint64(m.QueryTotal))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.OpenContexts))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodesStatsSegmentsStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsSegmentsStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsSegmentsStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.FixedBitSetMemoryInBytes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	i -= len(m.FixedBitSetMemory)
	copy(dAtA[i:], m.FixedBitSetMemory)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FixedBitSetMemory)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	i = encodeVarintGenerated(dAtA, i, uint64(m.VersionMapMemoryInBytes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	i -= len(m.VersionMapMemory)
	copy(dAtA[i:], m.VersionMapMemory)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VersionMapMemory)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	i = encodeVarintGenerated(dAtA, i, uint64(m.IndexWriterMaxMemoryInBytes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	i -= len(m.IndexWriterMaxMemory)
	copy(dAtA[i:], m.IndexWriterMaxMemory)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IndexWriterMaxMemory)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	i = encodeVarintGenerated(dAtA, i, uint64(m.IndexWriterMemoryInBytes))
	i--
	dAtA[i] = 0x78
	i -= len(m.IndexWriterMemory)
	copy(dAtA[i:], m.IndexWriterMemory)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IndexWriterMemory)))
	i--
	dAtA[i] = 0x72
	i = encodeVarintGenerated(dAtA, i, uint64(m.DocValuesMemoryInBytes))
	i--
	dAtA[i] = 0x68
	i -= len(m.DocValuesMemory)
	copy(dAtA[i:], m.DocValuesMemory)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DocValuesMemory)))
	i--
	dAtA[i] = 0x62
	i = encodeVarintGenerated(dAtA, i, uint64(m.NormsMemoryInBytes))
	i--
	dAtA[i] = 0x58
	i -= len(m.NormsMemory)
	copy(dAtA[i:], m.NormsMemory)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NormsMemory)))
	i--
	dAtA[i] = 0x52
	i = encodeVarintGenerated(dAtA, i, uint64(m.TermVectorsMemoryInBytes))
	i--
	dAtA[i] = 0x48
	i -= len(m.TermVectorsMemory)
	copy(dAtA[i:], m.TermVectorsMemory)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TermVectorsMemory)))
	i--
	dAtA[i] = 0x42
	i = encodeVarintGenerated(dAtA, i, uint64(m.StoredFieldsMemoryInBytes))
	i--
	dAtA[i] = 0x38
	i -= len(m.StoredFieldsMemory)
	copy(dAtA[i:], m.StoredFieldsMemory)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.StoredFieldsMemory)))
	i--
	dAtA[i] = 0x32
	i = encodeVarintGenerated(dAtA, i, uint64(m.TermsMemoryInBytes))
	i--
	dAtA[i] = 0x28
	i -= len(m.TermsMemory)
	copy(dAtA[i:], m.TermsMemory)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TermsMemory)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintGenerated(dAtA, i, uint64(m.MemoryInBytes))
	i--
	dAtA[i] = 0x18
	i -= len(m.Memory)
	copy(dAtA[i:], m.Memory)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Memory)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintGenerated(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodesStatsShardCountStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsShardCountStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsShardCountStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalCount))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodesStatsStoreStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsStoreStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsStoreStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.TotalSize)
	copy(dAtA[i:], m.TotalSize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TotalSize)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintGenerated(dAtA, i, uint64(m.SizeInBytes))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *NodesStatsTranslogStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsTranslogStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsTranslogStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.TotalSize)
	copy(dAtA[i:], m.TotalSize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TotalSize)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintGenerated(dAtA, i, uint64(m.SizeInBytes))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.Operations))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodesStatsWarmerStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesStatsWarmerStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesStatsWarmerStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalTimeInMillis))
	i--
	dAtA[i] = 0x20
	i -= len(m.TotalTime)
	copy(dAtA[i:], m.TotalTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TotalTime)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintGenerated(dAtA, i, uint64(m.Total))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.Current))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PGSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PGSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PGSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Source)
	copy(dAtA[i:], m.Source)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Source)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Unit)
	copy(dAtA[i:], m.Unit)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Unit)))
	i--
	dAtA[i] = 0x22
	i -= len(m.DefaultValue)
	copy(dAtA[i:], m.DefaultValue)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DefaultValue)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.CurrentValue)
	copy(dAtA[i:], m.CurrentValue)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CurrentValue)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PostgresBackupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresBackupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresBackupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PostgresConnectionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresConnectionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresConnectionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.ActiveConnections))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxConnections))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PostgresInsight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresInsight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresInsight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PostgresInsightList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresInsightList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresInsightList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PostgresInsightSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresInsightSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresInsightSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VacuumInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.BackupInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.ConnectionInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.ReplicationStatus) > 0 {
		for iNdEx := len(m.ReplicationStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReplicationStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i -= len(m.Mode)
	copy(dAtA[i:], m.Mode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mode)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.ConnectionURL)
	copy(dAtA[i:], m.ConnectionURL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ConnectionURL)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PostgresQueries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresQueries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresQueries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PostgresQueriesList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresQueriesList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresQueriesList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PostgresQueriesSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresQueriesSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresQueriesSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for iNdEx := len(m.Queries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Queries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PostgresQuerySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresQuerySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresQuerySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LocalBufferHitPercentage))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BufferHitPercentage))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BlkWriteTime))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BlkReadTimeMilliSeconds))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x99
	i = encodeVarintGenerated(dAtA, i, uint64(m.TempBlksWritten))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	i = encodeVarintGenerated(dAtA, i, uint64(m.TempBlksRead))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	i = encodeVarintGenerated(dAtA, i, uint64(m.LocalBlksWritten))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i = encodeVarintGenerated(dAtA, i, uint64(m.LocalBlksDirtied))
	i--
	dAtA[i] = 0x78
	i = encodeVarintGenerated(dAtA, i, uint64(m.LocalBlksRead))
	i--
	dAtA[i] = 0x70
	i = encodeVarintGenerated(dAtA, i, uint64(m.LocalBlksHit))
	i--
	dAtA[i] = 0x68
	i = encodeVarintGenerated(dAtA, i, uint64(m.SharedBlksWritten))
	i--
	dAtA[i] = 0x60
	i = encodeVarintGenerated(dAtA, i, uint64(m.SharedBlksDirtied))
	i--
	dAtA[i] = 0x58
	i = encodeVarintGenerated(dAtA, i, uint64(m.SharedBlksRead))
	i--
	dAtA[i] = 0x50
	i = encodeVarintGenerated(dAtA, i, uint64(m.SharedBlksHit))
	i--
	dAtA[i] = 0x48
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxTimeMilliSeconds))))
	i--
	dAtA[i] = 0x41
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinTimeMilliSeconds))))
	i--
	dAtA[i] = 0x39
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TotalTimeMilliSeconds))))
	i--
	dAtA[i] = 0x31
	i = encodeVarintGenerated(dAtA, i, uint64(m.Rows))
	i--
	dAtA[i] = 0x28
	i = encodeVarintGenerated(dAtA, i, uint64(m.Calls))
	i--
	dAtA[i] = 0x20
	i -= len(m.Query)
	copy(dAtA[i:], m.Query)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Query)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintGenerated(dAtA, i, uint64(m.DatabaseOID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.UserOID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PostgresReplicationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresReplicationStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresReplicationStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.ReplayLag))
	i--
	dAtA[i] = 0x28
	i = encodeVarintGenerated(dAtA, i, uint64(m.FlushLag))
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.WriteLag))
	i--
	dAtA[i] = 0x18
	i -= len(m.State)
	copy(dAtA[i:], m.State)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.State)))
	i--
	dAtA[i] = 0x12
	i -= len(m.ApplicationName)
	copy(dAtA[i:], m.ApplicationName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ApplicationName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PostgresSchemaOverview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresSchemaOverview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresSchemaOverview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PostgresSchemaOverviewList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresSchemaOverviewList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresSchemaOverviewList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PostgresSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PostgresSettingsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresSettingsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresSettingsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PostgresSettingsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresSettingsSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresSettingsSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Settings) > 0 {
		for iNdEx := len(m.Settings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Settings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PostgresVacuumInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresVacuumInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresVacuumInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.ActiveVacuumProcess))
	i--
	dAtA[i] = 0x10
	i -= len(m.AutoVacuum)
	copy(dAtA[i:], m.AutoVacuum)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AutoVacuum)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RedisDatabaseSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisDatabaseSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisDatabaseSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.AvgTTLMilliSeconds)
	copy(dAtA[i:], m.AvgTTLMilliSeconds)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AvgTTLMilliSeconds)))
	i--
	dAtA[i] = 0x22
	if m.Expires != nil {
		{
			size, err := m.Expires.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.Keys)
	copy(dAtA[i:], m.Keys)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Keys)))
	i--
	dAtA[i] = 0x12
	i -= len(m.DBId)
	copy(dAtA[i:], m.DBId)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DBId)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RedisInsight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisInsight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisInsight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RedisInsightList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisInsightList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisInsightList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RedisInsightSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisInsightSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisInsightSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.SlowLogMaxLen))
	i--
	dAtA[i] = 0x70
	i = encodeVarintGenerated(dAtA, i, uint64(m.SlowLogThresholdMircoSeconds))
	i--
	dAtA[i] = 0x68
	i = encodeVarintGenerated(dAtA, i, uint64(m.RejectedConnections))
	i--
	dAtA[i] = 0x60
	i = encodeVarintGenerated(dAtA, i, uint64(m.ReceivedConnections))
	i--
	dAtA[i] = 0x58
	i = encodeVarintGenerated(dAtA, i, uint64(m.EvictedKeys))
	i--
	dAtA[i] = 0x50
	i = encodeVarintGenerated(dAtA, i, uint64(m.ExpiredKeys))
	i--
	dAtA[i] = 0x48
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalKeys))
	i--
	dAtA[i] = 0x40
	i = encodeVarintGenerated(dAtA, i, uint64(m.BlockedClients))
	i--
	dAtA[i] = 0x38
	i = encodeVarintGenerated(dAtA, i, uint64(m.ConnectedClients))
	i--
	dAtA[i] = 0x30
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxClients))
	i--
	dAtA[i] = 0x28
	i -= len(m.EvictionPolicy)
	copy(dAtA[i:], m.EvictionPolicy)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.EvictionPolicy)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Mode)
	copy(dAtA[i:], m.Mode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mode)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RedisQueries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisQueries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisQueries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RedisQueriesList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisQueriesList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisQueriesList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RedisQueriesSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisQueriesSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisQueriesSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for iNdEx := len(m.Queries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Queries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RedisQuerySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisQuerySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisQuerySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.ExecTimeInMircoSeconds))
	i--
	dAtA[i] = 0x18
	if m.QueryTimestamp != nil {
		{
			size, err := m.QueryTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.QueryId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RedisSchemaOverview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisSchemaOverview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisSchemaOverview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RedisSchemaOverviewList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisSchemaOverviewList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisSchemaOverviewList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RedisSchemaOverviewSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisSchemaOverviewSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisSchemaOverviewSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Databases) > 0 {
		for iNdEx := len(m.Databases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Databases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ElasticsearchClusterHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ActivePrimaryShards))
	n += 1 + sovGenerated(uint64(m.ActiveShards))
	n += 1 + sovGenerated(uint64(m.ActiveShardsPercentAsNumber))
	l = len(m.ClusterName)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.DelayedUnassignedShards))
	n += 1 + sovGenerated(uint64(m.InitializingShards))
	n += 1 + sovGenerated(uint64(m.NumberOfDataNodes))
	n += 1 + sovGenerated(uint64(m.NumberOfInFlightFetch))
	n += 1 + sovGenerated(uint64(m.NumberOfNodes))
	n += 1 + sovGenerated(uint64(m.NumberOfPendingTasks))
	n += 1 + sovGenerated(uint64(m.RelocatingShards))
	l = len(m.ClusterStatus)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.UnassignedShards))
	n += 1 + sovGenerated(uint64(m.TaskMaxWaitingInQueueMilliSeconds))
	return n
}

func (m *ElasticsearchIndexSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IndexName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PrimaryStoreSizeInBytes)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TotalStoreSizeInBytes)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ElasticsearchInsight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ElasticsearchInsightList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ElasticsearchInsightSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Mode)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ClusterHealth.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ElasticsearchNodesStatSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TransportAddr)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Host)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.IP)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Indices != nil {
		l = m.Indices.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.OS != nil {
		l = m.OS.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ElasticsearchNodesStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ElasticsearchNodesStatsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ElasticsearchNodesStatsSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ElasticsearchNodesStatsStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ElasticsearchSchemaOverview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ElasticsearchSchemaOverviewList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ElasticsearchSchemaOverviewSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Indices) > 0 {
		for _, e := range m.Indices {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *GenericDatabaseSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatabaseName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TableName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TableSizeInBytes)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GenericSchemaOverviewSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Databases) > 0 {
		for _, e := range m.Databases {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MariaDBInsight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MariaDBInsightList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MariaDBInsightSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Mode)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MaxConnections))
	n += 1 + sovGenerated(uint64(m.MaxUsedConnections))
	n += 1 + sovGenerated(uint64(m.Questions))
	n += 9
	n += 1 + sovGenerated(uint64(m.NumberOfSlowQueries))
	n += 1 + sovGenerated(uint64(m.AbortedClients))
	n += 1 + sovGenerated(uint64(m.AbortedConnections))
	n += 1 + sovGenerated(uint64(m.ThreadsCached))
	n += 1 + sovGenerated(uint64(m.ThreadsConnected))
	n += 1 + sovGenerated(uint64(m.ThreadsCreated))
	n += 1 + sovGenerated(uint64(m.ThreadsRunning))
	return n
}

func (m *MariaDBQueries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MariaDBQueriesList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MariaDBQueriesSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MariaDBQuerySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.UserHost)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.QueryTimeInMilliSeconds)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.LockTimeInMilliSeconds)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.RowsSent))
	n += 1 + sovGenerated(uint64(m.RowsExamined))
	l = len(m.DB)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.LastInsertId))
	n += 1 + sovGenerated(uint64(m.InsertId))
	n += 1 + sovGenerated(uint64(m.ServerId))
	l = len(m.SQLText)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.ThreadId))
	n += 1 + sovGenerated(uint64(m.RowsAffected))
	return n
}

func (m *MariaDBSchemaOverview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MariaDBSchemaOverviewList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MongoDBCollectionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.TotalSize) > 0 {
		for _, e := range m.TotalSize {
			n += 1 + sovGenerated(uint64(e))
		}
	}
	return n
}

func (m *MongoDBConnectionsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.CurrentConnections))
	n += 1 + sovGenerated(uint64(m.TotalConnections))
	n += 1 + sovGenerated(uint64(m.AvailableConnections))
	n += 1 + sovGenerated(uint64(m.ActiveConnections))
	return n
}

func (m *MongoDBDatabaseStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.TotalCollections))
	n += 1 + sovGenerated(uint64(m.DataSize))
	n += 1 + sovGenerated(uint64(m.TotalIndexes))
	n += 1 + sovGenerated(uint64(m.IndexSize))
	return n
}

func (m *MongoDBInsight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MongoDBInsightList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MongoDBInsightSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Connections != nil {
		l = m.Connections.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DBStats != nil {
		l = m.DBStats.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ShardsInfo != nil {
		l = m.ShardsInfo.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReplicaSetInfo != nil {
		l = m.ReplicaSetInfo.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *MongoDBQueries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MongoDBQueriesList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MongoDBQueriesSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MongoDBQuerySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operation)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DatabaseName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CollectionName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Command)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Count))
	n += 1 + sovGenerated(uint64(m.AvgExecutionTimeMilliSeconds))
	n += 1 + sovGenerated(uint64(m.MinExecutionTimeMilliSeconds))
	n += 1 + sovGenerated(uint64(m.MaxExecutionTimeMilliSeconds))
	return n
}

func (m *MongoDBReplicaSetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.NumberOfReplicas))
	return n
}

func (m *MongoDBSchemaOverview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MongoDBSchemaOverviewList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MongoDBSchemaOverviewSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Collections) > 0 {
		for _, e := range m.Collections {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MongoDBShardsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.NumberOfShards))
	n += 1 + sovGenerated(uint64(m.ReplicasPerShards))
	n += 1 + sovGenerated(uint64(m.NumberOfChunks))
	n += 2
	n += 2
	return n
}

func (m *MySQLInsight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MySQLInsightList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MySQLInsightSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Mode)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MaxConnections))
	n += 1 + sovGenerated(uint64(m.MaxUsedConnections))
	n += 1 + sovGenerated(uint64(m.Questions))
	n += 9
	n += 1 + sovGenerated(uint64(m.NumberOfSlowQueries))
	n += 1 + sovGenerated(uint64(m.AbortedClients))
	n += 1 + sovGenerated(uint64(m.AbortedConnections))
	n += 1 + sovGenerated(uint64(m.ThreadsCached))
	n += 1 + sovGenerated(uint64(m.ThreadsConnected))
	n += 1 + sovGenerated(uint64(m.ThreadsCreated))
	n += 1 + sovGenerated(uint64(m.ThreadsRunning))
	return n
}

func (m *MySQLQueries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MySQLQueriesList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MySQLQueriesSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MySQLQuerySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.UserHost)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.QueryTimeInMilliSeconds)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.LockTimeInMilliSeconds)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.RowsSent))
	n += 1 + sovGenerated(uint64(m.RowsExamined))
	l = len(m.DB)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.LastInsertId))
	n += 1 + sovGenerated(uint64(m.InsertId))
	n += 1 + sovGenerated(uint64(m.ServerId))
	l = len(m.SQLText)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.ThreadId))
	return n
}

func (m *MySQLSchemaOverview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MySQLSchemaOverviewList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *NodesStatsCompletionFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.SizeInBytes))
	l = len(m.TotalSize)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *NodesStatsCompletionStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.SizeInBytes))
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.TotalSize)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *NodesStatsDocsStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Count))
	n += 1 + sovGenerated(uint64(m.Deleted))
	return n
}

func (m *NodesStatsFieldDataFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemorySize)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MemorySizeInBytes))
	return n
}

func (m *NodesStatsFielddataStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemorySize)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MemorySizeInBytes))
	n += 1 + sovGenerated(uint64(m.Evictions))
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NodesStatsFlushStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Total))
	l = len(m.TotalTime)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.TotalTimeInMillis))
	return n
}

func (m *NodesStatsGetStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Total))
	l = len(m.Time)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.TimeInMillis))
	n += 1 + sovGenerated(uint64(m.Exists))
	l = len(m.ExistsTime)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.ExistsTimeInMillis))
	n += 1 + sovGenerated(uint64(m.Missing))
	l = len(m.MissingTime)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MissingTimeInMillis))
	n += 1 + sovGenerated(uint64(m.Current))
	return n
}

func (m *NodesStatsIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Docs != nil {
		l = m.Docs.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Shards != nil {
		l = m.Shards.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Store != nil {
		l = m.Store.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Indexing != nil {
		l = m.Indexing.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Get != nil {
		l = m.Get.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Search != nil {
		l = m.Search.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Merges != nil {
		l = m.Merges.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Refresh != nil {
		l = m.Refresh.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Flush != nil {
		l = m.Flush.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Warmer != nil {
		l = m.Warmer.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.QueryCache != nil {
		l = m.QueryCache.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Fielddata != nil {
		l = m.Fielddata.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Completion != nil {
		l = m.Completion.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Segments != nil {
		l = m.Segments.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Translog != nil {
		l = m.Translog.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RequestCache != nil {
		l = m.RequestCache.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = m.Recovery.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.IndicesLevel) > 0 {
		for k, v := range m.IndicesLevel {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + l + sovGenerated(uint64(l))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.ShardsLevel) > 0 {
		for k, v := range m.ShardsLevel {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + l + sovGenerated(uint64(l))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NodesStatsIndexingStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.IndexTotal))
	l = len(m.IndexTime)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.IndexTimeInMillis))
	n += 1 + sovGenerated(uint64(m.IndexCurrent))
	n += 1 + sovGenerated(uint64(m.IndexFailed))
	n += 1 + sovGenerated(uint64(m.DeleteTotal))
	l = len(m.DeleteTime)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.DeleteTimeInMillis))
	n += 1 + sovGenerated(uint64(m.DeleteCurrent))
	n += 1 + sovGenerated(uint64(m.NoopUpdateTotal))
	n += 2
	l = len(m.ThrottledTime)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.ThrottledTimeInMillis))
	if len(m.Types) > 0 {
		for k, v := range m.Types {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + l + sovGenerated(uint64(l))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NodesStatsMergeStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Current))
	n += 1 + sovGenerated(uint64(m.CurrentDocs))
	l = len(m.CurrentSize)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.CurrentSizeInBytes))
	n += 1 + sovGenerated(uint64(m.Total))
	l = len(m.TotalTime)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.TotalTimeInMillis))
	n += 1 + sovGenerated(uint64(m.TotalDocs))
	l = len(m.TotalSize)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.TotalSizeInBytes))
	l = len(m.TotalStoppedTime)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.TotalStoppedTimeInMillis))
	l = len(m.TotalThrottledTime)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.TotalThrottledTimeInMillis))
	l = len(m.TotalThrottleBytes)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2 + sovGenerated(uint64(m.TotalThrottleBytesInBytes))
	return n
}

func (m *NodesStatsNodeOS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Timestamp))
	if m.CPU != nil {
		l = m.CPU.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Mem != nil {
		l = m.Mem.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Swap != nil {
		l = m.Swap.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NodesStatsNodeOSCPU) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Percent))
	if len(m.LoadAverage) > 0 {
		for k, v := range m.LoadAverage {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NodesStatsNodeOSMem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Total)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.TotalInBytes))
	l = len(m.Free)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.FreeInBytes))
	l = len(m.Used)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.UsedInBytes))
	n += 1 + sovGenerated(uint64(m.FreePercent))
	n += 1 + sovGenerated(uint64(m.UsedPercent))
	return n
}

func (m *NodesStatsNodeOSSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Total)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.TotalInBytes))
	l = len(m.Free)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.FreeInBytes))
	l = len(m.Used)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.UsedInBytes))
	return n
}

func (m *NodesStatsQueryCacheStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemorySize)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MemorySizeInBytes))
	n += 1 + sovGenerated(uint64(m.TotalCount))
	n += 1 + sovGenerated(uint64(m.HitCount))
	n += 1 + sovGenerated(uint64(m.MissCount))
	n += 1 + sovGenerated(uint64(m.CacheSize))
	n += 1 + sovGenerated(uint64(m.CacheCount))
	n += 1 + sovGenerated(uint64(m.Evictions))
	return n
}

func (m *NodesStatsRecoveryStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.CurrentAsSource))
	n += 1 + sovGenerated(uint64(m.CurrentAsTarget))
	return n
}

func (m *NodesStatsRefreshStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Total))
	l = len(m.TotalTime)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.TotalTimeInMillis))
	return n
}

func (m *NodesStatsRequestCacheStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemorySize)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MemorySizeInBytes))
	n += 1 + sovGenerated(uint64(m.Evictions))
	n += 1 + sovGenerated(uint64(m.HitCount))
	n += 1 + sovGenerated(uint64(m.MissCount))
	return n
}

func (m *NodesStatsSearchStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.OpenContexts))
	n += 1 + sovGenerated(uint64(m.QueryTotal))
	l = len(m.QueryTime)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.QueryTimeInMillis))
	n += 1 + sovGenerated(uint64(m.QueryCurrent))
	n += 1 + sovGenerated(uint64(m.FetchTotal))
	l = len(m.FetchTime)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.FetchTimeInMillis))
	n += 1 + sovGenerated(uint64(m.FetchCurrent))
	n += 1 + sovGenerated(uint64(m.ScrollTotal))
	l = len(m.ScrollTime)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.ScrollTimeInMillis))
	n += 1 + sovGenerated(uint64(m.ScrollCurrent))
	if len(m.Groups) > 0 {
		for k, v := range m.Groups {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + l + sovGenerated(uint64(l))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NodesStatsSegmentsStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Count))
	l = len(m.Memory)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MemoryInBytes))
	l = len(m.TermsMemory)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.TermsMemoryInBytes))
	l = len(m.StoredFieldsMemory)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.StoredFieldsMemoryInBytes))
	l = len(m.TermVectorsMemory)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.TermVectorsMemoryInBytes))
	l = len(m.NormsMemory)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.NormsMemoryInBytes))
	l = len(m.DocValuesMemory)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.DocValuesMemoryInBytes))
	l = len(m.IndexWriterMemory)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.IndexWriterMemoryInBytes))
	l = len(m.IndexWriterMaxMemory)
	n += 2 + l + sovGenerated(uint64(l))
	n += 2 + sovGenerated(uint64(m.IndexWriterMaxMemoryInBytes))
	l = len(m.VersionMapMemory)
	n += 2 + l + sovGenerated(uint64(l))
	n += 2 + sovGenerated(uint64(m.VersionMapMemoryInBytes))
	l = len(m.FixedBitSetMemory)
	n += 2 + l + sovGenerated(uint64(l))
	n += 2 + sovGenerated(uint64(m.FixedBitSetMemoryInBytes))
	return n
}

func (m *NodesStatsShardCountStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.TotalCount))
	return n
}

func (m *NodesStatsStoreStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.SizeInBytes))
	l = len(m.TotalSize)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *NodesStatsTranslogStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Operations))
	n += 1 + sovGenerated(uint64(m.SizeInBytes))
	l = len(m.TotalSize)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *NodesStatsWarmerStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Current))
	n += 1 + sovGenerated(uint64(m.Total))
	l = len(m.TotalTime)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.TotalTimeInMillis))
	return n
}

func (m *PGSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CurrentValue)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DefaultValue)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Unit)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Source)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PostgresBackupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PostgresConnectionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.MaxConnections))
	n += 1 + sovGenerated(uint64(m.ActiveConnections))
	return n
}

func (m *PostgresInsight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PostgresInsightList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *PostgresInsightSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ConnectionURL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Mode)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.ReplicationStatus) > 0 {
		for _, e := range m.ReplicationStatus {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.ConnectionInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.BackupInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.VacuumInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PostgresQueries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PostgresQueriesList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *PostgresQueriesSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *PostgresQuerySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.UserOID))
	n += 1 + sovGenerated(uint64(m.DatabaseOID))
	l = len(m.Query)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Calls))
	n += 1 + sovGenerated(uint64(m.Rows))
	n += 9
	n += 9
	n += 9
	n += 1 + sovGenerated(uint64(m.SharedBlksHit))
	n += 1 + sovGenerated(uint64(m.SharedBlksRead))
	n += 1 + sovGenerated(uint64(m.SharedBlksDirtied))
	n += 1 + sovGenerated(uint64(m.SharedBlksWritten))
	n += 1 + sovGenerated(uint64(m.LocalBlksHit))
	n += 1 + sovGenerated(uint64(m.LocalBlksRead))
	n += 1 + sovGenerated(uint64(m.LocalBlksDirtied))
	n += 2 + sovGenerated(uint64(m.LocalBlksWritten))
	n += 2 + sovGenerated(uint64(m.TempBlksRead))
	n += 2 + sovGenerated(uint64(m.TempBlksWritten))
	n += 10
	n += 10
	n += 10
	n += 10
	return n
}

func (m *PostgresReplicationStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApplicationName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.State)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.WriteLag))
	n += 1 + sovGenerated(uint64(m.FlushLag))
	n += 1 + sovGenerated(uint64(m.ReplayLag))
	return n
}

func (m *PostgresSchemaOverview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PostgresSchemaOverviewList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *PostgresSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PostgresSettingsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *PostgresSettingsSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Settings) > 0 {
		for _, e := range m.Settings {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *PostgresVacuumInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AutoVacuum)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.ActiveVacuumProcess))
	return n
}

func (m *RedisDatabaseSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DBId)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Keys)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Expires != nil {
		l = m.Expires.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.AvgTTLMilliSeconds)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *RedisInsight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *RedisInsightList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *RedisInsightSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Mode)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.EvictionPolicy)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MaxClients))
	n += 1 + sovGenerated(uint64(m.ConnectedClients))
	n += 1 + sovGenerated(uint64(m.BlockedClients))
	n += 1 + sovGenerated(uint64(m.TotalKeys))
	n += 1 + sovGenerated(uint64(m.ExpiredKeys))
	n += 1 + sovGenerated(uint64(m.EvictedKeys))
	n += 1 + sovGenerated(uint64(m.ReceivedConnections))
	n += 1 + sovGenerated(uint64(m.RejectedConnections))
	n += 1 + sovGenerated(uint64(m.SlowLogThresholdMircoSeconds))
	n += 1 + sovGenerated(uint64(m.SlowLogMaxLen))
	return n
}

func (m *RedisQueries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *RedisQueriesList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *RedisQueriesSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *RedisQuerySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.QueryId))
	if m.QueryTimestamp != nil {
		l = m.QueryTimestamp.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	n += 1 + sovGenerated(uint64(m.ExecTimeInMircoSeconds))
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *RedisSchemaOverview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *RedisSchemaOverviewList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *RedisSchemaOverviewSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Databases) > 0 {
		for _, e := range m.Databases {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ElasticsearchClusterHealth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ElasticsearchClusterHealth{`,
		`ActivePrimaryShards:` + fmt.Sprintf("%v", this.ActivePrimaryShards) + `,`,
		`ActiveShards:` + fmt.Sprintf("%v", this.ActiveShards) + `,`,
		`ActiveShardsPercentAsNumber:` + fmt.Sprintf("%v", this.ActiveShardsPercentAsNumber) + `,`,
		`ClusterName:` + fmt.Sprintf("%v", this.ClusterName) + `,`,
		`DelayedUnassignedShards:` + fmt.Sprintf("%v", this.DelayedUnassignedShards) + `,`,
		`InitializingShards:` + fmt.Sprintf("%v", this.InitializingShards) + `,`,
		`NumberOfDataNodes:` + fmt.Sprintf("%v", this.NumberOfDataNodes) + `,`,
		`NumberOfInFlightFetch:` + fmt.Sprintf("%v", this.NumberOfInFlightFetch) + `,`,
		`NumberOfNodes:` + fmt.Sprintf("%v", this.NumberOfNodes) + `,`,
		`NumberOfPendingTasks:` + fmt.Sprintf("%v", this.NumberOfPendingTasks) + `,`,
		`RelocatingShards:` + fmt.Sprintf("%v", this.RelocatingShards) + `,`,
		`ClusterStatus:` + fmt.Sprintf("%v", this.ClusterStatus) + `,`,
		`UnassignedShards:` + fmt.Sprintf("%v", this.UnassignedShards) + `,`,
		`TaskMaxWaitingInQueueMilliSeconds:` + fmt.Sprintf("%v", this.TaskMaxWaitingInQueueMilliSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ElasticsearchIndexSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ElasticsearchIndexSpec{`,
		`IndexName:` + fmt.Sprintf("%v", this.IndexName) + `,`,
		`PrimaryStoreSizeInBytes:` + fmt.Sprintf("%v", this.PrimaryStoreSizeInBytes) + `,`,
		`TotalStoreSizeInBytes:` + fmt.Sprintf("%v", this.TotalStoreSizeInBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ElasticsearchInsight) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ElasticsearchInsight{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ElasticsearchInsightSpec", "ElasticsearchInsightSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Status), "ElasticsearchStatus", "v1alpha2.ElasticsearchStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ElasticsearchInsightList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]ElasticsearchInsight{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "ElasticsearchInsight", "ElasticsearchInsight", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ElasticsearchInsightList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *ElasticsearchInsightSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ElasticsearchInsightSpec{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`ClusterHealth:` + strings.Replace(strings.Replace(this.ClusterHealth.String(), "ElasticsearchClusterHealth", "ElasticsearchClusterHealth", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ElasticsearchNodesStatSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ElasticsearchNodesStatSpec{`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Time", "v1.Time", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`TransportAddr:` + fmt.Sprintf("%v", this.TransportAddr) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`IP:` + fmt.Sprintf("%v", this.IP) + `,`,
		`Roles:` + fmt.Sprintf("%v", this.Roles) + `,`,
		`Indices:` + strings.Replace(this.Indices.String(), "NodesStatsIndex", "NodesStatsIndex", 1) + `,`,
		`OS:` + strings.Replace(this.OS.String(), "NodesStatsNodeOS", "NodesStatsNodeOS", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ElasticsearchNodesStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ElasticsearchNodesStats{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ElasticsearchNodesStatsSpec", "ElasticsearchNodesStatsSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "ElasticsearchNodesStatsStatus", "ElasticsearchNodesStatsStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ElasticsearchNodesStatsList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]ElasticsearchNodesStats{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "ElasticsearchNodesStats", "ElasticsearchNodesStats", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ElasticsearchNodesStatsList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *ElasticsearchNodesStatsSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]ElasticsearchNodesStatSpec{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(strings.Replace(f.String(), "ElasticsearchNodesStatSpec", "ElasticsearchNodesStatSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&ElasticsearchNodesStatsSpec{`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *ElasticsearchNodesStatsStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ElasticsearchNodesStatsStatus{`,
		`}`,
	}, "")
	return s
}
func (this *ElasticsearchSchemaOverview) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ElasticsearchSchemaOverview{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ElasticsearchSchemaOverviewSpec", "ElasticsearchSchemaOverviewSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ElasticsearchSchemaOverviewList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]ElasticsearchSchemaOverview{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "ElasticsearchSchemaOverview", "ElasticsearchSchemaOverview", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ElasticsearchSchemaOverviewList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *ElasticsearchSchemaOverviewSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIndices := "[]ElasticsearchIndexSpec{"
	for _, f := range this.Indices {
		repeatedStringForIndices += strings.Replace(strings.Replace(f.String(), "ElasticsearchIndexSpec", "ElasticsearchIndexSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForIndices += "}"
	s := strings.Join([]string{`&ElasticsearchSchemaOverviewSpec{`,
		`Indices:` + repeatedStringForIndices + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenericDatabaseSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenericDatabaseSpec{`,
		`DatabaseName:` + fmt.Sprintf("%v", this.DatabaseName) + `,`,
		`TableName:` + fmt.Sprintf("%v", this.TableName) + `,`,
		`TableSizeInBytes:` + fmt.Sprintf("%v", this.TableSizeInBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenericSchemaOverviewSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDatabases := "[]GenericDatabaseSpec{"
	for _, f := range this.Databases {
		repeatedStringForDatabases += strings.Replace(strings.Replace(f.String(), "GenericDatabaseSpec", "GenericDatabaseSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForDatabases += "}"
	s := strings.Join([]string{`&GenericSchemaOverviewSpec{`,
		`Databases:` + repeatedStringForDatabases + `,`,
		`}`,
	}, "")
	return s
}
func (this *MariaDBInsight) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MariaDBInsight{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "MariaDBInsightSpec", "MariaDBInsightSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Status), "MariaDBStatus", "v1alpha2.MariaDBStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MariaDBInsightList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]MariaDBInsight{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "MariaDBInsight", "MariaDBInsight", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&MariaDBInsightList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *MariaDBInsightSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MariaDBInsightSpec{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`MaxConnections:` + fmt.Sprintf("%v", this.MaxConnections) + `,`,
		`MaxUsedConnections:` + fmt.Sprintf("%v", this.MaxUsedConnections) + `,`,
		`Questions:` + fmt.Sprintf("%v", this.Questions) + `,`,
		`LongQueryTimeThresholdSeconds:` + fmt.Sprintf("%v", this.LongQueryTimeThresholdSeconds) + `,`,
		`NumberOfSlowQueries:` + fmt.Sprintf("%v", this.NumberOfSlowQueries) + `,`,
		`AbortedClients:` + fmt.Sprintf("%v", this.AbortedClients) + `,`,
		`AbortedConnections:` + fmt.Sprintf("%v", this.AbortedConnections) + `,`,
		`ThreadsCached:` + fmt.Sprintf("%v", this.ThreadsCached) + `,`,
		`ThreadsConnected:` + fmt.Sprintf("%v", this.ThreadsConnected) + `,`,
		`ThreadsCreated:` + fmt.Sprintf("%v", this.ThreadsCreated) + `,`,
		`ThreadsRunning:` + fmt.Sprintf("%v", this.ThreadsRunning) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MariaDBQueries) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MariaDBQueries{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "MariaDBQueriesSpec", "MariaDBQueriesSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MariaDBQueriesList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]MariaDBQueries{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "MariaDBQueries", "MariaDBQueries", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&MariaDBQueriesList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *MariaDBQueriesSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQueries := "[]MariaDBQuerySpec{"
	for _, f := range this.Queries {
		repeatedStringForQueries += strings.Replace(strings.Replace(f.String(), "MariaDBQuerySpec", "MariaDBQuerySpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForQueries += "}"
	s := strings.Join([]string{`&MariaDBQueriesSpec{`,
		`Queries:` + repeatedStringForQueries + `,`,
		`}`,
	}, "")
	return s
}
func (this *MariaDBQuerySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MariaDBQuerySpec{`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Time", "v1.Time", 1) + `,`,
		`UserHost:` + fmt.Sprintf("%v", this.UserHost) + `,`,
		`QueryTimeInMilliSeconds:` + fmt.Sprintf("%v", this.QueryTimeInMilliSeconds) + `,`,
		`LockTimeInMilliSeconds:` + fmt.Sprintf("%v", this.LockTimeInMilliSeconds) + `,`,
		`RowsSent:` + fmt.Sprintf("%v", this.RowsSent) + `,`,
		`RowsExamined:` + fmt.Sprintf("%v", this.RowsExamined) + `,`,
		`DB:` + fmt.Sprintf("%v", this.DB) + `,`,
		`LastInsertId:` + fmt.Sprintf("%v", this.LastInsertId) + `,`,
		`InsertId:` + fmt.Sprintf("%v", this.InsertId) + `,`,
		`ServerId:` + fmt.Sprintf("%v", this.ServerId) + `,`,
		`SQLText:` + fmt.Sprintf("%v", this.SQLText) + `,`,
		`ThreadId:` + fmt.Sprintf("%v", this.ThreadId) + `,`,
		`RowsAffected:` + fmt.Sprintf("%v", this.RowsAffected) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MariaDBSchemaOverview) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MariaDBSchemaOverview{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "GenericSchemaOverviewSpec", "GenericSchemaOverviewSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MariaDBSchemaOverviewList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]MariaDBSchemaOverview{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "MariaDBSchemaOverview", "MariaDBSchemaOverview", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&MariaDBSchemaOverviewList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBCollectionSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MongoDBCollectionSpec{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`TotalSize:` + fmt.Sprintf("%v", this.TotalSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBConnectionsInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MongoDBConnectionsInfo{`,
		`CurrentConnections:` + fmt.Sprintf("%v", this.CurrentConnections) + `,`,
		`TotalConnections:` + fmt.Sprintf("%v", this.TotalConnections) + `,`,
		`AvailableConnections:` + fmt.Sprintf("%v", this.AvailableConnections) + `,`,
		`ActiveConnections:` + fmt.Sprintf("%v", this.ActiveConnections) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBDatabaseStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MongoDBDatabaseStats{`,
		`TotalCollections:` + fmt.Sprintf("%v", this.TotalCollections) + `,`,
		`DataSize:` + fmt.Sprintf("%v", this.DataSize) + `,`,
		`TotalIndexes:` + fmt.Sprintf("%v", this.TotalIndexes) + `,`,
		`IndexSize:` + fmt.Sprintf("%v", this.IndexSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBInsight) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MongoDBInsight{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "MongoDBInsightSpec", "MongoDBInsightSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Status), "MongoDBStatus", "v1alpha2.MongoDBStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBInsightList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]MongoDBInsight{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "MongoDBInsight", "MongoDBInsight", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&MongoDBInsightList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBInsightSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MongoDBInsightSpec{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Connections:` + strings.Replace(this.Connections.String(), "MongoDBConnectionsInfo", "MongoDBConnectionsInfo", 1) + `,`,
		`DBStats:` + strings.Replace(this.DBStats.String(), "MongoDBDatabaseStats", "MongoDBDatabaseStats", 1) + `,`,
		`ShardsInfo:` + strings.Replace(this.ShardsInfo.String(), "MongoDBShardsInfo", "MongoDBShardsInfo", 1) + `,`,
		`ReplicaSetInfo:` + strings.Replace(this.ReplicaSetInfo.String(), "MongoDBReplicaSetInfo", "MongoDBReplicaSetInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBQueries) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MongoDBQueries{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "MongoDBQueriesSpec", "MongoDBQueriesSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBQueriesList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]MongoDBQueries{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "MongoDBQueries", "MongoDBQueries", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&MongoDBQueriesList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBQueriesSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQueries := "[]MongoDBQuerySpec{"
	for _, f := range this.Queries {
		repeatedStringForQueries += strings.Replace(strings.Replace(f.String(), "MongoDBQuerySpec", "MongoDBQuerySpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForQueries += "}"
	s := strings.Join([]string{`&MongoDBQueriesSpec{`,
		`Queries:` + repeatedStringForQueries + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBQuerySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MongoDBQuerySpec{`,
		`Operation:` + fmt.Sprintf("%v", this.Operation) + `,`,
		`DatabaseName:` + fmt.Sprintf("%v", this.DatabaseName) + `,`,
		`CollectionName:` + fmt.Sprintf("%v", this.CollectionName) + `,`,
		`Command:` + fmt.Sprintf("%v", this.Command) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`AvgExecutionTimeMilliSeconds:` + fmt.Sprintf("%v", this.AvgExecutionTimeMilliSeconds) + `,`,
		`MinExecutionTimeMilliSeconds:` + fmt.Sprintf("%v", this.MinExecutionTimeMilliSeconds) + `,`,
		`MaxExecutionTimeMilliSeconds:` + fmt.Sprintf("%v", this.MaxExecutionTimeMilliSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBReplicaSetInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MongoDBReplicaSetInfo{`,
		`NumberOfReplicas:` + fmt.Sprintf("%v", this.NumberOfReplicas) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBSchemaOverview) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MongoDBSchemaOverview{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "MongoDBSchemaOverviewSpec", "MongoDBSchemaOverviewSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBSchemaOverviewList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]MongoDBSchemaOverview{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "MongoDBSchemaOverview", "MongoDBSchemaOverview", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&MongoDBSchemaOverviewList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBSchemaOverviewSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCollections := "[]MongoDBCollectionSpec{"
	for _, f := range this.Collections {
		repeatedStringForCollections += strings.Replace(strings.Replace(f.String(), "MongoDBCollectionSpec", "MongoDBCollectionSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForCollections += "}"
	s := strings.Join([]string{`&MongoDBSchemaOverviewSpec{`,
		`Collections:` + repeatedStringForCollections + `,`,
		`}`,
	}, "")
	return s
}
func (this *MongoDBShardsInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MongoDBShardsInfo{`,
		`NumberOfShards:` + fmt.Sprintf("%v", this.NumberOfShards) + `,`,
		`ReplicasPerShards:` + fmt.Sprintf("%v", this.ReplicasPerShards) + `,`,
		`NumberOfChunks:` + fmt.Sprintf("%v", this.NumberOfChunks) + `,`,
		`BalancerEnabled:` + fmt.Sprintf("%v", this.BalancerEnabled) + `,`,
		`ChunksBalanced:` + fmt.Sprintf("%v", this.ChunksBalanced) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MySQLInsight) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MySQLInsight{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "MySQLInsightSpec", "MySQLInsightSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Status), "MySQLStatus", "v1alpha2.MySQLStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MySQLInsightList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]MySQLInsight{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "MySQLInsight", "MySQLInsight", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&MySQLInsightList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *MySQLInsightSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MySQLInsightSpec{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`MaxConnections:` + fmt.Sprintf("%v", this.MaxConnections) + `,`,
		`MaxUsedConnections:` + fmt.Sprintf("%v", this.MaxUsedConnections) + `,`,
		`Questions:` + fmt.Sprintf("%v", this.Questions) + `,`,
		`LongQueryTimeThresholdSeconds:` + fmt.Sprintf("%v", this.LongQueryTimeThresholdSeconds) + `,`,
		`NumberOfSlowQueries:` + fmt.Sprintf("%v", this.NumberOfSlowQueries) + `,`,
		`AbortedClients:` + fmt.Sprintf("%v", this.AbortedClients) + `,`,
		`AbortedConnections:` + fmt.Sprintf("%v", this.AbortedConnections) + `,`,
		`ThreadsCached:` + fmt.Sprintf("%v", this.ThreadsCached) + `,`,
		`ThreadsConnected:` + fmt.Sprintf("%v", this.ThreadsConnected) + `,`,
		`ThreadsCreated:` + fmt.Sprintf("%v", this.ThreadsCreated) + `,`,
		`ThreadsRunning:` + fmt.Sprintf("%v", this.ThreadsRunning) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MySQLQueries) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MySQLQueries{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "MySQLQueriesSpec", "MySQLQueriesSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MySQLQueriesList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]MySQLQueries{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "MySQLQueries", "MySQLQueries", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&MySQLQueriesList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *MySQLQueriesSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQueries := "[]MySQLQuerySpec{"
	for _, f := range this.Queries {
		repeatedStringForQueries += strings.Replace(strings.Replace(f.String(), "MySQLQuerySpec", "MySQLQuerySpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForQueries += "}"
	s := strings.Join([]string{`&MySQLQueriesSpec{`,
		`Queries:` + repeatedStringForQueries + `,`,
		`}`,
	}, "")
	return s
}
func (this *MySQLQuerySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MySQLQuerySpec{`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Time", "v1.Time", 1) + `,`,
		`UserHost:` + fmt.Sprintf("%v", this.UserHost) + `,`,
		`QueryTimeInMilliSeconds:` + fmt.Sprintf("%v", this.QueryTimeInMilliSeconds) + `,`,
		`LockTimeInMilliSeconds:` + fmt.Sprintf("%v", this.LockTimeInMilliSeconds) + `,`,
		`RowsSent:` + fmt.Sprintf("%v", this.RowsSent) + `,`,
		`RowsExamined:` + fmt.Sprintf("%v", this.RowsExamined) + `,`,
		`DB:` + fmt.Sprintf("%v", this.DB) + `,`,
		`LastInsertId:` + fmt.Sprintf("%v", this.LastInsertId) + `,`,
		`InsertId:` + fmt.Sprintf("%v", this.InsertId) + `,`,
		`ServerId:` + fmt.Sprintf("%v", this.ServerId) + `,`,
		`SQLText:` + fmt.Sprintf("%v", this.SQLText) + `,`,
		`ThreadId:` + fmt.Sprintf("%v", this.ThreadId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MySQLSchemaOverview) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MySQLSchemaOverview{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "GenericSchemaOverviewSpec", "GenericSchemaOverviewSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MySQLSchemaOverviewList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]MySQLSchemaOverview{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "MySQLSchemaOverview", "MySQLSchemaOverview", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&MySQLSchemaOverviewList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsCompletionFields) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsCompletionFields{`,
		`SizeInBytes:` + fmt.Sprintf("%v", this.SizeInBytes) + `,`,
		`TotalSize:` + fmt.Sprintf("%v", this.TotalSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsCompletionStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsCompletionStats{`,
		`SizeInBytes:` + fmt.Sprintf("%v", this.SizeInBytes) + `,`,
		`Fields:` + strings.Replace(this.Fields.String(), "NodesStatsCompletionFields", "NodesStatsCompletionFields", 1) + `,`,
		`TotalSize:` + fmt.Sprintf("%v", this.TotalSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsDocsStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsDocsStats{`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Deleted:` + fmt.Sprintf("%v", this.Deleted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsFieldDataFields) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsFieldDataFields{`,
		`MemorySize:` + fmt.Sprintf("%v", this.MemorySize) + `,`,
		`MemorySizeInBytes:` + fmt.Sprintf("%v", this.MemorySizeInBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsFielddataStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsFielddataStats{`,
		`MemorySize:` + fmt.Sprintf("%v", this.MemorySize) + `,`,
		`MemorySizeInBytes:` + fmt.Sprintf("%v", this.MemorySizeInBytes) + `,`,
		`Evictions:` + fmt.Sprintf("%v", this.Evictions) + `,`,
		`Fields:` + strings.Replace(this.Fields.String(), "NodesStatsFieldDataFields", "NodesStatsFieldDataFields", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsFlushStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsFlushStats{`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`TotalTime:` + fmt.Sprintf("%v", this.TotalTime) + `,`,
		`TotalTimeInMillis:` + fmt.Sprintf("%v", this.TotalTimeInMillis) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsGetStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsGetStats{`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`TimeInMillis:` + fmt.Sprintf("%v", this.TimeInMillis) + `,`,
		`Exists:` + fmt.Sprintf("%v", this.Exists) + `,`,
		`ExistsTime:` + fmt.Sprintf("%v", this.ExistsTime) + `,`,
		`ExistsTimeInMillis:` + fmt.Sprintf("%v", this.ExistsTimeInMillis) + `,`,
		`Missing:` + fmt.Sprintf("%v", this.Missing) + `,`,
		`MissingTime:` + fmt.Sprintf("%v", this.MissingTime) + `,`,
		`MissingTimeInMillis:` + fmt.Sprintf("%v", this.MissingTimeInMillis) + `,`,
		`Current:` + fmt.Sprintf("%v", this.Current) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsIndex) String() string {
	if this == nil {
		return "nil"
	}
	keysForIndicesLevel := make([]string, 0, len(this.IndicesLevel))
	for k := range this.IndicesLevel {
		keysForIndicesLevel = append(keysForIndicesLevel, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForIndicesLevel)
	mapStringForIndicesLevel := "map[string]NodesStatsIndex{"
	for _, k := range keysForIndicesLevel {
		mapStringForIndicesLevel += fmt.Sprintf("%v: %v,", k, this.IndicesLevel[k])
	}
	mapStringForIndicesLevel += "}"
	keysForShardsLevel := make([]string, 0, len(this.ShardsLevel))
	for k := range this.ShardsLevel {
		keysForShardsLevel = append(keysForShardsLevel, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForShardsLevel)
	mapStringForShardsLevel := "map[string]NodesStatsIndex{"
	for _, k := range keysForShardsLevel {
		mapStringForShardsLevel += fmt.Sprintf("%v: %v,", k, this.ShardsLevel[k])
	}
	mapStringForShardsLevel += "}"
	s := strings.Join([]string{`&NodesStatsIndex{`,
		`Docs:` + strings.Replace(this.Docs.String(), "NodesStatsDocsStats", "NodesStatsDocsStats", 1) + `,`,
		`Shards:` + strings.Replace(this.Shards.String(), "NodesStatsShardCountStats", "NodesStatsShardCountStats", 1) + `,`,
		`Store:` + strings.Replace(this.Store.String(), "NodesStatsStoreStats", "NodesStatsStoreStats", 1) + `,`,
		`Indexing:` + strings.Replace(this.Indexing.String(), "NodesStatsIndexingStats", "NodesStatsIndexingStats", 1) + `,`,
		`Get:` + strings.Replace(this.Get.String(), "NodesStatsGetStats", "NodesStatsGetStats", 1) + `,`,
		`Search:` + strings.Replace(this.Search.String(), "NodesStatsSearchStats", "NodesStatsSearchStats", 1) + `,`,
		`Merges:` + strings.Replace(this.Merges.String(), "NodesStatsMergeStats", "NodesStatsMergeStats", 1) + `,`,
		`Refresh:` + strings.Replace(this.Refresh.String(), "NodesStatsRefreshStats", "NodesStatsRefreshStats", 1) + `,`,
		`Flush:` + strings.Replace(this.Flush.String(), "NodesStatsFlushStats", "NodesStatsFlushStats", 1) + `,`,
		`Warmer:` + strings.Replace(this.Warmer.String(), "NodesStatsWarmerStats", "NodesStatsWarmerStats", 1) + `,`,
		`QueryCache:` + strings.Replace(this.QueryCache.String(), "NodesStatsQueryCacheStats", "NodesStatsQueryCacheStats", 1) + `,`,
		`Fielddata:` + strings.Replace(this.Fielddata.String(), "NodesStatsFielddataStats", "NodesStatsFielddataStats", 1) + `,`,
		`Completion:` + strings.Replace(this.Completion.String(), "NodesStatsCompletionStats", "NodesStatsCompletionStats", 1) + `,`,
		`Segments:` + strings.Replace(this.Segments.String(), "NodesStatsSegmentsStats", "NodesStatsSegmentsStats", 1) + `,`,
		`Translog:` + strings.Replace(this.Translog.String(), "NodesStatsTranslogStats", "NodesStatsTranslogStats", 1) + `,`,
		`RequestCache:` + strings.Replace(this.RequestCache.String(), "NodesStatsRequestCacheStats", "NodesStatsRequestCacheStats", 1) + `,`,
		`Recovery:` + strings.Replace(strings.Replace(this.Recovery.String(), "NodesStatsRecoveryStats", "NodesStatsRecoveryStats", 1), `&`, ``, 1) + `,`,
		`IndicesLevel:` + mapStringForIndicesLevel + `,`,
		`ShardsLevel:` + mapStringForShardsLevel + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsIndexingStats) String() string {
	if this == nil {
		return "nil"
	}
	keysForTypes := make([]string, 0, len(this.Types))
	for k := range this.Types {
		keysForTypes = append(keysForTypes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTypes)
	mapStringForTypes := "map[string]NodesStatsIndexingStats{"
	for _, k := range keysForTypes {
		mapStringForTypes += fmt.Sprintf("%v: %v,", k, this.Types[k])
	}
	mapStringForTypes += "}"
	s := strings.Join([]string{`&NodesStatsIndexingStats{`,
		`IndexTotal:` + fmt.Sprintf("%v", this.IndexTotal) + `,`,
		`IndexTime:` + fmt.Sprintf("%v", this.IndexTime) + `,`,
		`IndexTimeInMillis:` + fmt.Sprintf("%v", this.IndexTimeInMillis) + `,`,
		`IndexCurrent:` + fmt.Sprintf("%v", this.IndexCurrent) + `,`,
		`IndexFailed:` + fmt.Sprintf("%v", this.IndexFailed) + `,`,
		`DeleteTotal:` + fmt.Sprintf("%v", this.DeleteTotal) + `,`,
		`DeleteTime:` + fmt.Sprintf("%v", this.DeleteTime) + `,`,
		`DeleteTimeInMillis:` + fmt.Sprintf("%v", this.DeleteTimeInMillis) + `,`,
		`DeleteCurrent:` + fmt.Sprintf("%v", this.DeleteCurrent) + `,`,
		`NoopUpdateTotal:` + fmt.Sprintf("%v", this.NoopUpdateTotal) + `,`,
		`IsThrottled:` + fmt.Sprintf("%v", this.IsThrottled) + `,`,
		`ThrottledTime:` + fmt.Sprintf("%v", this.ThrottledTime) + `,`,
		`ThrottledTimeInMillis:` + fmt.Sprintf("%v", this.ThrottledTimeInMillis) + `,`,
		`Types:` + mapStringForTypes + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsMergeStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsMergeStats{`,
		`Current:` + fmt.Sprintf("%v", this.Current) + `,`,
		`CurrentDocs:` + fmt.Sprintf("%v", this.CurrentDocs) + `,`,
		`CurrentSize:` + fmt.Sprintf("%v", this.CurrentSize) + `,`,
		`CurrentSizeInBytes:` + fmt.Sprintf("%v", this.CurrentSizeInBytes) + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`TotalTime:` + fmt.Sprintf("%v", this.TotalTime) + `,`,
		`TotalTimeInMillis:` + fmt.Sprintf("%v", this.TotalTimeInMillis) + `,`,
		`TotalDocs:` + fmt.Sprintf("%v", this.TotalDocs) + `,`,
		`TotalSize:` + fmt.Sprintf("%v", this.TotalSize) + `,`,
		`TotalSizeInBytes:` + fmt.Sprintf("%v", this.TotalSizeInBytes) + `,`,
		`TotalStoppedTime:` + fmt.Sprintf("%v", this.TotalStoppedTime) + `,`,
		`TotalStoppedTimeInMillis:` + fmt.Sprintf("%v", this.TotalStoppedTimeInMillis) + `,`,
		`TotalThrottledTime:` + fmt.Sprintf("%v", this.TotalThrottledTime) + `,`,
		`TotalThrottledTimeInMillis:` + fmt.Sprintf("%v", this.TotalThrottledTimeInMillis) + `,`,
		`TotalThrottleBytes:` + fmt.Sprintf("%v", this.TotalThrottleBytes) + `,`,
		`TotalThrottleBytesInBytes:` + fmt.Sprintf("%v", this.TotalThrottleBytesInBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsNodeOS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsNodeOS{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`CPU:` + strings.Replace(this.CPU.String(), "NodesStatsNodeOSCPU", "NodesStatsNodeOSCPU", 1) + `,`,
		`Mem:` + strings.Replace(this.Mem.String(), "NodesStatsNodeOSMem", "NodesStatsNodeOSMem", 1) + `,`,
		`Swap:` + strings.Replace(this.Swap.String(), "NodesStatsNodeOSSwap", "NodesStatsNodeOSSwap", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsNodeOSCPU) String() string {
	if this == nil {
		return "nil"
	}
	keysForLoadAverage := make([]string, 0, len(this.LoadAverage))
	for k := range this.LoadAverage {
		keysForLoadAverage = append(keysForLoadAverage, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLoadAverage)
	mapStringForLoadAverage := "map[string]float64{"
	for _, k := range keysForLoadAverage {
		mapStringForLoadAverage += fmt.Sprintf("%v: %v,", k, this.LoadAverage[k])
	}
	mapStringForLoadAverage += "}"
	s := strings.Join([]string{`&NodesStatsNodeOSCPU{`,
		`Percent:` + fmt.Sprintf("%v", this.Percent) + `,`,
		`LoadAverage:` + mapStringForLoadAverage + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsNodeOSMem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsNodeOSMem{`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`TotalInBytes:` + fmt.Sprintf("%v", this.TotalInBytes) + `,`,
		`Free:` + fmt.Sprintf("%v", this.Free) + `,`,
		`FreeInBytes:` + fmt.Sprintf("%v", this.FreeInBytes) + `,`,
		`Used:` + fmt.Sprintf("%v", this.Used) + `,`,
		`UsedInBytes:` + fmt.Sprintf("%v", this.UsedInBytes) + `,`,
		`FreePercent:` + fmt.Sprintf("%v", this.FreePercent) + `,`,
		`UsedPercent:` + fmt.Sprintf("%v", this.UsedPercent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsNodeOSSwap) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsNodeOSSwap{`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`TotalInBytes:` + fmt.Sprintf("%v", this.TotalInBytes) + `,`,
		`Free:` + fmt.Sprintf("%v", this.Free) + `,`,
		`FreeInBytes:` + fmt.Sprintf("%v", this.FreeInBytes) + `,`,
		`Used:` + fmt.Sprintf("%v", this.Used) + `,`,
		`UsedInBytes:` + fmt.Sprintf("%v", this.UsedInBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsQueryCacheStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsQueryCacheStats{`,
		`MemorySize:` + fmt.Sprintf("%v", this.MemorySize) + `,`,
		`MemorySizeInBytes:` + fmt.Sprintf("%v", this.MemorySizeInBytes) + `,`,
		`TotalCount:` + fmt.Sprintf("%v", this.TotalCount) + `,`,
		`HitCount:` + fmt.Sprintf("%v", this.HitCount) + `,`,
		`MissCount:` + fmt.Sprintf("%v", this.MissCount) + `,`,
		`CacheSize:` + fmt.Sprintf("%v", this.CacheSize) + `,`,
		`CacheCount:` + fmt.Sprintf("%v", this.CacheCount) + `,`,
		`Evictions:` + fmt.Sprintf("%v", this.Evictions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsRecoveryStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsRecoveryStats{`,
		`CurrentAsSource:` + fmt.Sprintf("%v", this.CurrentAsSource) + `,`,
		`CurrentAsTarget:` + fmt.Sprintf("%v", this.CurrentAsTarget) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsRefreshStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsRefreshStats{`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`TotalTime:` + fmt.Sprintf("%v", this.TotalTime) + `,`,
		`TotalTimeInMillis:` + fmt.Sprintf("%v", this.TotalTimeInMillis) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsRequestCacheStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsRequestCacheStats{`,
		`MemorySize:` + fmt.Sprintf("%v", this.MemorySize) + `,`,
		`MemorySizeInBytes:` + fmt.Sprintf("%v", this.MemorySizeInBytes) + `,`,
		`Evictions:` + fmt.Sprintf("%v", this.Evictions) + `,`,
		`HitCount:` + fmt.Sprintf("%v", this.HitCount) + `,`,
		`MissCount:` + fmt.Sprintf("%v", this.MissCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsSearchStats) String() string {
	if this == nil {
		return "nil"
	}
	keysForGroups := make([]string, 0, len(this.Groups))
	for k := range this.Groups {
		keysForGroups = append(keysForGroups, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForGroups)
	mapStringForGroups := "map[string]NodesStatsSearchStats{"
	for _, k := range keysForGroups {
		mapStringForGroups += fmt.Sprintf("%v: %v,", k, this.Groups[k])
	}
	mapStringForGroups += "}"
	s := strings.Join([]string{`&NodesStatsSearchStats{`,
		`OpenContexts:` + fmt.Sprintf("%v", this.OpenContexts) + `,`,
		`QueryTotal:` + fmt.Sprintf("%v", this.QueryTotal) + `,`,
		`QueryTime:` + fmt.Sprintf("%v", this.QueryTime) + `,`,
		`QueryTimeInMillis:` + fmt.Sprintf("%v", this.QueryTimeInMillis) + `,`,
		`QueryCurrent:` + fmt.Sprintf("%v", this.QueryCurrent) + `,`,
		`FetchTotal:` + fmt.Sprintf("%v", this.FetchTotal) + `,`,
		`FetchTime:` + fmt.Sprintf("%v", this.FetchTime) + `,`,
		`FetchTimeInMillis:` + fmt.Sprintf("%v", this.FetchTimeInMillis) + `,`,
		`FetchCurrent:` + fmt.Sprintf("%v", this.FetchCurrent) + `,`,
		`ScrollTotal:` + fmt.Sprintf("%v", this.ScrollTotal) + `,`,
		`ScrollTime:` + fmt.Sprintf("%v", this.ScrollTime) + `,`,
		`ScrollTimeInMillis:` + fmt.Sprintf("%v", this.ScrollTimeInMillis) + `,`,
		`ScrollCurrent:` + fmt.Sprintf("%v", this.ScrollCurrent) + `,`,
		`Groups:` + mapStringForGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsSegmentsStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsSegmentsStats{`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Memory:` + fmt.Sprintf("%v", this.Memory) + `,`,
		`MemoryInBytes:` + fmt.Sprintf("%v", this.MemoryInBytes) + `,`,
		`TermsMemory:` + fmt.Sprintf("%v", this.TermsMemory) + `,`,
		`TermsMemoryInBytes:` + fmt.Sprintf("%v", this.TermsMemoryInBytes) + `,`,
		`StoredFieldsMemory:` + fmt.Sprintf("%v", this.StoredFieldsMemory) + `,`,
		`StoredFieldsMemoryInBytes:` + fmt.Sprintf("%v", this.StoredFieldsMemoryInBytes) + `,`,
		`TermVectorsMemory:` + fmt.Sprintf("%v", this.TermVectorsMemory) + `,`,
		`TermVectorsMemoryInBytes:` + fmt.Sprintf("%v", this.TermVectorsMemoryInBytes) + `,`,
		`NormsMemory:` + fmt.Sprintf("%v", this.NormsMemory) + `,`,
		`NormsMemoryInBytes:` + fmt.Sprintf("%v", this.NormsMemoryInBytes) + `,`,
		`DocValuesMemory:` + fmt.Sprintf("%v", this.DocValuesMemory) + `,`,
		`DocValuesMemoryInBytes:` + fmt.Sprintf("%v", this.DocValuesMemoryInBytes) + `,`,
		`IndexWriterMemory:` + fmt.Sprintf("%v", this.IndexWriterMemory) + `,`,
		`IndexWriterMemoryInBytes:` + fmt.Sprintf("%v", this.IndexWriterMemoryInBytes) + `,`,
		`IndexWriterMaxMemory:` + fmt.Sprintf("%v", this.IndexWriterMaxMemory) + `,`,
		`IndexWriterMaxMemoryInBytes:` + fmt.Sprintf("%v", this.IndexWriterMaxMemoryInBytes) + `,`,
		`VersionMapMemory:` + fmt.Sprintf("%v", this.VersionMapMemory) + `,`,
		`VersionMapMemoryInBytes:` + fmt.Sprintf("%v", this.VersionMapMemoryInBytes) + `,`,
		`FixedBitSetMemory:` + fmt.Sprintf("%v", this.FixedBitSetMemory) + `,`,
		`FixedBitSetMemoryInBytes:` + fmt.Sprintf("%v", this.FixedBitSetMemoryInBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsShardCountStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsShardCountStats{`,
		`TotalCount:` + fmt.Sprintf("%v", this.TotalCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsStoreStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsStoreStats{`,
		`SizeInBytes:` + fmt.Sprintf("%v", this.SizeInBytes) + `,`,
		`TotalSize:` + fmt.Sprintf("%v", this.TotalSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsTranslogStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsTranslogStats{`,
		`Operations:` + fmt.Sprintf("%v", this.Operations) + `,`,
		`SizeInBytes:` + fmt.Sprintf("%v", this.SizeInBytes) + `,`,
		`TotalSize:` + fmt.Sprintf("%v", this.TotalSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesStatsWarmerStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesStatsWarmerStats{`,
		`Current:` + fmt.Sprintf("%v", this.Current) + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`TotalTime:` + fmt.Sprintf("%v", this.TotalTime) + `,`,
		`TotalTimeInMillis:` + fmt.Sprintf("%v", this.TotalTimeInMillis) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PGSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PGSetting{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`CurrentValue:` + fmt.Sprintf("%v", this.CurrentValue) + `,`,
		`DefaultValue:` + fmt.Sprintf("%v", this.DefaultValue) + `,`,
		`Unit:` + fmt.Sprintf("%v", this.Unit) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresBackupInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostgresBackupInfo{`,
		`}`,
	}, "")
	return s
}
func (this *PostgresConnectionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostgresConnectionInfo{`,
		`MaxConnections:` + fmt.Sprintf("%v", this.MaxConnections) + `,`,
		`ActiveConnections:` + fmt.Sprintf("%v", this.ActiveConnections) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresInsight) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostgresInsight{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "PostgresInsightSpec", "PostgresInsightSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Status), "PostgresStatus", "v1alpha2.PostgresStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresInsightList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]PostgresInsight{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "PostgresInsight", "PostgresInsight", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&PostgresInsightList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresInsightSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReplicationStatus := "[]PostgresReplicationStatus{"
	for _, f := range this.ReplicationStatus {
		repeatedStringForReplicationStatus += strings.Replace(strings.Replace(f.String(), "PostgresReplicationStatus", "PostgresReplicationStatus", 1), `&`, ``, 1) + ","
	}
	repeatedStringForReplicationStatus += "}"
	s := strings.Join([]string{`&PostgresInsightSpec{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`ConnectionURL:` + fmt.Sprintf("%v", this.ConnectionURL) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`ReplicationStatus:` + repeatedStringForReplicationStatus + `,`,
		`ConnectionInfo:` + strings.Replace(strings.Replace(this.ConnectionInfo.String(), "PostgresConnectionInfo", "PostgresConnectionInfo", 1), `&`, ``, 1) + `,`,
		`BackupInfo:` + strings.Replace(strings.Replace(this.BackupInfo.String(), "PostgresBackupInfo", "PostgresBackupInfo", 1), `&`, ``, 1) + `,`,
		`VacuumInfo:` + strings.Replace(strings.Replace(this.VacuumInfo.String(), "PostgresVacuumInfo", "PostgresVacuumInfo", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresQueries) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostgresQueries{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "PostgresQueriesSpec", "PostgresQueriesSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresQueriesList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]PostgresQueries{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "PostgresQueries", "PostgresQueries", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&PostgresQueriesList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresQueriesSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQueries := "[]PostgresQuerySpec{"
	for _, f := range this.Queries {
		repeatedStringForQueries += strings.Replace(strings.Replace(f.String(), "PostgresQuerySpec", "PostgresQuerySpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForQueries += "}"
	s := strings.Join([]string{`&PostgresQueriesSpec{`,
		`Queries:` + repeatedStringForQueries + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresQuerySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostgresQuerySpec{`,
		`UserOID:` + fmt.Sprintf("%v", this.UserOID) + `,`,
		`DatabaseOID:` + fmt.Sprintf("%v", this.DatabaseOID) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`Calls:` + fmt.Sprintf("%v", this.Calls) + `,`,
		`Rows:` + fmt.Sprintf("%v", this.Rows) + `,`,
		`TotalTimeMilliSeconds:` + fmt.Sprintf("%v", this.TotalTimeMilliSeconds) + `,`,
		`MinTimeMilliSeconds:` + fmt.Sprintf("%v", this.MinTimeMilliSeconds) + `,`,
		`MaxTimeMilliSeconds:` + fmt.Sprintf("%v", this.MaxTimeMilliSeconds) + `,`,
		`SharedBlksHit:` + fmt.Sprintf("%v", this.SharedBlksHit) + `,`,
		`SharedBlksRead:` + fmt.Sprintf("%v", this.SharedBlksRead) + `,`,
		`SharedBlksDirtied:` + fmt.Sprintf("%v", this.SharedBlksDirtied) + `,`,
		`SharedBlksWritten:` + fmt.Sprintf("%v", this.SharedBlksWritten) + `,`,
		`LocalBlksHit:` + fmt.Sprintf("%v", this.LocalBlksHit) + `,`,
		`LocalBlksRead:` + fmt.Sprintf("%v", this.LocalBlksRead) + `,`,
		`LocalBlksDirtied:` + fmt.Sprintf("%v", this.LocalBlksDirtied) + `,`,
		`LocalBlksWritten:` + fmt.Sprintf("%v", this.LocalBlksWritten) + `,`,
		`TempBlksRead:` + fmt.Sprintf("%v", this.TempBlksRead) + `,`,
		`TempBlksWritten:` + fmt.Sprintf("%v", this.TempBlksWritten) + `,`,
		`BlkReadTimeMilliSeconds:` + fmt.Sprintf("%v", this.BlkReadTimeMilliSeconds) + `,`,
		`BlkWriteTime:` + fmt.Sprintf("%v", this.BlkWriteTime) + `,`,
		`BufferHitPercentage:` + fmt.Sprintf("%v", this.BufferHitPercentage) + `,`,
		`LocalBufferHitPercentage:` + fmt.Sprintf("%v", this.LocalBufferHitPercentage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresReplicationStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostgresReplicationStatus{`,
		`ApplicationName:` + fmt.Sprintf("%v", this.ApplicationName) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`WriteLag:` + fmt.Sprintf("%v", this.WriteLag) + `,`,
		`FlushLag:` + fmt.Sprintf("%v", this.FlushLag) + `,`,
		`ReplayLag:` + fmt.Sprintf("%v", this.ReplayLag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresSchemaOverview) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostgresSchemaOverview{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "GenericSchemaOverviewSpec", "GenericSchemaOverviewSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresSchemaOverviewList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]PostgresSchemaOverview{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "PostgresSchemaOverview", "PostgresSchemaOverview", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&PostgresSchemaOverviewList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostgresSettings{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "PostgresSettingsSpec", "PostgresSettingsSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresSettingsList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]PostgresSettings{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "PostgresSettings", "PostgresSettings", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&PostgresSettingsList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresSettingsSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSettings := "[]PGSetting{"
	for _, f := range this.Settings {
		repeatedStringForSettings += strings.Replace(strings.Replace(f.String(), "PGSetting", "PGSetting", 1), `&`, ``, 1) + ","
	}
	repeatedStringForSettings += "}"
	s := strings.Join([]string{`&PostgresSettingsSpec{`,
		`Settings:` + repeatedStringForSettings + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresVacuumInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostgresVacuumInfo{`,
		`AutoVacuum:` + fmt.Sprintf("%v", this.AutoVacuum) + `,`,
		`ActiveVacuumProcess:` + fmt.Sprintf("%v", this.ActiveVacuumProcess) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RedisDatabaseSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RedisDatabaseSpec{`,
		`DBId:` + fmt.Sprintf("%v", this.DBId) + `,`,
		`Keys:` + fmt.Sprintf("%v", this.Keys) + `,`,
		`Expires:` + strings.Replace(fmt.Sprintf("%v", this.Expires), "Time", "v1.Time", 1) + `,`,
		`AvgTTLMilliSeconds:` + fmt.Sprintf("%v", this.AvgTTLMilliSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RedisInsight) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RedisInsight{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "RedisInsightSpec", "RedisInsightSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Status), "RedisStatus", "v1alpha2.RedisStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RedisInsightList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]RedisInsight{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "RedisInsight", "RedisInsight", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&RedisInsightList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *RedisInsightSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RedisInsightSpec{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`EvictionPolicy:` + fmt.Sprintf("%v", this.EvictionPolicy) + `,`,
		`MaxClients:` + fmt.Sprintf("%v", this.MaxClients) + `,`,
		`ConnectedClients:` + fmt.Sprintf("%v", this.ConnectedClients) + `,`,
		`BlockedClients:` + fmt.Sprintf("%v", this.BlockedClients) + `,`,
		`TotalKeys:` + fmt.Sprintf("%v", this.TotalKeys) + `,`,
		`ExpiredKeys:` + fmt.Sprintf("%v", this.ExpiredKeys) + `,`,
		`EvictedKeys:` + fmt.Sprintf("%v", this.EvictedKeys) + `,`,
		`ReceivedConnections:` + fmt.Sprintf("%v", this.ReceivedConnections) + `,`,
		`RejectedConnections:` + fmt.Sprintf("%v", this.RejectedConnections) + `,`,
		`SlowLogThresholdMircoSeconds:` + fmt.Sprintf("%v", this.SlowLogThresholdMircoSeconds) + `,`,
		`SlowLogMaxLen:` + fmt.Sprintf("%v", this.SlowLogMaxLen) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RedisQueries) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RedisQueries{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "RedisQueriesSpec", "RedisQueriesSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RedisQueriesList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]RedisQueries{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "RedisQueries", "RedisQueries", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&RedisQueriesList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *RedisQueriesSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQueries := "[]RedisQuerySpec{"
	for _, f := range this.Queries {
		repeatedStringForQueries += strings.Replace(strings.Replace(f.String(), "RedisQuerySpec", "RedisQuerySpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForQueries += "}"
	s := strings.Join([]string{`&RedisQueriesSpec{`,
		`Queries:` + repeatedStringForQueries + `,`,
		`}`,
	}, "")
	return s
}
func (this *RedisQuerySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RedisQuerySpec{`,
		`QueryId:` + fmt.Sprintf("%v", this.QueryId) + `,`,
		`QueryTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.QueryTimestamp), "Time", "v1.Time", 1) + `,`,
		`ExecTimeInMircoSeconds:` + fmt.Sprintf("%v", this.ExecTimeInMircoSeconds) + `,`,
		`Args:` + fmt.Sprintf("%v", this.Args) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RedisSchemaOverview) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RedisSchemaOverview{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "RedisSchemaOverviewSpec", "RedisSchemaOverviewSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RedisSchemaOverviewList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]RedisSchemaOverview{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "RedisSchemaOverview", "RedisSchemaOverview", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&RedisSchemaOverviewList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *RedisSchemaOverviewSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDatabases := "[]RedisDatabaseSpec{"
	for _, f := range this.Databases {
		repeatedStringForDatabases += strings.Replace(strings.Replace(f.String(), "RedisDatabaseSpec", "RedisDatabaseSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForDatabases += "}"
	s := strings.Join([]string{`&RedisSchemaOverviewSpec{`,
		`Databases:` + repeatedStringForDatabases + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ElasticsearchClusterHealth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElasticsearchClusterHealth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElasticsearchClusterHealth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePrimaryShards", wireType)
			}
			m.ActivePrimaryShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivePrimaryShards |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveShards", wireType)
			}
			m.ActiveShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveShards |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveShardsPercentAsNumber", wireType)
			}
			m.ActiveShardsPercentAsNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveShardsPercentAsNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayedUnassignedShards", wireType)
			}
			m.DelayedUnassignedShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelayedUnassignedShards |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitializingShards", wireType)
			}
			m.InitializingShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitializingShards |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfDataNodes", wireType)
			}
			m.NumberOfDataNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfDataNodes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfInFlightFetch", wireType)
			}
			m.NumberOfInFlightFetch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfInFlightFetch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfNodes", wireType)
			}
			m.NumberOfNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfNodes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfPendingTasks", wireType)
			}
			m.NumberOfPendingTasks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfPendingTasks |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelocatingShards", wireType)
			}
			m.RelocatingShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelocatingShards |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnassignedShards", wireType)
			}
			m.UnassignedShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnassignedShards |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskMaxWaitingInQueueMilliSeconds", wireType)
			}
			m.TaskMaxWaitingInQueueMilliSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskMaxWaitingInQueueMilliSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElasticsearchIndexSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElasticsearchIndexSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElasticsearchIndexSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryStoreSizeInBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryStoreSizeInBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStoreSizeInBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalStoreSizeInBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElasticsearchInsight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElasticsearchInsight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElasticsearchInsight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElasticsearchInsightList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElasticsearchInsightList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElasticsearchInsightList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, ElasticsearchInsight{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElasticsearchInsightSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElasticsearchInsightSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElasticsearchInsightSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterHealth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterHealth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElasticsearchNodesStatSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElasticsearchNodesStatSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElasticsearchNodesStatSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &v1.Time{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransportAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Indices == nil {
				m.Indices = &NodesStatsIndex{}
			}
			if err := m.Indices.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OS == nil {
				m.OS = &NodesStatsNodeOS{}
			}
			if err := m.OS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElasticsearchNodesStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElasticsearchNodesStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElasticsearchNodesStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElasticsearchNodesStatsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElasticsearchNodesStatsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElasticsearchNodesStatsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, ElasticsearchNodesStats{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElasticsearchNodesStatsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElasticsearchNodesStatsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElasticsearchNodesStatsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, ElasticsearchNodesStatSpec{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElasticsearchNodesStatsStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElasticsearchNodesStatsStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElasticsearchNodesStatsStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElasticsearchSchemaOverview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElasticsearchSchemaOverview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElasticsearchSchemaOverview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElasticsearchSchemaOverviewList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElasticsearchSchemaOverviewList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElasticsearchSchemaOverviewList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, ElasticsearchSchemaOverview{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElasticsearchSchemaOverviewSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElasticsearchSchemaOverviewSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElasticsearchSchemaOverviewSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indices = append(m.Indices, ElasticsearchIndexSpec{})
			if err := m.Indices[len(m.Indices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericDatabaseSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericDatabaseSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericDatabaseSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableSizeInBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableSizeInBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericSchemaOverviewSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericSchemaOverviewSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericSchemaOverviewSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Databases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Databases = append(m.Databases, GenericDatabaseSpec{})
			if err := m.Databases[len(m.Databases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MariaDBInsight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MariaDBInsight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MariaDBInsight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MariaDBInsightList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MariaDBInsightList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MariaDBInsightList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, MariaDBInsight{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MariaDBInsightSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MariaDBInsightSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MariaDBInsightSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxConnections", wireType)
			}
			m.MaxConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxConnections |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUsedConnections", wireType)
			}
			m.MaxUsedConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUsedConnections |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Questions", wireType)
			}
			m.Questions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Questions |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongQueryTimeThresholdSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LongQueryTimeThresholdSeconds = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfSlowQueries", wireType)
			}
			m.NumberOfSlowQueries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfSlowQueries |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbortedClients", wireType)
			}
			m.AbortedClients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbortedClients |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbortedConnections", wireType)
			}
			m.AbortedConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbortedConnections |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadsCached", wireType)
			}
			m.ThreadsCached = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadsCached |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadsConnected", wireType)
			}
			m.ThreadsConnected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadsConnected |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadsCreated", wireType)
			}
			m.ThreadsCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadsCreated |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadsRunning", wireType)
			}
			m.ThreadsRunning = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadsRunning |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MariaDBQueries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MariaDBQueries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MariaDBQueries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MariaDBQueriesList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MariaDBQueriesList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MariaDBQueriesList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, MariaDBQueries{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MariaDBQueriesSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MariaDBQueriesSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MariaDBQueriesSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, MariaDBQuerySpec{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MariaDBQuerySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MariaDBQuerySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MariaDBQuerySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &v1.Time{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryTimeInMilliSeconds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryTimeInMilliSeconds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTimeInMilliSeconds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockTimeInMilliSeconds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsSent", wireType)
			}
			m.RowsSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsSent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsExamined", wireType)
			}
			m.RowsExamined = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsExamined |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastInsertId", wireType)
			}
			m.LastInsertId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastInsertId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertId", wireType)
			}
			m.InsertId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsertId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQLText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SQLText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			m.ThreadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsAffected", wireType)
			}
			m.RowsAffected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsAffected |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MariaDBSchemaOverview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MariaDBSchemaOverview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MariaDBSchemaOverview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MariaDBSchemaOverviewList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MariaDBSchemaOverviewList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MariaDBSchemaOverviewList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, MariaDBSchemaOverview{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBCollectionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBCollectionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBCollectionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TotalSize = append(m.TotalSize, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenerated
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenerated
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TotalSize) == 0 {
					m.TotalSize = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TotalSize = append(m.TotalSize, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBConnectionsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBConnectionsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBConnectionsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentConnections", wireType)
			}
			m.CurrentConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentConnections |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalConnections", wireType)
			}
			m.TotalConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalConnections |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableConnections", wireType)
			}
			m.AvailableConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableConnections |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveConnections", wireType)
			}
			m.ActiveConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveConnections |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBDatabaseStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBDatabaseStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBDatabaseStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCollections", wireType)
			}
			m.TotalCollections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCollections |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSize", wireType)
			}
			m.DataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalIndexes", wireType)
			}
			m.TotalIndexes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalIndexes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexSize", wireType)
			}
			m.IndexSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBInsight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBInsight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBInsight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBInsightList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBInsightList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBInsightList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, MongoDBInsight{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBInsightSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBInsightSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBInsightSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = MongoDBMode(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = kubedb_dev_apimachinery_apis_kubedb_v1alpha2.DatabasePhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Connections == nil {
				m.Connections = &MongoDBConnectionsInfo{}
			}
			if err := m.Connections.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DBStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DBStats == nil {
				m.DBStats = &MongoDBDatabaseStats{}
			}
			if err := m.DBStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShardsInfo == nil {
				m.ShardsInfo = &MongoDBShardsInfo{}
			}
			if err := m.ShardsInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaSetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicaSetInfo == nil {
				m.ReplicaSetInfo = &MongoDBReplicaSetInfo{}
			}
			if err := m.ReplicaSetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBQueries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBQueries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBQueries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBQueriesList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBQueriesList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBQueriesList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, MongoDBQueries{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBQueriesSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBQueriesSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBQueriesSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, MongoDBQuerySpec{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBQuerySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBQuerySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBQuerySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = MongoDBOperation(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgExecutionTimeMilliSeconds", wireType)
			}
			m.AvgExecutionTimeMilliSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvgExecutionTimeMilliSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinExecutionTimeMilliSeconds", wireType)
			}
			m.MinExecutionTimeMilliSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinExecutionTimeMilliSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxExecutionTimeMilliSeconds", wireType)
			}
			m.MaxExecutionTimeMilliSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxExecutionTimeMilliSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBReplicaSetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBReplicaSetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBReplicaSetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfReplicas", wireType)
			}
			m.NumberOfReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfReplicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBSchemaOverview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBSchemaOverview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBSchemaOverview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBSchemaOverviewList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBSchemaOverviewList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBSchemaOverviewList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, MongoDBSchemaOverview{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBSchemaOverviewSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBSchemaOverviewSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBSchemaOverviewSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collections = append(m.Collections, MongoDBCollectionSpec{})
			if err := m.Collections[len(m.Collections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MongoDBShardsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MongoDBShardsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MongoDBShardsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfShards", wireType)
			}
			m.NumberOfShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfShards |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicasPerShards", wireType)
			}
			m.ReplicasPerShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicasPerShards |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfChunks", wireType)
			}
			m.NumberOfChunks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfChunks |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancerEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BalancerEnabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunksBalanced", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChunksBalanced = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLInsight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLInsight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLInsight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLInsightList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLInsightList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLInsightList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, MySQLInsight{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLInsightSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLInsightSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLInsightSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxConnections", wireType)
			}
			m.MaxConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxConnections |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUsedConnections", wireType)
			}
			m.MaxUsedConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUsedConnections |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Questions", wireType)
			}
			m.Questions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Questions |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongQueryTimeThresholdSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LongQueryTimeThresholdSeconds = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfSlowQueries", wireType)
			}
			m.NumberOfSlowQueries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfSlowQueries |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbortedClients", wireType)
			}
			m.AbortedClients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbortedClients |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbortedConnections", wireType)
			}
			m.AbortedConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbortedConnections |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadsCached", wireType)
			}
			m.ThreadsCached = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadsCached |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadsConnected", wireType)
			}
			m.ThreadsConnected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadsConnected |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadsCreated", wireType)
			}
			m.ThreadsCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadsCreated |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadsRunning", wireType)
			}
			m.ThreadsRunning = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadsRunning |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLQueries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLQueries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLQueries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLQueriesList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLQueriesList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLQueriesList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, MySQLQueries{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLQueriesSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLQueriesSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLQueriesSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, MySQLQuerySpec{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLQuerySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLQuerySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLQuerySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &v1.Time{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryTimeInMilliSeconds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryTimeInMilliSeconds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTimeInMilliSeconds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockTimeInMilliSeconds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsSent", wireType)
			}
			m.RowsSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsSent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsExamined", wireType)
			}
			m.RowsExamined = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsExamined |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastInsertId", wireType)
			}
			m.LastInsertId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastInsertId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertId", wireType)
			}
			m.InsertId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsertId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQLText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SQLText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			m.ThreadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLSchemaOverview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLSchemaOverview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLSchemaOverview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLSchemaOverviewList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLSchemaOverviewList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLSchemaOverviewList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, MySQLSchemaOverview{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsCompletionFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsCompletionFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsCompletionFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeInBytes", wireType)
			}
			m.SizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsCompletionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsCompletionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsCompletionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeInBytes", wireType)
			}
			m.SizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &NodesStatsCompletionFields{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsDocsStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsDocsStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsDocsStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsFieldDataFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsFieldDataFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsFieldDataFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemorySize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySizeInBytes", wireType)
			}
			m.MemorySizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemorySizeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsFielddataStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsFielddataStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsFielddataStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemorySize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySizeInBytes", wireType)
			}
			m.MemorySizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemorySizeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evictions", wireType)
			}
			m.Evictions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Evictions |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &NodesStatsFieldDataFields{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsFlushStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsFlushStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsFlushStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTimeInMillis", wireType)
			}
			m.TotalTimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsGetStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsGetStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsGetStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInMillis", wireType)
			}
			m.TimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			m.Exists = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exists |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistsTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExistsTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistsTimeInMillis", wireType)
			}
			m.ExistsTimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExistsTimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Missing", wireType)
			}
			m.Missing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Missing |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissingTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissingTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissingTimeInMillis", wireType)
			}
			m.MissingTimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissingTimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			m.Current = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Current |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Docs == nil {
				m.Docs = &NodesStatsDocsStats{}
			}
			if err := m.Docs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shards == nil {
				m.Shards = &NodesStatsShardCountStats{}
			}
			if err := m.Shards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Store == nil {
				m.Store = &NodesStatsStoreStats{}
			}
			if err := m.Store.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Indexing == nil {
				m.Indexing = &NodesStatsIndexingStats{}
			}
			if err := m.Indexing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Get", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Get == nil {
				m.Get = &NodesStatsGetStats{}
			}
			if err := m.Get.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Search == nil {
				m.Search = &NodesStatsSearchStats{}
			}
			if err := m.Search.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Merges == nil {
				m.Merges = &NodesStatsMergeStats{}
			}
			if err := m.Merges.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refresh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Refresh == nil {
				m.Refresh = &NodesStatsRefreshStats{}
			}
			if err := m.Refresh.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flush == nil {
				m.Flush = &NodesStatsFlushStats{}
			}
			if err := m.Flush.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warmer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Warmer == nil {
				m.Warmer = &NodesStatsWarmerStats{}
			}
			if err := m.Warmer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryCache == nil {
				m.QueryCache = &NodesStatsQueryCacheStats{}
			}
			if err := m.QueryCache.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fielddata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fielddata == nil {
				m.Fielddata = &NodesStatsFielddataStats{}
			}
			if err := m.Fielddata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Completion == nil {
				m.Completion = &NodesStatsCompletionStats{}
			}
			if err := m.Completion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Segments == nil {
				m.Segments = &NodesStatsSegmentsStats{}
			}
			if err := m.Segments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Translog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Translog == nil {
				m.Translog = &NodesStatsTranslogStats{}
			}
			if err := m.Translog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestCache == nil {
				m.RequestCache = &NodesStatsRequestCacheStats{}
			}
			if err := m.RequestCache.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Recovery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndicesLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndicesLevel == nil {
				m.IndicesLevel = make(map[string]NodesStatsIndex)
			}
			var mapkey string
			mapvalue := &NodesStatsIndex{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenerated
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenerated
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NodesStatsIndex{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IndicesLevel[mapkey] = *mapvalue
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardsLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShardsLevel == nil {
				m.ShardsLevel = make(map[string]NodesStatsIndex)
			}
			var mapkey string
			mapvalue := &NodesStatsIndex{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenerated
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenerated
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NodesStatsIndex{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ShardsLevel[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsIndexingStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsIndexingStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsIndexingStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexTotal", wireType)
			}
			m.IndexTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexTimeInMillis", wireType)
			}
			m.IndexTimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexTimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexCurrent", wireType)
			}
			m.IndexCurrent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexCurrent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexFailed", wireType)
			}
			m.IndexFailed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexFailed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteTotal", wireType)
			}
			m.DeleteTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeleteTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteTimeInMillis", wireType)
			}
			m.DeleteTimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteTimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteCurrent", wireType)
			}
			m.DeleteCurrent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteCurrent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoopUpdateTotal", wireType)
			}
			m.NoopUpdateTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoopUpdateTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsThrottled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsThrottled = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThrottledTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThrottledTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThrottledTimeInMillis", wireType)
			}
			m.ThrottledTimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThrottledTimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Types == nil {
				m.Types = make(map[string]NodesStatsIndexingStats)
			}
			var mapkey string
			mapvalue := &NodesStatsIndexingStats{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenerated
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenerated
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NodesStatsIndexingStats{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Types[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsMergeStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsMergeStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsMergeStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			m.Current = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Current |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDocs", wireType)
			}
			m.CurrentDocs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentDocs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSizeInBytes", wireType)
			}
			m.CurrentSizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentSizeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTimeInMillis", wireType)
			}
			m.TotalTimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDocs", wireType)
			}
			m.TotalDocs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDocs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSizeInBytes", wireType)
			}
			m.TotalSizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSizeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStoppedTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalStoppedTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStoppedTimeInMillis", wireType)
			}
			m.TotalStoppedTimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStoppedTimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalThrottledTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalThrottledTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalThrottledTimeInMillis", wireType)
			}
			m.TotalThrottledTimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalThrottledTimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalThrottleBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalThrottleBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalThrottleBytesInBytes", wireType)
			}
			m.TotalThrottleBytesInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalThrottleBytesInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsNodeOS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsNodeOS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsNodeOS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPU", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CPU == nil {
				m.CPU = &NodesStatsNodeOSCPU{}
			}
			if err := m.CPU.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mem == nil {
				m.Mem = &NodesStatsNodeOSMem{}
			}
			if err := m.Mem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Swap == nil {
				m.Swap = &NodesStatsNodeOSSwap{}
			}
			if err := m.Swap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsNodeOSCPU) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsNodeOSCPU: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsNodeOSCPU: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percent", wireType)
			}
			m.Percent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Percent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadAverage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadAverage == nil {
				m.LoadAverage = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LoadAverage[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsNodeOSMem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsNodeOSMem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsNodeOSMem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalInBytes", wireType)
			}
			m.TotalInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Free = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeInBytes", wireType)
			}
			m.FreeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Used = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedInBytes", wireType)
			}
			m.UsedInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreePercent", wireType)
			}
			m.FreePercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreePercent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedPercent", wireType)
			}
			m.UsedPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedPercent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsNodeOSSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsNodeOSSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsNodeOSSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalInBytes", wireType)
			}
			m.TotalInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Free = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeInBytes", wireType)
			}
			m.FreeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Used = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedInBytes", wireType)
			}
			m.UsedInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsQueryCacheStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsQueryCacheStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsQueryCacheStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemorySize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySizeInBytes", wireType)
			}
			m.MemorySizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemorySizeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HitCount", wireType)
			}
			m.HitCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HitCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissCount", wireType)
			}
			m.MissCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheSize", wireType)
			}
			m.CacheSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheCount", wireType)
			}
			m.CacheCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evictions", wireType)
			}
			m.Evictions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Evictions |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsRecoveryStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsRecoveryStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsRecoveryStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentAsSource", wireType)
			}
			m.CurrentAsSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentAsSource |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentAsTarget", wireType)
			}
			m.CurrentAsTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentAsTarget |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsRefreshStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsRefreshStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsRefreshStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTimeInMillis", wireType)
			}
			m.TotalTimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsRequestCacheStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsRequestCacheStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsRequestCacheStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemorySize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySizeInBytes", wireType)
			}
			m.MemorySizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemorySizeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evictions", wireType)
			}
			m.Evictions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Evictions |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HitCount", wireType)
			}
			m.HitCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HitCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissCount", wireType)
			}
			m.MissCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsSearchStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsSearchStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsSearchStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenContexts", wireType)
			}
			m.OpenContexts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenContexts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryTotal", wireType)
			}
			m.QueryTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryTimeInMillis", wireType)
			}
			m.QueryTimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryTimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryCurrent", wireType)
			}
			m.QueryCurrent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryCurrent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchTotal", wireType)
			}
			m.FetchTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FetchTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FetchTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchTimeInMillis", wireType)
			}
			m.FetchTimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FetchTimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchCurrent", wireType)
			}
			m.FetchCurrent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FetchCurrent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScrollTotal", wireType)
			}
			m.ScrollTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScrollTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScrollTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScrollTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScrollTimeInMillis", wireType)
			}
			m.ScrollTimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScrollTimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScrollCurrent", wireType)
			}
			m.ScrollCurrent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScrollCurrent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Groups == nil {
				m.Groups = make(map[string]NodesStatsSearchStats)
			}
			var mapkey string
			mapvalue := &NodesStatsSearchStats{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenerated
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenerated
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NodesStatsSearchStats{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Groups[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsSegmentsStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsSegmentsStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsSegmentsStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryInBytes", wireType)
			}
			m.MemoryInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermsMemory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TermsMemory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermsMemoryInBytes", wireType)
			}
			m.TermsMemoryInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TermsMemoryInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredFieldsMemory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoredFieldsMemory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredFieldsMemoryInBytes", wireType)
			}
			m.StoredFieldsMemoryInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoredFieldsMemoryInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermVectorsMemory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TermVectorsMemory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermVectorsMemoryInBytes", wireType)
			}
			m.TermVectorsMemoryInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TermVectorsMemoryInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormsMemory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NormsMemory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormsMemoryInBytes", wireType)
			}
			m.NormsMemoryInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NormsMemoryInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocValuesMemory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocValuesMemory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocValuesMemoryInBytes", wireType)
			}
			m.DocValuesMemoryInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocValuesMemoryInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexWriterMemory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexWriterMemory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexWriterMemoryInBytes", wireType)
			}
			m.IndexWriterMemoryInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexWriterMemoryInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexWriterMaxMemory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexWriterMaxMemory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexWriterMaxMemoryInBytes", wireType)
			}
			m.IndexWriterMaxMemoryInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexWriterMaxMemoryInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionMapMemory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionMapMemory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionMapMemoryInBytes", wireType)
			}
			m.VersionMapMemoryInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VersionMapMemoryInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedBitSetMemory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FixedBitSetMemory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedBitSetMemoryInBytes", wireType)
			}
			m.FixedBitSetMemoryInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FixedBitSetMemoryInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsShardCountStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsShardCountStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsShardCountStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsStoreStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsStoreStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsStoreStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeInBytes", wireType)
			}
			m.SizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsTranslogStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsTranslogStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsTranslogStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			m.Operations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operations |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeInBytes", wireType)
			}
			m.SizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesStatsWarmerStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesStatsWarmerStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesStatsWarmerStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			m.Current = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Current |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTimeInMillis", wireType)
			}
			m.TotalTimeInMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTimeInMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PGSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PGSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PGSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresBackupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresBackupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresBackupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresConnectionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresConnectionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresConnectionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxConnections", wireType)
			}
			m.MaxConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxConnections |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveConnections", wireType)
			}
			m.ActiveConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveConnections |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresInsight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresInsight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresInsight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresInsightList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresInsightList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresInsightList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, PostgresInsight{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresInsightSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresInsightSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresInsightSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicationStatus = append(m.ReplicationStatus, PostgresReplicationStatus{})
			if err := m.ReplicationStatus[len(m.ReplicationStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VacuumInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VacuumInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresQueries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresQueries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresQueries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresQueriesList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresQueriesList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresQueriesList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, PostgresQueries{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresQueriesSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresQueriesSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresQueriesSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, PostgresQuerySpec{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresQuerySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresQuerySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresQuerySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserOID", wireType)
			}
			m.UserOID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserOID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseOID", wireType)
			}
			m.DatabaseOID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DatabaseOID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calls", wireType)
			}
			m.Calls = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Calls |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTimeMilliSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TotalTimeMilliSeconds = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTimeMilliSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinTimeMilliSeconds = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTimeMilliSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxTimeMilliSeconds = float64(math.Float64frombits(v))
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedBlksHit", wireType)
			}
			m.SharedBlksHit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharedBlksHit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedBlksRead", wireType)
			}
			m.SharedBlksRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharedBlksRead |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedBlksDirtied", wireType)
			}
			m.SharedBlksDirtied = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharedBlksDirtied |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedBlksWritten", wireType)
			}
			m.SharedBlksWritten = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharedBlksWritten |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalBlksHit", wireType)
			}
			m.LocalBlksHit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalBlksHit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalBlksRead", wireType)
			}
			m.LocalBlksRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalBlksRead |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalBlksDirtied", wireType)
			}
			m.LocalBlksDirtied = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalBlksDirtied |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalBlksWritten", wireType)
			}
			m.LocalBlksWritten = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalBlksWritten |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempBlksRead", wireType)
			}
			m.TempBlksRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TempBlksRead |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempBlksWritten", wireType)
			}
			m.TempBlksWritten = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TempBlksWritten |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlkReadTimeMilliSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BlkReadTimeMilliSeconds = float64(math.Float64frombits(v))
		case 20:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlkWriteTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BlkWriteTime = float64(math.Float64frombits(v))
		case 21:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferHitPercentage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BufferHitPercentage = float64(math.Float64frombits(v))
		case 22:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalBufferHitPercentage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LocalBufferHitPercentage = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresReplicationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresReplicationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresReplicationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteLag", wireType)
			}
			m.WriteLag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteLag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushLag", wireType)
			}
			m.FlushLag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlushLag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayLag", wireType)
			}
			m.ReplayLag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplayLag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresSchemaOverview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresSchemaOverview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresSchemaOverview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresSchemaOverviewList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresSchemaOverviewList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresSchemaOverviewList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, PostgresSchemaOverview{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresSettingsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresSettingsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresSettingsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, PostgresSettings{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresSettingsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresSettingsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresSettingsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settings = append(m.Settings, PGSetting{})
			if err := m.Settings[len(m.Settings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresVacuumInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresVacuumInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresVacuumInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoVacuum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoVacuum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveVacuumProcess", wireType)
			}
			m.ActiveVacuumProcess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveVacuumProcess |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisDatabaseSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisDatabaseSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisDatabaseSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DBId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DBId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expires == nil {
				m.Expires = &v1.Time{}
			}
			if err := m.Expires.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgTTLMilliSeconds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvgTTLMilliSeconds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisInsight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisInsight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisInsight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisInsightList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisInsightList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisInsightList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, RedisInsight{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisInsightSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisInsightSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisInsightSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvictionPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvictionPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxClients", wireType)
			}
			m.MaxClients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxClients |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedClients", wireType)
			}
			m.ConnectedClients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectedClients |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			m.BlockedClients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockedClients |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalKeys", wireType)
			}
			m.TotalKeys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalKeys |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredKeys", wireType)
			}
			m.ExpiredKeys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredKeys |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvictedKeys", wireType)
			}
			m.EvictedKeys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EvictedKeys |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedConnections", wireType)
			}
			m.ReceivedConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedConnections |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectedConnections", wireType)
			}
			m.RejectedConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejectedConnections |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowLogThresholdMircoSeconds", wireType)
			}
			m.SlowLogThresholdMircoSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlowLogThresholdMircoSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowLogMaxLen", wireType)
			}
			m.SlowLogMaxLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlowLogMaxLen |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisQueries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisQueries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisQueries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisQueriesList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisQueriesList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisQueriesList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, RedisQueries{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisQueriesSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisQueriesSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisQueriesSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, RedisQuerySpec{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisQuerySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisQuerySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisQuerySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryTimestamp == nil {
				m.QueryTimestamp = &v1.Time{}
			}
			if err := m.QueryTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecTimeInMircoSeconds", wireType)
			}
			m.ExecTimeInMircoSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecTimeInMircoSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisSchemaOverview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisSchemaOverview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisSchemaOverview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisSchemaOverviewList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisSchemaOverviewList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisSchemaOverviewList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, RedisSchemaOverview{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisSchemaOverviewSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisSchemaOverviewSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisSchemaOverviewSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Databases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Databases = append(m.Databases, RedisDatabaseSpec{})
			if err := m.Databases[len(m.Databases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
